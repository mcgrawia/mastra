// This file is auto-generated by @hey-api/openapi-ts

export type actions_billing_usage = {
  /**
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on macOS runner machines.
     */
    MACOS?: number;
    /**
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU?: number;
    /**
     * Total minutes used on Windows runner machines.
     */
    WINDOWS?: number;
    /**
     * Total minutes used on macOS 12 core runner machines.
     */
    macos_12_core?: number;
    /**
     * Total minutes used on all runner machines.
     */
    total?: number;
    /**
     * Total minutes used on Ubuntu 16 core runner machines.
     */
    ubuntu_16_core?: number;
    /**
     * Total minutes used on Ubuntu 32 core runner machines.
     */
    ubuntu_32_core?: number;
    /**
     * Total minutes used on Ubuntu 4 core runner machines.
     */
    ubuntu_4_core?: number;
    /**
     * Total minutes used on Ubuntu 64 core runner machines.
     */
    ubuntu_64_core?: number;
    /**
     * Total minutes used on Ubuntu 8 core runner machines.
     */
    ubuntu_8_core?: number;
    /**
     * Total minutes used on Windows 16 core runner machines.
     */
    windows_16_core?: number;
    /**
     * Total minutes used on Windows 32 core runner machines.
     */
    windows_32_core?: number;
    /**
     * Total minutes used on Windows 4 core runner machines.
     */
    windows_4_core?: number;
    /**
     * Total minutes used on Windows 64 core runner machines.
     */
    windows_64_core?: number;
    /**
     * Total minutes used on Windows 8 core runner machines.
     */
    windows_8_core?: number;
  };
  /**
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  /**
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
};

/**
 * Repository actions caches
 */
export type actions_cache_list = {
  /**
   * Array of caches
   */
  actions_caches: Array<{
    created_at?: string;
    id?: number;
    key?: string;
    last_accessed_at?: string;
    ref?: string;
    size_in_bytes?: number;
    version?: string;
  }>;
  /**
   * Total number of caches
   */
  total_count: number;
};

/**
 * GitHub Actions Cache Usage by repository.
 */
export type actions_cache_usage_by_repository = {
  /**
   * The number of active caches in the repository.
   */
  active_caches_count: number;
  /**
   * The sum of the size in bytes of all the active cache items in the repository.
   */
  active_caches_size_in_bytes: number;
  /**
   * The repository owner and name for the cache usage being shown.
   */
  full_name: string;
};

export type actions_cache_usage_org_enterprise = {
  /**
   * The count of active caches across all repositories of an enterprise or an organization.
   */
  total_active_caches_count: number;
  /**
   * The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
   */
  total_active_caches_size_in_bytes: number;
};

/**
 * Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
 */
export type actions_can_approve_pull_request_reviews = boolean;

/**
 * The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
 */
export type actions_default_workflow_permissions = 'read' | 'write';

/**
 * Whether GitHub Actions is enabled on the repository.
 */
export type actions_enabled = boolean;

export type actions_get_default_workflow_permissions = {
  can_approve_pull_request_reviews: actions_can_approve_pull_request_reviews;
  default_workflow_permissions: actions_default_workflow_permissions;
};

export type actions_organization_permissions = {
  allowed_actions?: allowed_actions;
  enabled_repositories: enabled_repositories;
  selected_actions_url?: selected_actions_url;
  /**
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
   */
  selected_repositories_url?: string;
};

/**
 * The public key used for setting Actions Secrets.
 */
export type actions_public_key = {
  created_at?: string;
  id?: number;
  /**
   * The Base64 encoded public key.
   */
  key: string;
  /**
   * The identifier for the key.
   */
  key_id: string;
  title?: string;
  url?: string;
};

export type actions_repository_permissions = {
  allowed_actions?: allowed_actions;
  enabled: actions_enabled;
  selected_actions_url?: selected_actions_url;
};

/**
 * Set secrets for GitHub Actions.
 */
export type actions_secret = {
  created_at: string;
  /**
   * The name of the secret.
   */
  name: string;
  updated_at: string;
};

export type actions_set_default_workflow_permissions = {
  can_approve_pull_request_reviews?: actions_can_approve_pull_request_reviews;
  default_workflow_permissions?: actions_default_workflow_permissions;
};

export type actions_variable = {
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;
  /**
   * The name of the variable.
   */
  name: string;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;
  /**
   * The value of the variable.
   */
  value: string;
};

export type actions_workflow_access_to_repository = {
  /**
   * Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
   * repository.
   *
   * `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repos only. `organization` level access allows sharing across the organization.
   */
  access_level: 'none' | 'user' | 'organization';
};

/**
 * Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
 * repository.
 *
 * `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repos only. `organization` level access allows sharing across the organization.
 */
export type access_level = 'none' | 'user' | 'organization';

/**
 * Actor
 */
export type actor = {
  avatar_url: string;
  display_login?: string;
  gravatar_id: string | null;
  id: number;
  login: string;
  url: string;
};

/**
 * Added to Project Issue Event
 */
export type added_to_project_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  project_card?: {
    column_name: string;
    id: number;
    previous_column_name?: string;
    project_id: number;
    project_url: string;
    url: string;
  };
  url: string;
};

/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type alert_created_at = string;

/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type alert_dismissed_at = string | null;

/**
 * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type alert_fixed_at = string | null;

/**
 * The GitHub URL of the alert resource.
 */
export type alert_html_url = string;

/**
 * The REST API URL for fetching the list of instances for an alert.
 */
export type alert_instances_url = string;

/**
 * The security alert number.
 */
export type alert_number = number;

/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type alert_updated_at = string;

/**
 * The REST API URL of the alert resource.
 */
export type alert_url = string;

/**
 * The permissions policy that controls the actions and reusable workflows that are allowed to run.
 */
export type allowed_actions = 'all' | 'local_only' | 'selected';

/**
 * Api Overview
 */
export type api_overview = {
  actions?: Array<string>;
  api?: Array<string>;
  dependabot?: Array<string>;
  git?: Array<string>;
  hooks?: Array<string>;
  importer?: Array<string>;
  packages?: Array<string>;
  pages?: Array<string>;
  ssh_key_fingerprints?: {
    SHA256_DSA?: string;
    SHA256_ECDSA?: string;
    SHA256_ED25519?: string;
    SHA256_RSA?: string;
  };
  ssh_keys?: Array<string>;
  verifiable_password_authentication: boolean;
  web?: Array<string>;
};

/**
 * The permissions granted to the user-to-server access token.
 */
export type app_permissions = {
  /**
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
   */
  actions?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
   */
  administration?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for checks on code.
   */
  checks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
   */
  contents?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for deployments and deployment statuses.
   */
  deployments?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for managing repository environments.
   */
  environments?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
   */
  issues?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for organization teams and members.
   */
  members?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
   */
  metadata?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage access to an organization.
   */
  organization_administration?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage announcement banners for an organization.
   */
  organization_announcement_banners?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
   */
  organization_custom_roles?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage the post-receive hooks for an organization.
   */
  organization_hooks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for organization packages published to GitHub Packages.
   */
  organization_packages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for viewing an organization's plan.
   */
  organization_plan?: 'read';
  /**
   * The level of permission to grant the access token to manage organization projects and projects beta (where available).
   */
  organization_projects?: 'read' | 'write' | 'admin';
  /**
   * The level of permission to grant the access token to manage organization secrets.
   */
  organization_secrets?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
   */
  organization_self_hosted_runners?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage users blocked by the organization.
   */
  organization_user_blocking?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for packages published to GitHub Packages.
   */
  packages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
   */
  pages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
   */
  pull_requests?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage announcement banners for a repository.
   */
  repository_announcement_banners?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage the post-receive hooks for a repository.
   */
  repository_hooks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage repository projects, columns, and cards.
   */
  repository_projects?: 'read' | 'write' | 'admin';
  /**
   * The level of permission to grant the access token to view and manage secret scanning alerts.
   */
  secret_scanning_alerts?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage repository secrets.
   */
  secrets?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage security events like code scanning alerts.
   */
  security_events?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage just a single file.
   */
  single_file?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for commit statuses.
   */
  statuses?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage team discussions and related comments.
   */
  team_discussions?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage Dependabot alerts.
   */
  vulnerability_alerts?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to update GitHub Actions workflow files.
   */
  workflows?: 'write';
};

/**
 * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
 */
export type actions = 'read' | 'write';

/**
 * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
 */
export type administration = 'read' | 'write';

/**
 * The level of permission to grant the access token for checks on code.
 */
export type checks = 'read' | 'write';

/**
 * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
 */
export type contents = 'read' | 'write';

/**
 * The level of permission to grant the access token for deployments and deployment statuses.
 */
export type deployments = 'read' | 'write';

/**
 * The level of permission to grant the access token for managing repository environments.
 */
export type environments = 'read' | 'write';

/**
 * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
 */
export type issues = 'read' | 'write';

/**
 * The level of permission to grant the access token for organization teams and members.
 */
export type members = 'read' | 'write';

/**
 * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
 */
export type metadata = 'read' | 'write';

/**
 * The level of permission to grant the access token to manage access to an organization.
 */
export type organization_administration = 'read' | 'write';

/**
 * The level of permission to grant the access token to view and manage announcement banners for an organization.
 */
export type organization_announcement_banners = 'read' | 'write';

/**
 * The level of permission to grant the access token for custom repository roles management. This property is in beta and is subject to change.
 */
export type organization_custom_roles = 'read' | 'write';

/**
 * The level of permission to grant the access token to manage the post-receive hooks for an organization.
 */
export type organization_hooks = 'read' | 'write';

/**
 * The level of permission to grant the access token for organization packages published to GitHub Packages.
 */
export type organization_packages = 'read' | 'write';

/**
 * The level of permission to grant the access token for viewing an organization's plan.
 */
export type organization_plan = 'read';

/**
 * The level of permission to grant the access token to manage organization projects and projects beta (where available).
 */
export type organization_projects = 'read' | 'write' | 'admin';

/**
 * The level of permission to grant the access token to manage organization secrets.
 */
export type organization_secrets = 'read' | 'write';

/**
 * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
 */
export type organization_self_hosted_runners = 'read' | 'write';

/**
 * The level of permission to grant the access token to view and manage users blocked by the organization.
 */
export type organization_user_blocking = 'read' | 'write';

/**
 * The level of permission to grant the access token for packages published to GitHub Packages.
 */
export type packages = 'read' | 'write';

/**
 * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
 */
export type pages = 'read' | 'write';

/**
 * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
 */
export type pull_requests = 'read' | 'write';

/**
 * The level of permission to grant the access token to view and manage announcement banners for a repository.
 */
export type repository_announcement_banners = 'read' | 'write';

/**
 * The level of permission to grant the access token to manage the post-receive hooks for a repository.
 */
export type repository_hooks = 'read' | 'write';

/**
 * The level of permission to grant the access token to manage repository projects, columns, and cards.
 */
export type repository_projects = 'read' | 'write' | 'admin';

/**
 * The level of permission to grant the access token to view and manage secret scanning alerts.
 */
export type secret_scanning_alerts = 'read' | 'write';

/**
 * The level of permission to grant the access token to manage repository secrets.
 */
export type secrets = 'read' | 'write';

/**
 * The level of permission to grant the access token to view and manage security events like code scanning alerts.
 */
export type security_events = 'read' | 'write';

/**
 * The level of permission to grant the access token to manage just a single file.
 */
export type single_file = 'read' | 'write';

/**
 * The level of permission to grant the access token for commit statuses.
 */
export type statuses = 'read' | 'write';

/**
 * The level of permission to grant the access token to manage team discussions and related comments.
 */
export type team_discussions = 'read' | 'write';

/**
 * The level of permission to grant the access token to manage Dependabot alerts.
 */
export type vulnerability_alerts = 'read' | 'write';

/**
 * The level of permission to grant the access token to update GitHub Actions workflow files.
 */
export type workflows = 'write';

/**
 * An artifact
 */
export type artifact = {
  archive_download_url: string;
  created_at: string | null;
  /**
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  expires_at: string | null;
  id: number;
  /**
   * The name of the artifact.
   */
  name: string;
  node_id: string;
  /**
   * The size in bytes of the artifact.
   */
  size_in_bytes: number;
  updated_at: string | null;
  url: string;
  workflow_run?: {
    head_branch?: string;
    head_repository_id?: number;
    head_sha?: string;
    id?: number;
    repository_id?: number;
  } | null;
};

/**
 * Assigned Issue Event
 */
export type assigned_issue_event = {
  actor: simple_user;
  assignee: simple_user;
  assigner: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: integration;
  url: string;
};

/**
 * Authentication Token
 */
export type authentication_token = {
  /**
   * The time this token expires
   */
  expires_at: string;
  permissions?: {
    [key: string]: string;
  };
  /**
   * The repositories this token has access to
   */
  repositories?: Array<repository>;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection?: 'all' | 'selected';
  single_file?: string | null;
  /**
   * The token used for authentication
   */
  token: string;
};

/**
 * Describe whether all repositories have been selected or there's a selection involved
 */
export type repository_selection = 'all' | 'selected';

/**
 * How the author is associated with the repository.
 */
export type author_association =
  | 'COLLABORATOR'
  | 'CONTRIBUTOR'
  | 'FIRST_TIMER'
  | 'FIRST_TIME_CONTRIBUTOR'
  | 'MANNEQUIN'
  | 'MEMBER'
  | 'NONE'
  | 'OWNER';

/**
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export type authorization = {
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  created_at: string;
  expires_at: string | null;
  fingerprint: string | null;
  hashed_token: string | null;
  id: number;
  installation?: nullable_scoped_installation;
  note: string | null;
  note_url: string | null;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: Array<string> | null;
  token: string;
  token_last_eight: string | null;
  updated_at: string;
  url: string;
  user?: nullable_simple_user;
};

/**
 * The status of auto merging a pull request.
 */
export type auto_merge = {
  /**
   * Commit message for the merge commit.
   */
  commit_message: string;
  /**
   * Title for the merge commit message.
   */
  commit_title: string;
  enabled_by: simple_user;
  /**
   * The merge method to use.
   */
  merge_method: 'merge' | 'squash' | 'rebase';
} | null;

/**
 * The merge method to use.
 */
export type merge_method = 'merge' | 'squash' | 'rebase';

/**
 * An autolink reference.
 */
export type autolink = {
  id: number;
  /**
   * Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
   */
  is_alphanumeric: boolean;
  /**
   * The prefix of a key that is linkified.
   */
  key_prefix: string;
  /**
   * A template for the target URL that is generated if a key was found.
   */
  url_template: string;
};

/**
 * Base Gist
 */
export type base_gist = {
  comments: number;
  comments_url: string;
  commits_url: string;
  created_at: string;
  description: string | null;
  files: {
    [key: string]: {
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      type?: string;
    };
  };
  forks?: Array<string>;
  forks_url: string;
  git_pull_url: string;
  git_push_url: string;
  history?: Array<string>;
  html_url: string;
  id: string;
  node_id: string;
  owner?: simple_user;
  public: boolean;
  truncated?: boolean;
  updated_at: string;
  url: string;
  user: nullable_simple_user;
};

/**
 * Basic Error
 */
export type basic_error = {
  documentation_url?: string;
  message?: string;
  status?: string;
  url?: string;
};

/**
 * Blob
 */
export type blob = {
  content: string;
  encoding: string;
  highlighted_content?: string;
  node_id: string;
  sha: string;
  size: number | null;
  url: string;
};

/**
 * Branch Protection
 */
export type branch_protection = {
  allow_deletions?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled?: boolean;
  };
  enabled?: boolean;
  enforce_admins?: protected_branch_admin_enforced;
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    enabled?: boolean;
  };
  name?: string;
  protection_url?: string;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  required_linear_history?: {
    enabled?: boolean;
  };
  required_pull_request_reviews?: protected_branch_pull_request_review;
  required_signatures?: {
    enabled: boolean;
    url: string;
  };
  required_status_checks?: protected_branch_required_status_check;
  restrictions?: branch_restriction_policy;
  url?: string;
};

/**
 * Branch Restriction Policy
 */
export type branch_restriction_policy = {
  apps: Array<{
    created_at?: string;
    description?: string;
    events?: Array<string>;
    external_url?: string;
    html_url?: string;
    id?: number;
    name?: string;
    node_id?: string;
    owner?: {
      avatar_url?: string;
      description?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issues_url?: string;
      login?: string;
      members_url?: string;
      node_id?: string;
      organizations_url?: string;
      public_members_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    permissions?: {
      contents?: string;
      issues?: string;
      metadata?: string;
      single_file?: string;
    };
    slug?: string;
    updated_at?: string;
  }>;
  apps_url: string;
  teams: Array<{
    description?: string | null;
    html_url?: string;
    id?: number;
    members_url?: string;
    name?: string;
    node_id?: string;
    parent?: string | null;
    permission?: string;
    privacy?: string;
    repositories_url?: string;
    slug?: string;
    url?: string;
  }>;
  teams_url: string;
  url: string;
  users: Array<{
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
  }>;
  users_url: string;
};

/**
 * Branch Short
 */
export type branch_short = {
  commit: {
    sha: string;
    url: string;
  };
  name: string;
  protected: boolean;
};

/**
 * Branch With Protection
 */
export type branch_with_protection = {
  _links: {
    html: string;
    self: string;
  };
  commit: commit;
  name: string;
  pattern?: string;
  protected: boolean;
  protection: branch_protection;
  protection_url: string;
  required_approving_review_count?: number;
};

/**
 * Check Annotation
 */
export type check_annotation = {
  annotation_level: string | null;
  blob_href: string;
  end_column: number | null;
  end_line: number;
  message: string | null;
  path: string;
  raw_details: string | null;
  start_column: number | null;
  start_line: number;
  title: string | null;
};

/**
 * A check performed on the code of a given code change
 */
export type check_run = {
  app: nullable_integration;
  check_suite: {
    id: number;
  } | null;
  completed_at: string | null;
  conclusion: ('success' | 'failure' | 'neutral' | 'cancelled' | 'skipped' | 'timed_out' | 'action_required') | null;
  deployment?: deployment_simple;
  details_url: string | null;
  external_id: string | null;
  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  html_url: string | null;
  /**
   * The id of the check.
   */
  id: number;
  /**
   * The name of the check.
   */
  name: string;
  node_id: string;
  output: {
    annotations_count: number;
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: Array<pull_request_minimal>;
  started_at: string | null;
  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: 'queued' | 'in_progress' | 'completed';
  url: string;
};

export type conclusion = 'success' | 'failure' | 'neutral' | 'cancelled' | 'skipped' | 'timed_out' | 'action_required';

/**
 * The phase of the lifecycle that the check is currently in.
 */
export type status = 'queued' | 'in_progress' | 'completed';

/**
 * A check performed on the code of a given code change
 */
export type check_run_with_simple_check_suite = {
  app: nullable_integration;
  check_suite: simple_check_suite;
  completed_at: string | null;
  conclusion:
    | (
        | 'waiting'
        | 'pending'
        | 'startup_failure'
        | 'stale'
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
      )
    | null;
  deployment?: deployment_simple;
  details_url: string;
  external_id: string;
  /**
   * The SHA of the commit that is being checked.
   */
  head_sha: string;
  html_url: string;
  /**
   * The id of the check.
   */
  id: number;
  /**
   * The name of the check.
   */
  name: string;
  node_id: string;
  output: {
    annotations_count: number;
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: Array<pull_request_minimal>;
  started_at: string;
  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status: 'queued' | 'in_progress' | 'completed' | 'pending';
  url: string;
};

export type conclusion2 =
  | 'waiting'
  | 'pending'
  | 'startup_failure'
  | 'stale'
  | 'success'
  | 'failure'
  | 'neutral'
  | 'cancelled'
  | 'skipped'
  | 'timed_out'
  | 'action_required';

/**
 * The phase of the lifecycle that the check is currently in.
 */
export type status2 = 'queued' | 'in_progress' | 'completed' | 'pending';

/**
 * A suite of checks performed on the code of a given code change
 */
export type check_suite = {
  after: string | null;
  app: nullable_integration;
  before: string | null;
  check_runs_url: string;
  conclusion:
    | (
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
        | 'startup_failure'
        | 'stale'
      )
    | null;
  created_at: string | null;
  head_branch: string | null;
  head_commit: simple_commit;
  /**
   * The SHA of the head commit that is being checked.
   */
  head_sha: string;
  id: number;
  latest_check_runs_count: number;
  node_id: string;
  pull_requests: Array<pull_request_minimal> | null;
  repository: minimal_repository;
  rerequestable?: boolean;
  runs_rerequestable?: boolean;
  status: ('queued' | 'in_progress' | 'completed') | null;
  updated_at: string | null;
  url: string | null;
};

export type conclusion3 =
  | 'success'
  | 'failure'
  | 'neutral'
  | 'cancelled'
  | 'skipped'
  | 'timed_out'
  | 'action_required'
  | 'startup_failure'
  | 'stale';

/**
 * Check suite configuration preferences for a repository.
 */
export type check_suite_preference = {
  preferences: {
    auto_trigger_checks?: Array<{
      app_id: number;
      setting: boolean;
    }>;
  };
  repository: minimal_repository;
};

/**
 * Clone Traffic
 */
export type clone_traffic = {
  clones: Array<traffic>;
  count: number;
  uniques: number;
};

/**
 * Code Frequency Stat
 */
export type code_frequency_stat = Array<number>;

/**
 * Code Of Conduct
 */
export type code_of_conduct = {
  body?: string;
  html_url: string | null;
  key: string;
  name: string;
  url: string;
};

/**
 * Code of Conduct Simple
 */
export type code_of_conduct_simple = {
  html_url: string | null;
  key: string;
  name: string;
  url: string;
};

export type code_scanning_alert = {
  created_at: alert_created_at;
  dismissed_at: alert_dismissed_at;
  dismissed_by: nullable_simple_user;
  dismissed_comment?: code_scanning_alert_dismissed_comment;
  dismissed_reason: code_scanning_alert_dismissed_reason;
  fixed_at?: alert_fixed_at;
  html_url: alert_html_url;
  instances_url: alert_instances_url;
  most_recent_instance: code_scanning_alert_instance;
  number: alert_number;
  rule: code_scanning_alert_rule;
  state: code_scanning_alert_state;
  tool: code_scanning_analysis_tool;
  updated_at?: alert_updated_at;
  url: alert_url;
};

/**
 * A classification of the file. For example to identify it as generated.
 */
export type code_scanning_alert_classification = 'source' | 'generated' | 'test' | 'library';

/**
 * The dismissal comment associated with the dismissal of the alert.
 */
export type code_scanning_alert_dismissed_comment = string | null;

/**
 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
 */
export type code_scanning_alert_dismissed_reason = 'false positive' | "won't fix" | 'used in tests';

/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 */
export type code_scanning_alert_environment = string;

export type code_scanning_alert_instance = {
  analysis_key?: code_scanning_analysis_analysis_key;
  category?: code_scanning_analysis_category;
  /**
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
  classifications?: Array<code_scanning_alert_classification>;
  commit_sha?: string;
  environment?: code_scanning_alert_environment;
  html_url?: string;
  location?: code_scanning_alert_location;
  message?: {
    text?: string;
  };
  ref?: code_scanning_ref;
  state?: code_scanning_alert_state;
};

export type code_scanning_alert_items = {
  created_at: alert_created_at;
  dismissed_at: alert_dismissed_at;
  dismissed_by: nullable_simple_user;
  dismissed_comment?: code_scanning_alert_dismissed_comment;
  dismissed_reason: code_scanning_alert_dismissed_reason;
  fixed_at?: alert_fixed_at;
  html_url: alert_html_url;
  instances_url: alert_instances_url;
  most_recent_instance: code_scanning_alert_instance;
  number: alert_number;
  rule: code_scanning_alert_rule_summary;
  state: code_scanning_alert_state;
  tool: code_scanning_analysis_tool;
  updated_at?: alert_updated_at;
  url: alert_url;
};

/**
 * Describe a region within a file for the alert.
 */
export type code_scanning_alert_location = {
  end_column?: number;
  end_line?: number;
  path?: string;
  start_column?: number;
  start_line?: number;
};

export type code_scanning_alert_rule = {
  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /**
   * description of the rule used to detect the alert.
   */
  full_description?: string;
  /**
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string | null;
  /**
   * A link to the documentation for the rule used to detect the alert.
   */
  help_uri?: string | null;
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /**
   * The security severity of the alert.
   */
  security_severity_level?: ('low' | 'medium' | 'high' | 'critical') | null;
  /**
   * The severity of the alert.
   */
  severity?: ('none' | 'note' | 'warning' | 'error') | null;
  /**
   * A set of tags applicable for the rule.
   */
  tags?: Array<string> | null;
};

/**
 * The security severity of the alert.
 */
export type security_severity_level = 'low' | 'medium' | 'high' | 'critical';

/**
 * The severity of the alert.
 */
export type severity = 'none' | 'note' | 'warning' | 'error';

export type code_scanning_alert_rule_summary = {
  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /**
   * The severity of the alert.
   */
  severity?: ('none' | 'note' | 'warning' | 'error') | null;
  /**
   * A set of tags applicable for the rule.
   */
  tags?: Array<string> | null;
};

/**
 * Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
 */
export type code_scanning_alert_set_state = 'open' | 'dismissed';

/**
 * Severity of a code scanning alert.
 */
export type code_scanning_alert_severity = 'critical' | 'high' | 'medium' | 'low' | 'warning' | 'note' | 'error';

/**
 * State of a code scanning alert.
 */
export type code_scanning_alert_state = 'open' | 'closed' | 'dismissed' | 'fixed';

export type code_scanning_analysis = {
  analysis_key: code_scanning_analysis_analysis_key;
  category?: code_scanning_analysis_category;
  commit_sha: code_scanning_analysis_commit_sha;
  created_at: code_scanning_analysis_created_at;
  deletable: boolean;
  environment: code_scanning_analysis_environment;
  error: string;
  /**
   * Unique identifier for this analysis.
   */
  id: number;
  ref: code_scanning_ref;
  /**
   * The total number of results in the analysis.
   */
  results_count: number;
  /**
   * The total number of rules used in the analysis.
   */
  rules_count: number;
  sarif_id: code_scanning_analysis_sarif_id;
  tool: code_scanning_analysis_tool;
  url: code_scanning_analysis_url;
  /**
   * Warning generated when processing the analysis
   */
  warning: string;
};

/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 */
export type code_scanning_analysis_analysis_key = string;

/**
 * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 */
export type code_scanning_analysis_category = string;

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 */
export type code_scanning_analysis_commit_sha = string;

/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type code_scanning_analysis_created_at = string;

/**
 * Successful deletion of a code scanning analysis
 */
export type code_scanning_analysis_deletion = {
  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   */
  readonly confirm_delete_url: string | null;
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   */
  readonly next_analysis_url: string | null;
};

/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 */
export type code_scanning_analysis_environment = string;

/**
 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
 */
export type code_scanning_analysis_sarif_file = string;

/**
 * An identifier for the upload.
 */
export type code_scanning_analysis_sarif_id = string;

export type code_scanning_analysis_tool = {
  guid?: code_scanning_analysis_tool_guid;
  name?: code_scanning_analysis_tool_name;
  version?: code_scanning_analysis_tool_version;
};

/**
 * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 */
export type code_scanning_analysis_tool_guid = string | null;

/**
 * The name of the tool used to generate the code scanning analysis.
 */
export type code_scanning_analysis_tool_name = string;

/**
 * The version of the tool used to generate the code scanning analysis.
 */
export type code_scanning_analysis_tool_version = string | null;

/**
 * The REST API URL of the analysis resource.
 */
export type code_scanning_analysis_url = string;

/**
 * A CodeQL database.
 */
export type code_scanning_codeql_database = {
  /**
   * The MIME type of the CodeQL database file.
   */
  content_type: string;
  /**
   * The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;
  /**
   * The ID of the CodeQL database.
   */
  id: number;
  /**
   * The language of the CodeQL database.
   */
  language: string;
  /**
   * The name of the CodeQL database.
   */
  name: string;
  /**
   * The size of the CodeQL database file in bytes.
   */
  size: number;
  /**
   * The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;
  uploader: simple_user;
  /**
   * The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
   */
  url: string;
};

export type code_scanning_organization_alert_items = {
  created_at: alert_created_at;
  dismissed_at: alert_dismissed_at;
  dismissed_by: nullable_simple_user;
  dismissed_comment?: code_scanning_alert_dismissed_comment;
  dismissed_reason: code_scanning_alert_dismissed_reason;
  fixed_at?: alert_fixed_at;
  html_url: alert_html_url;
  instances_url: alert_instances_url;
  most_recent_instance: code_scanning_alert_instance;
  number: alert_number;
  repository: simple_repository;
  rule: code_scanning_alert_rule;
  state: code_scanning_alert_state;
  tool: code_scanning_analysis_tool;
  updated_at?: alert_updated_at;
  url: alert_url;
};

/**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 */
export type code_scanning_ref = string;

export type code_scanning_sarifs_receipt = {
  id?: code_scanning_analysis_sarif_id;
  /**
   * The REST API URL for checking the status of the upload.
   */
  readonly url?: string;
};

export type code_scanning_sarifs_status = {
  /**
   * The REST API URL for getting the analyses associated with the upload.
   */
  readonly analyses_url?: string | null;
  /**
   * Any errors that ocurred during processing of the delivery.
   */
  readonly errors?: Array<string> | null;
  /**
   * `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
   */
  processing_status?: 'pending' | 'complete' | 'failed';
};

/**
 * `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
 */
export type processing_status = 'pending' | 'complete' | 'failed';

/**
 * Code Search Result Item
 */
export type code_search_result_item = {
  file_size?: number;
  git_url: string;
  html_url: string;
  language?: string | null;
  last_modified_at?: string;
  line_numbers?: Array<string>;
  name: string;
  path: string;
  repository: minimal_repository;
  score: number;
  sha: string;
  text_matches?: search_result_text_matches;
  url: string;
};

/**
 * A list of errors found in a repo's CODEOWNERS file
 */
export type codeowners_errors = {
  errors: Array<{
    /**
     * The column number where this errors occurs.
     */
    column: number;
    /**
     * The type of error.
     */
    kind: string;
    /**
     * The line number where this errors occurs.
     */
    line: number;
    /**
     * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
     */
    message: string;
    /**
     * The path of the file where the error occurred.
     */
    path: string;
    /**
     * The contents of the line where the error occurs.
     */
    source?: string;
    /**
     * Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
     */
    suggestion?: string | null;
  }>;
};

/**
 * A codespace.
 */
export type codespace = {
  billable_owner: simple_user;
  created_at: string;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   */
  devcontainer_path?: string | null;
  /**
   * Display name for this codespace.
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   */
  environment_id: string | null;
  /**
   * Details about the codespace's git repository.
   */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     */
    behind?: number;
    /**
     * Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;
    /**
     * Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     */
    ref?: string;
  };
  id: number;
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   */
  idle_timeout_minutes: number | null;
  /**
   * Text to show user when codespace idle timeout minutes has been overridden by an organization policy
   */
  idle_timeout_notice?: string | null;
  /**
   * The text to display to a user when a codespace has been stopped for a potentially actionable reason.
   */
  last_known_stop_notice?: string | null;
  /**
   * Last known time this codespace was started.
   */
  last_used_at: string;
  /**
   * The Azure region where this codespace is located.
   */
  location: 'EastUs' | 'SouthEastAsia' | 'WestEurope' | 'WestUs2';
  machine: nullable_codespace_machine;
  /**
   * API URL to access available alternate machine types for this codespace.
   */
  machines_url: string;
  /**
   * Automatically generated name of this codespace.
   */
  name: string;
  owner: simple_user;
  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean | null;
  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   */
  prebuild: boolean | null;
  /**
   * API URL to publish this codespace to a new repository.
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   */
  pulls_url: string | null;
  recent_folders: Array<string>;
  repository: minimal_repository;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   */
  retention_expires_at?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   */
  retention_period_minutes?: number | null;
  runtime_constraints?: {
    /**
     * The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: Array<string> | null;
  };
  /**
   * API URL to start this codespace.
   */
  start_url: string;
  /**
   * State of this codespace.
   */
  state:
    | 'string'
    | 'Created'
    | 'Queued'
    | 'Provisioning'
    | 'Available'
    | 'Awaiting'
    | 'Unavailable'
    | 'Deleted'
    | 'Moved'
    | 'Shutdown'
    | 'Archived'
    | 'Starting'
    | 'ShuttingDown'
    | 'Failed'
    | 'Exporting'
    | 'Updating'
    | 'Rebuilding';
  /**
   * API URL to stop this codespace.
   */
  stop_url: string;
  updated_at: string;
  /**
   * API URL for this codespace.
   */
  url: string;
  /**
   * URL to access this codespace on the web.
   */
  web_url: string;
};

/**
 * The Azure region where this codespace is located.
 */
export type location = 'EastUs' | 'SouthEastAsia' | 'WestEurope' | 'WestUs2';

/**
 * State of this codespace.
 */
export type state =
  | 'string'
  | 'Created'
  | 'Queued'
  | 'Provisioning'
  | 'Available'
  | 'Awaiting'
  | 'Unavailable'
  | 'Deleted'
  | 'Moved'
  | 'Shutdown'
  | 'Archived'
  | 'Starting'
  | 'ShuttingDown'
  | 'Failed'
  | 'Exporting'
  | 'Updating'
  | 'Rebuilding';

/**
 * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
 */
export type codespace_export_details = {
  /**
   * Name of the exported branch
   */
  branch?: string | null;
  /**
   * Completion time of the last export operation
   */
  completed_at?: string | null;
  /**
   * Url for fetching export details
   */
  export_url?: string;
  /**
   * Web url for the exported branch
   */
  html_url?: string | null;
  /**
   * Id for the export details
   */
  id?: string;
  /**
   * Git commit SHA of the exported branch
   */
  sha?: string | null;
  /**
   * State of the latest export
   */
  state?: string | null;
};

/**
 * A description of the machine powering a codespace.
 */
export type codespace_machine = {
  /**
   * How many cores are available to the codespace.
   */
  cpus: number;
  /**
   * The display name of the machine includes cores, memory, and storage.
   */
  display_name: string;
  /**
   * How much memory is available to the codespace.
   */
  memory_in_bytes: number;
  /**
   * The name of the machine.
   */
  name: string;
  /**
   * The operating system of the machine.
   */
  operating_system: string;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   */
  prebuild_availability: ('none' | 'ready' | 'in_progress') | null;
  /**
   * How much storage is available to the codespace.
   */
  storage_in_bytes: number;
};

/**
 * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
 */
export type prebuild_availability = 'none' | 'ready' | 'in_progress';

/**
 * A codespace.
 */
export type codespace_with_full_repository = {
  billable_owner: simple_user;
  created_at: string;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   */
  devcontainer_path?: string | null;
  /**
   * Display name for this codespace.
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   */
  environment_id: string | null;
  /**
   * Details about the codespace's git repository.
   */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     */
    behind?: number;
    /**
     * Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;
    /**
     * Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     */
    ref?: string;
  };
  id: number;
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   */
  idle_timeout_minutes: number | null;
  /**
   * Text to show user when codespace idle timeout minutes has been overridden by an organization policy
   */
  idle_timeout_notice?: string | null;
  /**
   * Last known time this codespace was started.
   */
  last_used_at: string;
  /**
   * The Azure region where this codespace is located.
   */
  location: 'EastUs' | 'SouthEastAsia' | 'WestEurope' | 'WestUs2';
  machine: nullable_codespace_machine;
  /**
   * API URL to access available alternate machine types for this codespace.
   */
  machines_url: string;
  /**
   * Automatically generated name of this codespace.
   */
  name: string;
  owner: simple_user;
  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean | null;
  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   */
  prebuild: boolean | null;
  /**
   * API URL to publish this codespace to a new repository.
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   */
  pulls_url: string | null;
  recent_folders: Array<string>;
  repository: full_repository;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   */
  retention_expires_at?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   */
  retention_period_minutes?: number | null;
  runtime_constraints?: {
    /**
     * The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: Array<string> | null;
  };
  /**
   * API URL to start this codespace.
   */
  start_url: string;
  /**
   * State of this codespace.
   */
  state:
    | 'string'
    | 'Created'
    | 'Queued'
    | 'Provisioning'
    | 'Available'
    | 'Awaiting'
    | 'Unavailable'
    | 'Deleted'
    | 'Moved'
    | 'Shutdown'
    | 'Archived'
    | 'Starting'
    | 'ShuttingDown'
    | 'Failed'
    | 'Exporting'
    | 'Updating'
    | 'Rebuilding';
  /**
   * API URL to stop this codespace.
   */
  stop_url: string;
  updated_at: string;
  /**
   * API URL for this codespace.
   */
  url: string;
  /**
   * URL to access this codespace on the web.
   */
  web_url: string;
};

/**
 * Secrets for a GitHub Codespace.
 */
export type codespaces_org_secret = {
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;
  /**
   * The name of the secret
   */
  name: string;
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   */
  selected_repositories_url?: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;
  /**
   * The type of repositories in the organization that the secret is visible to
   */
  visibility: 'all' | 'private' | 'selected';
};

/**
 * The type of repositories in the organization that the secret is visible to
 */
export type visibility = 'all' | 'private' | 'selected';

/**
 * The public key used for setting Codespaces secrets.
 */
export type codespaces_public_key = {
  created_at?: string;
  id?: number;
  /**
   * The Base64 encoded public key.
   */
  key: string;
  /**
   * The identifier for the key.
   */
  key_id: string;
  title?: string;
  url?: string;
};

/**
 * Secrets for a GitHub Codespace.
 */
export type codespaces_secret = {
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;
  /**
   * The name of the secret
   */
  name: string;
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   */
  selected_repositories_url: string;
  /**
   * The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;
  /**
   * The type of repositories in the organization that the secret is visible to
   */
  visibility: 'all' | 'private' | 'selected';
};

/**
 * The public key used for setting user Codespaces' Secrets.
 */
export type codespaces_user_public_key = {
  /**
   * The Base64 encoded public key.
   */
  key: string;
  /**
   * The identifier for the key.
   */
  key_id: string;
};

/**
 * Collaborator
 */
export type collaborator = {
  avatar_url: string;
  email?: string | null;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  html_url: string;
  id: number;
  login: string;
  name?: string | null;
  node_id: string;
  organizations_url: string;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  received_events_url: string;
  repos_url: string;
  role_name: string;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
};

export type combined_billing_usage = {
  /**
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;
  /**
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
};

/**
 * Combined Commit Status
 */
export type combined_commit_status = {
  commit_url: string;
  repository: minimal_repository;
  sha: string;
  state: string;
  statuses: Array<simple_commit_status>;
  total_count: number;
  url: string;
};

/**
 * Commit
 */
export type commit = {
  author: nullable_simple_user;
  comments_url: string;
  commit: {
    author: nullable_git_user;
    comment_count: number;
    committer: nullable_git_user;
    message: string;
    tree: {
      sha: string;
      url: string;
    };
    url: string;
    verification?: verification;
  };
  committer: nullable_simple_user;
  files?: Array<diff_entry>;
  html_url: string;
  node_id: string;
  parents: Array<{
    html_url?: string;
    sha: string;
    url: string;
  }>;
  sha: string;
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  url: string;
};

/**
 * Commit Activity
 */
export type commit_activity = {
  days: Array<number>;
  total: number;
  week: number;
};

/**
 * Commit Comment
 */
export type commit_comment = {
  author_association: author_association;
  body: string;
  commit_id: string;
  created_at: string;
  html_url: string;
  id: number;
  line: number | null;
  node_id: string;
  path: string | null;
  position: number | null;
  reactions?: reaction_rollup;
  updated_at: string;
  url: string;
  user: nullable_simple_user;
};

/**
 * Commit Comparison
 */
export type commit_comparison = {
  ahead_by: number;
  base_commit: commit;
  behind_by: number;
  commits: Array<commit>;
  diff_url: string;
  files?: Array<diff_entry>;
  html_url: string;
  merge_base_commit: commit;
  patch_url: string;
  permalink_url: string;
  status: 'diverged' | 'ahead' | 'behind' | 'identical';
  total_commits: number;
  url: string;
};

export type status3 = 'diverged' | 'ahead' | 'behind' | 'identical';

/**
 * Commit Search Result Item
 */
export type commit_search_result_item = {
  author: nullable_simple_user;
  comments_url: string;
  commit: {
    author: {
      date: string;
      email: string;
      name: string;
    };
    comment_count: number;
    committer: nullable_git_user;
    message: string;
    tree: {
      sha: string;
      url: string;
    };
    url: string;
    verification?: verification;
  };
  committer: nullable_git_user;
  html_url: string;
  node_id: string;
  parents: Array<{
    html_url?: string;
    sha?: string;
    url?: string;
  }>;
  repository: minimal_repository;
  score: number;
  sha: string;
  text_matches?: search_result_text_matches;
  url: string;
};

/**
 * Community Profile
 */
export type community_profile = {
  content_reports_enabled?: boolean;
  description: string | null;
  documentation: string | null;
  files: {
    code_of_conduct: nullable_code_of_conduct_simple;
    code_of_conduct_file: nullable_community_health_file;
    contributing: nullable_community_health_file;
    issue_template: nullable_community_health_file;
    license: nullable_license_simple;
    pull_request_template: nullable_community_health_file;
    readme: nullable_community_health_file;
  };
  health_percentage: number;
  updated_at: string | null;
};

/**
 * A list of directory items
 */
export type content_directory = Array<{
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  content?: string;
  download_url: string | null;
  git_url: string | null;
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: 'dir' | 'file' | 'submodule' | 'symlink';
  url: string;
}>;

/**
 * Content File
 */
export type content_file = {
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  content: string;
  download_url: string | null;
  encoding: string;
  git_url: string | null;
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  submodule_git_url?: string;
  target?: string;
  type: 'file';
  url: string;
};

export type type = 'file';

/**
 * An object describing a submodule
 */
export type content_submodule = {
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  download_url: string | null;
  git_url: string | null;
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  submodule_git_url: string;
  type: 'submodule';
  url: string;
};

export type type2 = 'submodule';

/**
 * An object describing a symlink
 */
export type content_symlink = {
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  download_url: string | null;
  git_url: string | null;
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  target: string;
  type: 'symlink';
  url: string;
};

export type type3 = 'symlink';

/**
 * Content Traffic
 */
export type content_traffic = {
  count: number;
  path: string;
  title: string;
  uniques: number;
};

/**
 * Content Tree
 */
export type content_tree = {
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  download_url: string | null;
  entries?: Array<{
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
    content?: string;
    download_url: string | null;
    git_url: string | null;
    html_url: string | null;
    name: string;
    path: string;
    sha: string;
    size: number;
    type: string;
    url: string;
  }>;
  git_url: string | null;
  html_url: string | null;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  url: string;
};

/**
 * Contributor
 */
export type contributor = {
  avatar_url?: string;
  contributions: number;
  email?: string;
  events_url?: string;
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  gravatar_id?: string | null;
  html_url?: string;
  id?: number;
  login?: string;
  name?: string;
  node_id?: string;
  organizations_url?: string;
  received_events_url?: string;
  repos_url?: string;
  site_admin?: boolean;
  starred_url?: string;
  subscriptions_url?: string;
  type: string;
  url?: string;
};

/**
 * Contributor Activity
 */
export type contributor_activity = {
  author: nullable_simple_user;
  total: number;
  weeks: Array<{
    a?: number;
    c?: number;
    d?: number;
    w?: number;
  }>;
};

/**
 * Converted Note to Issue Issue Event
 */
export type converted_note_to_issue_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: integration;
  project_card?: {
    column_name: string;
    id: number;
    previous_column_name?: string;
    project_id: number;
    project_url: string;
    url: string;
  };
  url: string;
};

/**
 * Demilestoned Issue Event
 */
export type demilestoned_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  milestone: {
    title: string;
  };
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

/**
 * A Dependabot alert.
 */
export type dependabot_alert = {
  created_at: alert_created_at;
  /**
   * Details for the vulnerable dependency.
   */
  readonly dependency: {
    /**
     * The full path to the dependency manifest file, relative to the root of the repository.
     */
    readonly manifest_path?: string;
    package?: dependabot_alert_package;
    /**
     * The execution scope of the vulnerable dependency.
     */
    readonly scope?: ('development' | 'runtime') | null;
  };
  dismissed_at: alert_dismissed_at;
  dismissed_by: nullable_simple_user;
  /**
   * An optional comment associated with the alert's dismissal.
   */
  dismissed_comment: string | null;
  /**
   * The reason that the alert was dismissed.
   */
  dismissed_reason: ('fix_started' | 'inaccurate' | 'no_bandwidth' | 'not_used' | 'tolerable_risk') | null;
  fixed_at: alert_fixed_at;
  html_url: alert_html_url;
  number: alert_number;
  security_advisory: dependabot_alert_security_advisory;
  security_vulnerability: dependabot_alert_security_vulnerability;
  /**
   * The state of the Dependabot alert.
   */
  readonly state: 'dismissed' | 'fixed' | 'open';
  updated_at: alert_updated_at;
  url: alert_url;
};

/**
 * The execution scope of the vulnerable dependency.
 */
export type scope = 'development' | 'runtime';

/**
 * The reason that the alert was dismissed.
 */
export type dismissed_reason = 'fix_started' | 'inaccurate' | 'no_bandwidth' | 'not_used' | 'tolerable_risk';

/**
 * The state of the Dependabot alert.
 */
export type state2 = 'dismissed' | 'fixed' | 'open';

/**
 * Details for the vulnerable package.
 */
export type dependabot_alert_package = {
  /**
   * The package's language or package management ecosystem.
   */
  readonly ecosystem: string;
  /**
   * The unique package name within its ecosystem.
   */
  readonly name: string;
};

/**
 * Details for the GitHub Security Advisory.
 */
export type dependabot_alert_security_advisory = {
  /**
   * The unique CVE ID assigned to the advisory.
   */
  readonly cve_id: string | null;
  /**
   * Details for the advisory pertaining to the Common Vulnerability Scoring System.
   */
  readonly cvss: {
    /**
     * The overall CVSS score of the advisory.
     */
    readonly score: number;
    /**
     * The full CVSS vector string for the advisory.
     */
    readonly vector_string: string | null;
  };
  /**
   * Details for the advisory pertaining to Common Weakness Enumeration.
   */
  readonly cwes: Array<{
    /**
     * The unique CWE ID.
     */
    readonly cwe_id: string;
    /**
     * The short, plain text name of the CWE.
     */
    readonly name: string;
  }>;
  /**
   * A long-form Markdown-supported description of the advisory.
   */
  readonly description: string;
  /**
   * The unique GitHub Security Advisory ID assigned to the advisory.
   */
  readonly ghsa_id: string;
  /**
   * Values that identify this advisory among security information sources.
   */
  readonly identifiers: Array<{
    /**
     * The type of advisory identifier.
     */
    readonly type: 'CVE' | 'GHSA';
    /**
     * The value of the advisory identifier.
     */
    readonly value: string;
  }>;
  /**
   * The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  readonly published_at: string;
  /**
   * Links to additional advisory information.
   */
  readonly references: Array<{
    /**
     * The URL of the reference.
     */
    readonly url: string;
  }>;
  /**
   * The severity of the advisory.
   */
  readonly severity: 'low' | 'medium' | 'high' | 'critical';
  /**
   * A short, plain text summary of the advisory.
   */
  readonly summary: string;
  /**
   * The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  readonly updated_at: string;
  /**
   * Vulnerable version range information for the advisory.
   */
  readonly vulnerabilities: Array<dependabot_alert_security_vulnerability>;
  /**
   * The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  readonly withdrawn_at: string | null;
};

/**
 * The severity of the advisory.
 */
export type severity2 = 'low' | 'medium' | 'high' | 'critical';

/**
 * Details pertaining to one vulnerable version range for the advisory.
 */
export type dependabot_alert_security_vulnerability = {
  /**
   * Details pertaining to the package version that patches this vulnerability.
   */
  readonly first_patched_version: {
    /**
     * The package version that patches this vulnerability.
     */
    readonly identifier: string;
  } | null;
  package: dependabot_alert_package;
  /**
   * The severity of the vulnerability.
   */
  readonly severity: 'low' | 'medium' | 'high' | 'critical';
  /**
   * Conditions that identify vulnerable versions of this vulnerability's package.
   */
  readonly vulnerable_version_range: string;
};

/**
 * A Dependabot alert.
 */
export type dependabot_alert_with_repository = {
  created_at: alert_created_at;
  /**
   * Details for the vulnerable dependency.
   */
  readonly dependency: {
    /**
     * The full path to the dependency manifest file, relative to the root of the repository.
     */
    readonly manifest_path?: string;
    package?: dependabot_alert_package;
    /**
     * The execution scope of the vulnerable dependency.
     */
    readonly scope?: ('development' | 'runtime') | null;
  };
  dismissed_at: alert_dismissed_at;
  dismissed_by: nullable_simple_user;
  /**
   * An optional comment associated with the alert's dismissal.
   */
  dismissed_comment: string | null;
  /**
   * The reason that the alert was dismissed.
   */
  dismissed_reason: ('fix_started' | 'inaccurate' | 'no_bandwidth' | 'not_used' | 'tolerable_risk') | null;
  fixed_at: alert_fixed_at;
  html_url: alert_html_url;
  number: alert_number;
  repository: simple_repository;
  security_advisory: dependabot_alert_security_advisory;
  security_vulnerability: dependabot_alert_security_vulnerability;
  /**
   * The state of the Dependabot alert.
   */
  readonly state: 'dismissed' | 'fixed' | 'open';
  updated_at: alert_updated_at;
  url: alert_url;
};

/**
 * The public key used for setting Dependabot Secrets.
 */
export type dependabot_public_key = {
  /**
   * The Base64 encoded public key.
   */
  key: string;
  /**
   * The identifier for the key.
   */
  key_id: string;
};

/**
 * Set secrets for Dependabot.
 */
export type dependabot_secret = {
  created_at: string;
  /**
   * The name of the secret.
   */
  name: string;
  updated_at: string;
};

export type dependency = {
  /**
   * Array of package-url (PURLs) of direct child dependencies.
   */
  dependencies?: Array<string>;
  metadata?: metadata;
  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   */
  package_url?: string;
  /**
   * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
   */
  relationship?: 'direct' | 'indirect';
  /**
   * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
   */
  scope?: 'runtime' | 'development';
};

/**
 * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
 */
export type relationship = 'direct' | 'indirect';

/**
 * A diff of the dependencies between two commits.
 */
export type dependency_graph_diff = Array<{
  change_type: 'added' | 'removed';
  ecosystem: string;
  license: string | null;
  manifest: string;
  name: string;
  package_url: string | null;
  /**
   * Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
   */
  scope: 'string' | 'runtime' | 'development';
  source_repository_url: string | null;
  version: string;
  vulnerabilities: Array<{
    advisory_ghsa_id: string;
    advisory_summary: string;
    advisory_url: string;
    severity: string;
  }>;
}>;

/**
 * An SSH key granting access to a single repository.
 */
export type deploy_key = {
  added_by?: string | null;
  created_at: string;
  id: number;
  key: string;
  last_used?: string | null;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
};

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export type deployment = {
  created_at: string;
  creator: nullable_simple_user;
  description: string | null;
  /**
   * Name for the target deployment environment.
   */
  environment: string;
  /**
   * Unique identifier of the deployment
   */
  id: number;
  node_id: string;
  original_environment?: string;
  payload:
    | {
        [key: string]: string;
      }
    | string;
  performed_via_github_app?: nullable_integration;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment?: boolean;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   */
  ref: string;
  repository_url: string;
  sha: string;
  statuses_url: string;
  /**
   * Parameter to specify a task to execute
   */
  task: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   */
  transient_environment?: boolean;
  updated_at: string;
  url: string;
};

/**
 * Details of a deployment branch policy.
 */
export type deployment_branch_policy = {
  /**
   * The unique identifier of the branch policy.
   */
  id?: number;
  /**
   * The name pattern that branches must match in order to deploy to the environment.
   */
  name?: string;
  node_id?: string;
};

export type deployment_branch_policy_name_pattern = {
  /**
   * The name pattern that branches must match in order to deploy to the environment.
   *
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release**`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   */
  name: string;
};

/**
 * The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
 */
export type deployment_branch_policy_settings = {
  /**
   * Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
   */
  custom_branch_policies: boolean;
  /**
   * Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
   */
  protected_branches: boolean;
} | null;

/**
 * The type of reviewer.
 */
export type deployment_reviewer_type = 'User' | 'Team';

/**
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export type deployment_simple = {
  created_at: string;
  description: string | null;
  /**
   * Name for the target deployment environment.
   */
  environment: string;
  /**
   * Unique identifier of the deployment
   */
  id: number;
  node_id: string;
  original_environment?: string;
  performed_via_github_app?: nullable_integration;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment?: boolean;
  repository_url: string;
  statuses_url: string;
  /**
   * Parameter to specify a task to execute
   */
  task: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   */
  transient_environment?: boolean;
  updated_at: string;
  url: string;
};

/**
 * The status of a deployment.
 */
export type deployment_status = {
  created_at: string;
  creator: nullable_simple_user;
  deployment_url: string;
  /**
   * A short description of the status.
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   */
  environment?: string;
  /**
   * The URL for accessing your environment.
   */
  environment_url?: string;
  id: number;
  /**
   * The URL to associate with this status.
   */
  log_url?: string;
  node_id: string;
  performed_via_github_app?: nullable_integration;
  repository_url: string;
  /**
   * The state of the status.
   */
  state: 'error' | 'failure' | 'inactive' | 'pending' | 'success' | 'queued' | 'in_progress';
  /**
   * Deprecated: the URL to associate with this status.
   */
  target_url: string;
  updated_at: string;
  url: string;
};

/**
 * The state of the status.
 */
export type state3 = 'error' | 'failure' | 'inactive' | 'pending' | 'success' | 'queued' | 'in_progress';

/**
 * Diff Entry
 */
export type diff_entry = {
  additions: number;
  blob_url: string;
  changes: number;
  contents_url: string;
  deletions: number;
  filename: string;
  patch?: string;
  previous_filename?: string;
  raw_url: string;
  sha: string;
  status: 'added' | 'removed' | 'modified' | 'renamed' | 'copied' | 'changed' | 'unchanged';
};

export type status4 = 'added' | 'removed' | 'modified' | 'renamed' | 'copied' | 'changed' | 'unchanged';

/**
 * A Discussion in a repository.
 */
export type discussion = {
  active_lock_reason: string | null;
  answer_chosen_at: string | null;
  answer_chosen_by: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  answer_html_url: string | null;
  /**
   * How the author is associated with the repository.
   */
  author_association:
    | 'COLLABORATOR'
    | 'CONTRIBUTOR'
    | 'FIRST_TIMER'
    | 'FIRST_TIME_CONTRIBUTOR'
    | 'MANNEQUIN'
    | 'MEMBER'
    | 'NONE'
    | 'OWNER';
  body: string;
  category: {
    created_at: string;
    description: string;
    emoji: string;
    id: number;
    is_answerable: boolean;
    name: string;
    node_id?: string;
    repository_id: number;
    slug: string;
    updated_at: string;
  };
  comments: number;
  created_at: string;
  html_url: string;
  id: number;
  locked: boolean;
  node_id: string;
  number: number;
  reactions?: {
    '+1': number;
    '-1': number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    url: string;
  };
  repository_url: string;
  /**
   * The current state of the discussion.
   * `converting` means that the discussion is being converted from an issue.
   * `transferring` means that the discussion is being transferred from another repository.
   */
  state: 'open' | 'locked' | 'converting' | 'transferring';
  timeline_url?: string;
  title: string;
  updated_at: string;
  user: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
};

export type type4 = 'Bot' | 'User' | 'Organization';

/**
 * How the author is associated with the repository.
 */
export type author_association2 =
  | 'COLLABORATOR'
  | 'CONTRIBUTOR'
  | 'FIRST_TIMER'
  | 'FIRST_TIME_CONTRIBUTOR'
  | 'MANNEQUIN'
  | 'MEMBER'
  | 'NONE'
  | 'OWNER';

/**
 * The current state of the discussion.
 * `converting` means that the discussion is being converted from an issue.
 * `transferring` means that the discussion is being transferred from another repository.
 */
export type state4 = 'open' | 'locked' | 'converting' | 'transferring';

/**
 * Email
 */
export type email = {
  email: string;
  primary: boolean;
  verified: boolean;
  visibility: string | null;
};

/**
 * An object without any properties.
 */
export type empty_object = {
  [key: string]: string;
};

/**
 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
 */
export type enabled_repositories = 'all' | 'none' | 'selected';

/**
 * An enterprise on GitHub.
 */
export type enterprise = {
  avatar_url: string;
  created_at: string | null;
  /**
   * A short description of the enterprise.
   */
  description?: string | null;
  html_url: string;
  /**
   * Unique identifier of the enterprise
   */
  id: number;
  /**
   * The name of the enterprise.
   */
  name: string;
  node_id: string;
  /**
   * The slug url identifier for the enterprise.
   */
  slug: string;
  updated_at: string | null;
  /**
   * The enterprise's website URL.
   */
  website_url?: string | null;
};

/**
 * Details of a deployment environment
 */
export type environment = {
  /**
   * The time that the environment was created, in ISO 8601 format.
   */
  created_at: string;
  deployment_branch_policy?: deployment_branch_policy_settings;
  html_url: string;
  /**
   * The id of the environment.
   */
  id: number;
  /**
   * The name of the environment.
   */
  name: string;
  node_id: string;
  protection_rules?: Array<
    | {
        id: number;
        node_id: string;
        type: string;
        wait_timer?: wait_timer;
      }
    | {
        id: number;
        node_id: string;
        /**
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: Array<{
          reviewer?: simple_user | team;
          type?: deployment_reviewer_type;
        }>;
        type: string;
      }
    | {
        id: number;
        node_id: string;
        type: string;
      }
  >;
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   */
  updated_at: string;
  url: string;
};

/**
 * An entry in the reviews log for environment deployments
 */
export type environment_approvals = {
  /**
   * The comment submitted with the deployment review
   */
  comment: string;
  /**
   * The list of environments that were approved or rejected
   */
  environments: Array<{
    /**
     * The time that the environment was created, in ISO 8601 format.
     */
    created_at?: string;
    html_url?: string;
    /**
     * The id of the environment.
     */
    id?: number;
    /**
     * The name of the environment.
     */
    name?: string;
    node_id?: string;
    /**
     * The time that the environment was last updated, in ISO 8601 format.
     */
    updated_at?: string;
    url?: string;
  }>;
  /**
   * Whether deployment to the environment(s) was approved or rejected or pending (with comments)
   */
  state: 'approved' | 'rejected' | 'pending';
  user: simple_user;
};

/**
 * Whether deployment to the environment(s) was approved or rejected or pending (with comments)
 */
export type state5 = 'approved' | 'rejected' | 'pending';

/**
 * Event
 */
export type event = {
  actor: actor;
  created_at: string | null;
  id: string;
  org?: actor;
  payload: {
    action?: string;
    comment?: issue_comment;
    issue?: issue;
    pages?: Array<{
      action?: string;
      html_url?: string;
      page_name?: string;
      sha?: string;
      summary?: string | null;
      title?: string;
    }>;
  };
  public: boolean;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  type: string | null;
};

/**
 * Feed
 */
export type feed = {
  _links: {
    current_user?: link_with_type;
    current_user_actor?: link_with_type;
    current_user_organization?: link_with_type;
    current_user_organizations?: Array<link_with_type>;
    current_user_public?: link_with_type;
    repository_discussions?: link_with_type;
    repository_discussions_category?: link_with_type;
    security_advisories?: link_with_type;
    timeline: link_with_type;
    user: link_with_type;
  };
  current_user_actor_url?: string;
  current_user_organization_url?: string;
  current_user_organization_urls?: Array<string>;
  current_user_public_url?: string;
  current_user_url?: string;
  /**
   * A feed of discussions for a given repository and category.
   */
  repository_discussions_category_url?: string;
  /**
   * A feed of discussions for a given repository.
   */
  repository_discussions_url?: string;
  security_advisories_url?: string;
  timeline_url: string;
  user_url: string;
};

/**
 * File Commit
 */
export type file_commit = {
  commit: {
    author?: {
      date?: string;
      email?: string;
      name?: string;
    };
    committer?: {
      date?: string;
      email?: string;
      name?: string;
    };
    html_url?: string;
    message?: string;
    node_id?: string;
    parents?: Array<{
      html_url?: string;
      sha?: string;
      url?: string;
    }>;
    sha?: string;
    tree?: {
      sha?: string;
      url?: string;
    };
    url?: string;
    verification?: {
      payload?: string | null;
      reason?: string;
      signature?: string | null;
      verified?: boolean;
    };
  };
  content: {
    _links?: {
      git?: string;
      html?: string;
      self?: string;
    };
    download_url?: string;
    git_url?: string;
    html_url?: string;
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    type?: string;
    url?: string;
  } | null;
};

/**
 * Full Repository
 */
export type full_repository = {
  allow_auto_merge?: boolean;
  allow_forking?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  allow_update_branch?: boolean;
  /**
   * Whether anonymous git access is allowed.
   */
  anonymous_access_enabled?: boolean;
  archive_url: string;
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  code_of_conduct?: code_of_conduct_simple;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at: string;
  default_branch: string;
  delete_branch_on_merge?: boolean;
  deployments_url: string;
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  has_discussions: boolean;
  has_downloads: boolean;
  has_issues: boolean;
  has_pages: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  homepage: string | null;
  hooks_url: string;
  html_url: string;
  id: number;
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  languages_url: string;
  license: nullable_license_simple;
  master_branch?: string;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
  merges_url: string;
  milestones_url: string;
  mirror_url: string | null;
  name: string;
  network_count: number;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  organization?: nullable_simple_user;
  owner: simple_user;
  parent?: repository;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  private: boolean;
  pulls_url: string;
  pushed_at: string;
  releases_url: string;
  security_and_analysis?: security_and_analysis;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size: number;
  source?: repository;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
  ssh_url: string;
  stargazers_count: number;
  stargazers_url: string;
  statuses_url: string;
  subscribers_count: number;
  subscribers_url: string;
  subscription_url: string;
  svn_url: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string | null;
  template_repository?: nullable_repository;
  topics?: Array<string>;
  trees_url: string;
  updated_at: string;
  url: string;
  use_squash_pr_title_as_default?: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  watchers: number;
  watchers_count: number;
  web_commit_signoff_required?: boolean;
};

/**
 * The default value for a merge commit message.
 *
 * - `PR_TITLE` - default to the pull request's title.
 * - `PR_BODY` - default to the pull request's body.
 * - `BLANK` - default to a blank commit message.
 */
export type merge_commit_message = 'PR_BODY' | 'PR_TITLE' | 'BLANK';

/**
 * The default value for a merge commit title.
 *
 * - `PR_TITLE` - default to the pull request's title.
 * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 */
export type merge_commit_title = 'PR_TITLE' | 'MERGE_MESSAGE';

/**
 * The default value for a squash merge commit message:
 *
 * - `PR_BODY` - default to the pull request's body.
 * - `COMMIT_MESSAGES` - default to the branch's commit messages.
 * - `BLANK` - default to a blank commit message.
 */
export type squash_merge_commit_message = 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';

/**
 * The default value for a squash merge commit title:
 *
 * - `PR_TITLE` - default to the pull request's title.
 * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 */
export type squash_merge_commit_title = 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';

/**
 * A comment made to a gist.
 */
export type gist_comment = {
  author_association: author_association;
  /**
   * The comment text.
   */
  body: string;
  created_at: string;
  id: number;
  node_id: string;
  updated_at: string;
  url: string;
  user: nullable_simple_user;
};

/**
 * Gist Commit
 */
export type gist_commit = {
  change_status: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  committed_at: string;
  url: string;
  user: nullable_simple_user;
  version: string;
};

/**
 * Gist History
 */
export type gist_history = {
  change_status?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  committed_at?: string;
  url?: string;
  user?: nullable_simple_user;
  version?: string;
};

/**
 * Gist Simple
 */
export type gist_simple = {
  comments?: number;
  comments_url?: string;
  commits_url?: string;
  created_at?: string;
  description?: string | null;
  files?: {
    [key: string]: {
      content?: string;
      filename?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      type?: string;
    } | null;
  };
  /**
   * Gist
   */
  fork_of?: {
    comments: number;
    comments_url: string;
    commits_url: string;
    created_at: string;
    description: string | null;
    files: {
      [key: string]: {
        filename?: string;
        language?: string;
        raw_url?: string;
        size?: number;
        type?: string;
      };
    };
    forks?: Array<string>;
    forks_url: string;
    git_pull_url: string;
    git_push_url: string;
    history?: Array<string>;
    html_url: string;
    id: string;
    node_id: string;
    owner?: nullable_simple_user;
    public: boolean;
    truncated?: boolean;
    updated_at: string;
    url: string;
    user: nullable_simple_user;
  } | null;
  /**
   * @deprecated
   */
  forks?: Array<{
    created_at?: string;
    id?: string;
    updated_at?: string;
    url?: string;
    user?: public_user;
  }> | null;
  forks_url?: string;
  git_pull_url?: string;
  git_push_url?: string;
  /**
   * @deprecated
   */
  history?: Array<gist_history> | null;
  html_url?: string;
  id?: string;
  node_id?: string;
  owner?: simple_user;
  public?: boolean;
  truncated?: boolean;
  updated_at?: string;
  url?: string;
  user?: string | null;
};

/**
 * Low-level Git commit operations within a repository
 */
export type git_commit = {
  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     */
    date: string;
    /**
     * Git email address of the user
     */
    email: string;
    /**
     * Name of the git user
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     */
    date: string;
    /**
     * Git email address of the user
     */
    email: string;
    /**
     * Name of the git user
     */
    name: string;
  };
  html_url: string;
  /**
   * Message describing the purpose of the commit
   */
  message: string;
  node_id: string;
  parents: Array<{
    html_url: string;
    /**
     * SHA for the commit
     */
    sha: string;
    url: string;
  }>;
  /**
   * SHA for the commit
   */
  sha: string;
  tree: {
    /**
     * SHA for the commit
     */
    sha: string;
    url: string;
  };
  url: string;
  verification: {
    payload: string | null;
    reason: string;
    signature: string | null;
    verified: boolean;
  };
};

/**
 * Git references within a repository
 */
export type git_ref = {
  node_id: string;
  object: {
    /**
     * SHA for the reference
     */
    sha: string;
    type: string;
    url: string;
  };
  ref: string;
  url: string;
};

/**
 * Metadata for a Git tag
 */
export type git_tag = {
  /**
   * Message describing the purpose of the tag
   */
  message: string;
  node_id: string;
  object: {
    sha: string;
    type: string;
    url: string;
  };
  sha: string;
  /**
   * Name of the tag
   */
  tag: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  /**
   * URL for the tag
   */
  url: string;
  verification?: verification;
};

/**
 * The hierarchy between files in a Git repository.
 */
export type git_tree = {
  sha: string;
  /**
   * Objects specifying a tree structure
   */
  tree: Array<{
    mode?: string;
    path?: string;
    sha?: string;
    size?: number;
    type?: string;
    url?: string;
  }>;
  truncated: boolean;
  url: string;
};

/**
 * Gitignore Template
 */
export type gitignore_template = {
  name: string;
  source: string;
};

/**
 * A unique encryption key
 */
export type gpg_key = {
  can_certify: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  can_sign: boolean;
  created_at: string;
  emails: Array<{
    email?: string;
    verified?: boolean;
  }>;
  expires_at: string | null;
  id: number;
  key_id: string;
  name?: string | null;
  primary_key_id: number | null;
  public_key: string;
  raw_key: string | null;
  revoked: boolean;
  subkeys: Array<{
    can_certify?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_sign?: boolean;
    created_at?: string;
    emails?: Array<string>;
    expires_at?: string | null;
    id?: number;
    key_id?: string;
    primary_key_id?: number;
    public_key?: string;
    raw_key?: string | null;
    revoked?: boolean;
    subkeys?: Array<string>;
  }>;
};

/**
 * Webhooks for repositories.
 */
export type hook = {
  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  active: boolean;
  config: {
    content_type?: webhook_config_content_type;
    digest?: string;
    email?: string;
    insecure_ssl?: webhook_config_insecure_ssl;
    password?: string;
    room?: string;
    secret?: webhook_config_secret;
    subdomain?: string;
    token?: string;
    url?: webhook_config_url;
  };
  created_at: string;
  deliveries_url?: string;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   */
  events: Array<string>;
  /**
   * Unique identifier of the webhook.
   */
  id: number;
  last_response: hook_response;
  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  name: string;
  ping_url: string;
  test_url: string;
  type: string;
  updated_at: string;
  url: string;
};

/**
 * Delivery made by a webhook.
 */
export type hook_delivery = {
  /**
   * The type of activity for the event that triggered the delivery.
   */
  action: string | null;
  /**
   * Time when the delivery was delivered.
   */
  delivered_at: string;
  /**
   * Time spent delivering.
   */
  duration: number;
  /**
   * The event that triggered the delivery.
   */
  event: string;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   */
  guid: string;
  /**
   * Unique identifier of the delivery.
   */
  id: number;
  /**
   * The id of the GitHub App installation associated with this event.
   */
  installation_id: number | null;
  /**
   * Whether the delivery is a redelivery.
   */
  redelivery: boolean;
  /**
   * The id of the repository associated with this event.
   */
  repository_id: number | null;
  request: {
    /**
     * The request headers sent with the webhook delivery.
     */
    headers: {
      [key: string]: string;
    } | null;
    /**
     * The webhook payload.
     */
    payload: {
      [key: string]: string;
    } | null;
  };
  response: {
    /**
     * The response headers received when the delivery was made.
     */
    headers: {
      [key: string]: string;
    } | null;
    /**
     * The response payload received.
     */
    payload: {
      [key: string]: string;
    } | null;
  };
  /**
   * Description of the status of the attempted delivery
   */
  status: string;
  /**
   * Status code received when delivery was made.
   */
  status_code: number;
  /**
   * The URL target of the delivery.
   */
  url?: string;
};

/**
 * Delivery made by a webhook, without request and response information.
 */
export type hook_delivery_item = {
  /**
   * The type of activity for the event that triggered the delivery.
   */
  action: string | null;
  /**
   * Time when the webhook delivery occurred.
   */
  delivered_at: string;
  /**
   * Time spent delivering.
   */
  duration: number;
  /**
   * The event that triggered the delivery.
   */
  event: string;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   */
  guid: string;
  /**
   * Unique identifier of the webhook delivery.
   */
  id: number;
  /**
   * The id of the GitHub App installation associated with this event.
   */
  installation_id: number | null;
  /**
   * Whether the webhook delivery is a redelivery.
   */
  redelivery: boolean;
  /**
   * The id of the repository associated with this event.
   */
  repository_id: number | null;
  /**
   * Describes the response returned after attempting the delivery.
   */
  status: string;
  /**
   * Status code received when delivery was made.
   */
  status_code: number;
};

export type hook_response = {
  code: number | null;
  message: string | null;
  status: string | null;
};

/**
 * Hovercard
 */
export type hovercard = {
  contexts: Array<{
    message: string;
    octicon: string;
  }>;
};

/**
 * A repository import from an external source.
 */
export type _import = {
  authors_count?: number | null;
  authors_url: string;
  commit_count?: number | null;
  error_message?: string | null;
  failed_step?: string | null;
  has_large_files?: boolean;
  html_url: string;
  import_percent?: number | null;
  large_files_count?: number;
  large_files_size?: number;
  message?: string;
  project_choices?: Array<{
    human_name?: string;
    tfvc_project?: string;
    vcs?: string;
  }>;
  push_percent?: number | null;
  repository_url: string;
  status:
    | 'auth'
    | 'error'
    | 'none'
    | 'detecting'
    | 'choose'
    | 'auth_failed'
    | 'importing'
    | 'mapping'
    | 'waiting_to_push'
    | 'pushing'
    | 'complete'
    | 'setup'
    | 'string'
    | 'detection_found_multiple'
    | 'detection_found_nothing'
    | 'detection_needs_auth';
  status_text?: string | null;
  svc_root?: string;
  svn_root?: string;
  tfvc_project?: string;
  url: string;
  use_lfs?: boolean;
  vcs: string | null;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
};

export type status5 =
  | 'auth'
  | 'error'
  | 'none'
  | 'detecting'
  | 'choose'
  | 'auth_failed'
  | 'importing'
  | 'mapping'
  | 'waiting_to_push'
  | 'pushing'
  | 'complete'
  | 'setup'
  | 'string'
  | 'detection_found_multiple'
  | 'detection_found_nothing'
  | 'detection_needs_auth';

/**
 * Installation
 */
export type installation = {
  access_tokens_url: string;
  account: (simple_user | enterprise) | null;
  app_id: number;
  app_slug: string;
  contact_email?: string | null;
  created_at: string;
  events: Array<string>;
  has_multiple_single_files?: boolean;
  html_url: string;
  /**
   * The ID of the installation.
   */
  id: number;
  permissions: app_permissions;
  repositories_url: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: 'all' | 'selected';
  single_file_name: string | null;
  single_file_paths?: Array<string>;
  suspended_at: string | null;
  suspended_by: nullable_simple_user;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  target_type: string;
  updated_at: string;
};

/**
 * Authentication token for a GitHub App installed on a user or org.
 */
export type installation_token = {
  expires_at: string;
  has_multiple_single_files?: boolean;
  permissions?: app_permissions;
  repositories?: Array<repository>;
  repository_selection?: 'all' | 'selected';
  single_file?: string;
  single_file_paths?: Array<string>;
  token: string;
};

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type integration = {
  client_id?: string;
  client_secret?: string;
  created_at: string;
  description: string | null;
  /**
   * The list of events for the GitHub app
   */
  events: Array<string>;
  external_url: string;
  html_url: string;
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  /**
   * The name of the GitHub app
   */
  name: string;
  node_id: string;
  owner: nullable_simple_user;
  pem?: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
    [key: string]: string | undefined;
  };
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  updated_at: string;
  webhook_secret?: string | null;
};

/**
 * The duration of the interaction restriction. Default: `one_day`.
 */
export type interaction_expiry = 'one_day' | 'three_days' | 'one_week' | 'one_month' | 'six_months';

/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
 */
export type interaction_group = 'existing_users' | 'contributors_only' | 'collaborators_only';

/**
 * Limit interactions to a specific type of user for a specified duration
 */
export type interaction_limit = {
  expiry?: interaction_expiry;
  limit: interaction_group;
};

/**
 * Interaction limit settings.
 */
export type interaction_limit_response = {
  expires_at: string;
  limit: interaction_group;
  origin: string;
};

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type issue = {
  active_lock_reason?: string | null;
  assignee: nullable_simple_user;
  assignees?: Array<simple_user> | null;
  author_association: author_association;
  /**
   * Contents of the issue
   */
  body?: string | null;
  body_html?: string;
  body_text?: string;
  closed_at: string | null;
  closed_by?: nullable_simple_user;
  comments: number;
  comments_url: string;
  created_at: string;
  draft?: boolean;
  events_url: string;
  html_url: string;
  id: number;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: Array<
    | string
    | {
        color?: string | null;
        default?: boolean;
        description?: string | null;
        id?: number;
        name?: string;
        node_id?: string;
        url?: string;
      }
  >;
  labels_url: string;
  locked: boolean;
  milestone: nullable_milestone;
  node_id: string;
  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  performed_via_github_app?: nullable_integration;
  pull_request?: {
    diff_url: string | null;
    html_url: string | null;
    merged_at?: string | null;
    patch_url: string | null;
    url: string | null;
  };
  reactions?: reaction_rollup;
  repository?: repository;
  repository_url: string;
  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;
  /**
   * The reason for the current state
   */
  state_reason?: ('completed' | 'reopened' | 'not_planned') | null;
  timeline_url?: string;
  /**
   * Title of the issue
   */
  title: string;
  updated_at: string;
  /**
   * URL for the issue
   */
  url: string;
  user: nullable_simple_user;
};

/**
 * The reason for the current state
 */
export type state_reason = 'completed' | 'reopened' | 'not_planned';

/**
 * Comments provide a way for people to collaborate on an issue.
 */
export type issue_comment = {
  author_association: author_association;
  /**
   * Contents of the issue comment
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  created_at: string;
  html_url: string;
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  issue_url: string;
  node_id: string;
  performed_via_github_app?: nullable_integration;
  reactions?: reaction_rollup;
  updated_at: string;
  /**
   * URL for the issue comment
   */
  url: string;
  user: nullable_simple_user;
};

/**
 * Issue Event
 */
export type issue_event = {
  actor: nullable_simple_user;
  assignee?: nullable_simple_user;
  assigner?: nullable_simple_user;
  author_association?: author_association;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  dismissed_review?: issue_event_dismissed_review;
  event: string;
  id: number;
  issue?: nullable_issue;
  label?: issue_event_label;
  lock_reason?: string | null;
  milestone?: issue_event_milestone;
  node_id: string;
  performed_via_github_app?: nullable_integration;
  project_card?: issue_event_project_card;
  rename?: issue_event_rename;
  requested_reviewer?: nullable_simple_user;
  requested_team?: team;
  review_requester?: nullable_simple_user;
  url: string;
};

export type issue_event_dismissed_review = {
  dismissal_commit_id?: string | null;
  dismissal_message: string | null;
  review_id: number;
  state: string;
};

/**
 * Issue Event for Issue
 */
export type issue_event_for_issue =
  | labeled_issue_event
  | unlabeled_issue_event
  | assigned_issue_event
  | unassigned_issue_event
  | milestoned_issue_event
  | demilestoned_issue_event
  | renamed_issue_event
  | review_requested_issue_event
  | review_request_removed_issue_event
  | review_dismissed_issue_event
  | locked_issue_event
  | added_to_project_issue_event
  | moved_column_in_project_issue_event
  | removed_from_project_issue_event
  | converted_note_to_issue_issue_event;

/**
 * Issue Event Label
 */
export type issue_event_label = {
  color: string | null;
  name: string | null;
};

/**
 * Issue Event Milestone
 */
export type issue_event_milestone = {
  title: string;
};

/**
 * Issue Event Project Card
 */
export type issue_event_project_card = {
  column_name: string;
  id: number;
  previous_column_name?: string;
  project_id: number;
  project_url: string;
  url: string;
};

/**
 * Issue Event Rename
 */
export type issue_event_rename = {
  from: string;
  to: string;
};

/**
 * Issue Search Result Item
 */
export type issue_search_result_item = {
  active_lock_reason?: string | null;
  assignee: nullable_simple_user;
  assignees?: Array<simple_user> | null;
  author_association: author_association;
  body?: string;
  body_html?: string;
  body_text?: string;
  closed_at: string | null;
  comments: number;
  comments_url: string;
  created_at: string;
  draft?: boolean;
  events_url: string;
  html_url: string;
  id: number;
  labels: Array<{
    color?: string;
    default?: boolean;
    description?: string | null;
    id?: number;
    name?: string;
    node_id?: string;
    url?: string;
  }>;
  labels_url: string;
  locked: boolean;
  milestone: nullable_milestone;
  node_id: string;
  number: number;
  performed_via_github_app?: nullable_integration;
  pull_request?: {
    diff_url: string | null;
    html_url: string | null;
    merged_at?: string | null;
    patch_url: string | null;
    url: string | null;
  };
  reactions?: reaction_rollup;
  repository?: repository;
  repository_url: string;
  score: number;
  state: string;
  state_reason?: string | null;
  text_matches?: search_result_text_matches;
  timeline_url?: string;
  title: string;
  updated_at: string;
  url: string;
  user: nullable_simple_user;
};

/**
 * Information of a job execution in a workflow run
 */
export type job = {
  check_run_url: string;
  /**
   * The time that the job finished, in ISO 8601 format.
   */
  completed_at: string | null;
  /**
   * The outcome of the job.
   */
  conclusion: ('success' | 'failure' | 'neutral' | 'cancelled' | 'skipped' | 'timed_out' | 'action_required') | null;
  /**
   * The name of the current branch.
   */
  head_branch: string | null;
  /**
   * The SHA of the commit that is being run.
   */
  head_sha: string;
  html_url: string | null;
  /**
   * The id of the job.
   */
  id: number;
  /**
   * Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
   */
  labels: Array<string>;
  /**
   * The name of the job.
   */
  name: string;
  node_id: string;
  /**
   * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   */
  run_attempt?: number;
  /**
   * The id of the associated workflow run.
   */
  run_id: number;
  run_url: string;
  /**
   * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_group_id: number | null;
  /**
   * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_group_name: string | null;
  /**
   * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_id: number | null;
  /**
   * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   */
  runner_name: string | null;
  /**
   * The time that the job started, in ISO 8601 format.
   */
  started_at: string;
  /**
   * The phase of the lifecycle that the job is currently in.
   */
  status: 'queued' | 'in_progress' | 'completed';
  /**
   * Steps in this job.
   */
  steps?: Array<{
    /**
     * The time that the job finished, in ISO 8601 format.
     */
    completed_at?: string | null;
    /**
     * The outcome of the job.
     */
    conclusion: string | null;
    /**
     * The name of the job.
     */
    name: string;
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     */
    started_at?: string | null;
    /**
     * The phase of the lifecycle that the job is currently in.
     */
    status: 'queued' | 'in_progress' | 'completed';
  }>;
  url: string;
  /**
   * The name of the workflow.
   */
  workflow_name: string | null;
};

/**
 * Key
 */
export type key = {
  created_at: string;
  id: number;
  key: string;
  read_only: boolean;
  title: string;
  url: string;
  verified: boolean;
};

/**
 * Key Simple
 */
export type key_simple = {
  id: number;
  key: string;
};

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export type label = {
  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color: string;
  default: boolean;
  description: string | null;
  id: number;
  /**
   * The name of the label.
   */
  name: string;
  node_id: string;
  /**
   * URL for the label
   */
  url: string;
};

/**
 * Label Search Result Item
 */
export type label_search_result_item = {
  color: string;
  default: boolean;
  description: string | null;
  id: number;
  name: string;
  node_id: string;
  score: number;
  text_matches?: search_result_text_matches;
  url: string;
};

/**
 * Labeled Issue Event
 */
export type labeled_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  label: {
    color: string;
    name: string;
  };
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

/**
 * Language
 */
export type language = {
  [key: string]: number;
};

/**
 * License
 */
export type license = {
  body: string;
  conditions: Array<string>;
  description: string;
  featured: boolean;
  html_url: string;
  implementation: string;
  key: string;
  limitations: Array<string>;
  name: string;
  node_id: string;
  permissions: Array<string>;
  spdx_id: string | null;
  url: string | null;
};

/**
 * License Content
 */
export type license_content = {
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  content: string;
  download_url: string | null;
  encoding: string;
  git_url: string | null;
  html_url: string | null;
  license: nullable_license_simple;
  name: string;
  path: string;
  sha: string;
  size: number;
  type: string;
  url: string;
};

/**
 * License Simple
 */
export type license_simple = {
  html_url?: string;
  key: string;
  name: string;
  node_id: string;
  spdx_id: string | null;
  url: string | null;
};

/**
 * Hypermedia Link
 */
export type link = {
  href: string;
};

/**
 * Hypermedia Link with Type
 */
export type link_with_type = {
  href: string;
  type: string;
};

/**
 * Locked Issue Event
 */
export type locked_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  lock_reason: string | null;
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

export type manifest = {
  file?: {
    /**
     * The path of the manifest file relative to the root of the Git repository.
     */
    source_location?: string;
  };
  metadata?: metadata;
  /**
   * The name of the manifest.
   */
  name: string;
  /**
   * A collection of resolved package dependencies.
   */
  resolved?: {
    [key: string]: dependency;
  };
};

export type marketplace_account = {
  email?: string | null;
  id: number;
  login: string;
  node_id?: string;
  organization_billing_email?: string | null;
  type: string;
  url: string;
};

/**
 * Marketplace Listing Plan
 */
export type marketplace_listing_plan = {
  accounts_url: string;
  bullets: Array<string>;
  description: string;
  has_free_trial: boolean;
  id: number;
  monthly_price_in_cents: number;
  name: string;
  number: number;
  price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
  state: string;
  unit_name: string | null;
  url: string;
  yearly_price_in_cents: number;
};

export type price_model = 'FREE' | 'FLAT_RATE' | 'PER_UNIT';

/**
 * Marketplace Purchase
 */
export type marketplace_purchase = {
  email?: string | null;
  id: number;
  login: string;
  marketplace_pending_change?: {
    effective_date?: string;
    id?: number;
    is_installed?: boolean;
    plan?: marketplace_listing_plan;
    unit_count?: number | null;
  } | null;
  marketplace_purchase: {
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    is_installed?: boolean;
    next_billing_date?: string | null;
    on_free_trial?: boolean;
    plan?: marketplace_listing_plan;
    unit_count?: number | null;
    updated_at?: string;
  };
  organization_billing_email?: string;
  type: string;
  url: string;
};

/**
 * Results of a successful merge upstream request
 */
export type merged_upstream = {
  base_branch?: string;
  merge_type?: 'merge' | 'fast-forward' | 'none';
  message?: string;
};

export type merge_type = 'merge' | 'fast-forward' | 'none';

/**
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
export type metadata2 = {
  [key: string]: (string | number | boolean) | null;
};

/**
 * A migration.
 */
export type migration = {
  archive_url?: string;
  created_at: string;
  exclude?: Array<string>;
  exclude_attachments: boolean;
  exclude_git_data: boolean;
  exclude_metadata: boolean;
  exclude_owner_projects: boolean;
  exclude_releases: boolean;
  guid: string;
  id: number;
  lock_repositories: boolean;
  node_id: string;
  org_metadata_only: boolean;
  owner: nullable_simple_user;
  /**
   * The repositories included in the migration. Only returned for export migrations.
   */
  repositories: Array<repository>;
  state: string;
  updated_at: string;
  url: string;
};

/**
 * A collection of related issues and pull requests.
 */
export type milestone = {
  closed_at: string | null;
  closed_issues: number;
  created_at: string;
  creator: nullable_simple_user;
  description: string | null;
  due_on: string | null;
  html_url: string;
  id: number;
  labels_url: string;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  open_issues: number;
  /**
   * The state of the milestone.
   */
  state: 'open' | 'closed';
  /**
   * The title of the milestone.
   */
  title: string;
  updated_at: string;
  url: string;
};

/**
 * The state of the milestone.
 */
export type state6 = 'open' | 'closed';

/**
 * Milestoned Issue Event
 */
export type milestoned_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  milestone: {
    title: string;
  };
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

/**
 * Minimal Repository
 */
export type minimal_repository = {
  allow_forking?: boolean;
  archive_url: string;
  archived?: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url?: string;
  code_of_conduct?: code_of_conduct;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at?: string | null;
  default_branch?: string;
  delete_branch_on_merge?: boolean;
  deployments_url: string;
  description: string | null;
  disabled?: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks?: number;
  forks_count?: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url?: string;
  has_discussions?: boolean;
  has_downloads?: boolean;
  has_issues?: boolean;
  has_pages?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  homepage?: string | null;
  hooks_url: string;
  html_url: string;
  id: number;
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language?: string | null;
  languages_url: string;
  license?: {
    key?: string;
    name?: string;
    node_id?: string;
    spdx_id?: string;
    url?: string;
  } | null;
  merges_url: string;
  milestones_url: string;
  mirror_url?: string | null;
  name: string;
  network_count?: number;
  node_id: string;
  notifications_url: string;
  open_issues?: number;
  open_issues_count?: number;
  owner: simple_user;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    pull?: boolean;
    push?: boolean;
    triage?: boolean;
  };
  private: boolean;
  pulls_url: string;
  pushed_at?: string | null;
  releases_url: string;
  role_name?: string;
  security_and_analysis?: security_and_analysis;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size?: number;
  ssh_url?: string;
  stargazers_count?: number;
  stargazers_url: string;
  statuses_url: string;
  subscribers_count?: number;
  subscribers_url: string;
  subscription_url: string;
  svn_url?: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string;
  topics?: Array<string>;
  trees_url: string;
  updated_at?: string | null;
  url: string;
  visibility?: string;
  watchers?: number;
  watchers_count?: number;
  web_commit_signoff_required?: boolean;
};

/**
 * Moved Column in Project Issue Event
 */
export type moved_column_in_project_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  project_card?: {
    column_name: string;
    id: number;
    previous_column_name?: string;
    project_id: number;
    project_url: string;
    url: string;
  };
  url: string;
};

/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type nullable_alert_updated_at = string | null;

/**
 * Code of Conduct Simple
 */
export type nullable_code_of_conduct_simple = {
  html_url: string | null;
  key: string;
  name: string;
  url: string;
} | null;

/**
 * A description of the machine powering a codespace.
 */
export type nullable_codespace_machine = {
  /**
   * How many cores are available to the codespace.
   */
  cpus: number;
  /**
   * The display name of the machine includes cores, memory, and storage.
   */
  display_name: string;
  /**
   * How much memory is available to the codespace.
   */
  memory_in_bytes: number;
  /**
   * The name of the machine.
   */
  name: string;
  /**
   * The operating system of the machine.
   */
  operating_system: string;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   */
  prebuild_availability: ('none' | 'ready' | 'in_progress') | null;
  /**
   * How much storage is available to the codespace.
   */
  storage_in_bytes: number;
} | null;

/**
 * Collaborator
 */
export type nullable_collaborator = {
  avatar_url: string;
  email?: string | null;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  html_url: string;
  id: number;
  login: string;
  name?: string | null;
  node_id: string;
  organizations_url: string;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  received_events_url: string;
  repos_url: string;
  role_name: string;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
} | null;

export type nullable_community_health_file = {
  html_url: string;
  url: string;
} | null;

/**
 * Metaproperties for Git author/committer information.
 */
export type nullable_git_user = {
  date?: string;
  email?: string;
  name?: string;
} | null;

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type nullable_integration = {
  client_id?: string;
  client_secret?: string;
  created_at: string;
  description: string | null;
  /**
   * The list of events for the GitHub app
   */
  events: Array<string>;
  external_url: string;
  html_url: string;
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  /**
   * The name of the GitHub app
   */
  name: string;
  node_id: string;
  owner: nullable_simple_user;
  pem?: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    checks?: string;
    contents?: string;
    deployments?: string;
    issues?: string;
    metadata?: string;
    [key: string]: string | undefined;
  };
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  updated_at: string;
  webhook_secret?: string | null;
} | null;

/**
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type nullable_issue = {
  active_lock_reason?: string | null;
  assignee: nullable_simple_user;
  assignees?: Array<simple_user> | null;
  author_association: author_association;
  /**
   * Contents of the issue
   */
  body?: string | null;
  body_html?: string;
  body_text?: string;
  closed_at: string | null;
  closed_by?: nullable_simple_user;
  comments: number;
  comments_url: string;
  created_at: string;
  draft?: boolean;
  events_url: string;
  html_url: string;
  id: number;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   */
  labels: Array<
    | string
    | {
        color?: string | null;
        default?: boolean;
        description?: string | null;
        id?: number;
        name?: string;
        node_id?: string;
        url?: string;
      }
  >;
  labels_url: string;
  locked: boolean;
  milestone: nullable_milestone;
  node_id: string;
  /**
   * Number uniquely identifying the issue within its repository
   */
  number: number;
  performed_via_github_app?: nullable_integration;
  pull_request?: {
    diff_url: string | null;
    html_url: string | null;
    merged_at?: string | null;
    patch_url: string | null;
    url: string | null;
  };
  reactions?: reaction_rollup;
  repository?: repository;
  repository_url: string;
  /**
   * State of the issue; either 'open' or 'closed'
   */
  state: string;
  /**
   * The reason for the current state
   */
  state_reason?: ('completed' | 'reopened' | 'not_planned') | null;
  timeline_url?: string;
  /**
   * Title of the issue
   */
  title: string;
  updated_at: string;
  /**
   * URL for the issue
   */
  url: string;
  user: nullable_simple_user;
} | null;

/**
 * License Simple
 */
export type nullable_license_simple = {
  html_url?: string;
  key: string;
  name: string;
  node_id: string;
  spdx_id: string | null;
  url: string | null;
} | null;

/**
 * A collection of related issues and pull requests.
 */
export type nullable_milestone = {
  closed_at: string | null;
  closed_issues: number;
  created_at: string;
  creator: nullable_simple_user;
  description: string | null;
  due_on: string | null;
  html_url: string;
  id: number;
  labels_url: string;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  open_issues: number;
  /**
   * The state of the milestone.
   */
  state: 'open' | 'closed';
  /**
   * The title of the milestone.
   */
  title: string;
  updated_at: string;
  url: string;
} | null;

/**
 * Minimal Repository
 */
export type nullable_minimal_repository = {
  allow_forking?: boolean;
  archive_url: string;
  archived?: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url?: string;
  code_of_conduct?: code_of_conduct;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at?: string | null;
  default_branch?: string;
  delete_branch_on_merge?: boolean;
  deployments_url: string;
  description: string | null;
  disabled?: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks?: number;
  forks_count?: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url?: string;
  has_discussions?: boolean;
  has_downloads?: boolean;
  has_issues?: boolean;
  has_pages?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  homepage?: string | null;
  hooks_url: string;
  html_url: string;
  id: number;
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language?: string | null;
  languages_url: string;
  license?: {
    key?: string;
    name?: string;
    node_id?: string;
    spdx_id?: string;
    url?: string;
  } | null;
  merges_url: string;
  milestones_url: string;
  mirror_url?: string | null;
  name: string;
  network_count?: number;
  node_id: string;
  notifications_url: string;
  open_issues?: number;
  open_issues_count?: number;
  owner: simple_user;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    pull?: boolean;
    push?: boolean;
    triage?: boolean;
  };
  private: boolean;
  pulls_url: string;
  pushed_at?: string | null;
  releases_url: string;
  role_name?: string;
  security_and_analysis?: security_and_analysis;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size?: number;
  ssh_url?: string;
  stargazers_count?: number;
  stargazers_url: string;
  statuses_url: string;
  subscribers_count?: number;
  subscribers_url: string;
  subscription_url: string;
  svn_url?: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string;
  topics?: Array<string>;
  trees_url: string;
  updated_at?: string | null;
  url: string;
  visibility?: string;
  watchers?: number;
  watchers_count?: number;
  web_commit_signoff_required?: boolean;
} | null;

/**
 * A repository on GitHub.
 */
export type nullable_repository = {
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;
  /**
   * Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;
  archive_url: string;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at: string | null;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  deployments_url: string;
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  /**
   * Whether discussions are enabled.
   */
  has_discussions?: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  homepage: string | null;
  hooks_url: string;
  html_url: string;
  /**
   * Unique identifier of the repository
   */
  id: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  languages_url: string;
  license: nullable_license_simple;
  master_branch?: string;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
  merges_url: string;
  milestones_url: string;
  mirror_url: string | null;
  /**
   * The name of the repository.
   */
  name: string;
  network_count?: number;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  organization?: nullable_simple_user;
  owner: simple_user;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  pulls_url: string;
  pushed_at: string | null;
  releases_url: string;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size: number;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
  ssh_url: string;
  stargazers_count: number;
  stargazers_url: string;
  starred_at?: string;
  statuses_url: string;
  subscribers_count?: number;
  subscribers_url: string;
  subscription_url: string;
  svn_url: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: {
    allow_auto_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    delete_branch_on_merge?: boolean;
    deployments_url?: string;
    description?: string;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: boolean;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: string;
    languages_url?: string;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: string;
    name?: string;
    network_count?: number;
    node_id?: string;
    notifications_url?: string;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      pull?: boolean;
      push?: boolean;
      triage?: boolean;
    };
    private?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_count?: number;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    temp_clone_token?: string;
    topics?: Array<string>;
    trees_url?: string;
    updated_at?: string;
    url?: string;
    use_squash_pr_title_as_default?: boolean;
    visibility?: string;
    watchers_count?: number;
  } | null;
  topics?: Array<string>;
  trees_url: string;
  updated_at: string | null;
  url: string;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   * @deprecated
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  watchers: number;
  watchers_count: number;
  /**
   * Whether to require contributors to sign off on web-based commits
   */
  web_commit_signoff_required?: boolean;
} | null;

export type nullable_scoped_installation = {
  account: simple_user;
  has_multiple_single_files?: boolean;
  permissions: app_permissions;
  repositories_url: string;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: 'all' | 'selected';
  single_file_name: string | null;
  single_file_paths?: Array<string>;
} | null;

/**
 * A commit.
 */
export type nullable_simple_commit = {
  author: {
    email: string;
    name: string;
  } | null;
  committer: {
    email: string;
    name: string;
  } | null;
  id: string;
  message: string;
  timestamp: string;
  tree_id: string;
} | null;

/**
 * A GitHub user.
 */
export type nullable_simple_user = {
  avatar_url: string;
  email?: string | null;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  html_url: string;
  id: number;
  login: string;
  name?: string | null;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
} | null;

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type nullable_team_simple = {
  /**
   * Description of the team
   */
  description: string | null;
  html_url: string;
  /**
   * Unique identifier of the team
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  node_id: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  repositories_url: string;
  slug: string;
  /**
   * URL for the team
   */
  url: string;
} | null;

/**
 * Actions OIDC Subject customization
 */
export type oidc_custom_sub = {
  /**
   * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys: Array<string>;
};

/**
 * Actions OIDC subject customization for a repository
 */
export type oidc_custom_sub_repo = {
  /**
   * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys?: Array<string>;
  /**
   * Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
   */
  use_default: boolean;
};

/**
 * Org Hook
 */
export type org_hook = {
  active: boolean;
  config: {
    content_type?: string;
    insecure_ssl?: string;
    secret?: string;
    url?: string;
  };
  created_at: string;
  deliveries_url?: string;
  events: Array<string>;
  id: number;
  name: string;
  ping_url: string;
  type: string;
  updated_at: string;
  url: string;
};

/**
 * Org Membership
 */
export type org_membership = {
  organization: organization_simple;
  organization_url: string;
  permissions?: {
    can_create_repository: boolean;
  };
  /**
   * The user's membership type in the organization.
   */
  role: 'admin' | 'member' | 'billing_manager';
  /**
   * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   */
  state: 'active' | 'pending';
  url: string;
  user: nullable_simple_user;
};

/**
 * The user's membership type in the organization.
 */
export type role = 'admin' | 'member' | 'billing_manager';

/**
 * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
 */
export type state7 = 'active' | 'pending';

/**
 * Secrets for GitHub Actions for an organization.
 */
export type organization_actions_secret = {
  created_at: string;
  /**
   * The name of the secret.
   */
  name: string;
  selected_repositories_url?: string;
  updated_at: string;
  /**
   * Visibility of a secret
   */
  visibility: 'all' | 'private' | 'selected';
};

/**
 * Organization variable for GitHub Actions.
 */
export type organization_actions_variable = {
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: string;
  /**
   * The name of the variable.
   */
  name: string;
  selected_repositories_url?: string;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: string;
  /**
   * The value of the variable.
   */
  value: string;
  /**
   * Visibility of a variable
   */
  visibility: 'all' | 'private' | 'selected';
};

/**
 * Secrets for GitHub Dependabot for an organization.
 */
export type organization_dependabot_secret = {
  created_at: string;
  /**
   * The name of the secret.
   */
  name: string;
  selected_repositories_url?: string;
  updated_at: string;
  /**
   * Visibility of a secret
   */
  visibility: 'all' | 'private' | 'selected';
};

/**
 * Organization Full
 */
export type organization_full = {
  /**
   * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  advanced_security_enabled_for_new_repositories?: boolean;
  avatar_url: string;
  billing_email?: string | null;
  blog?: string;
  collaborators?: number | null;
  company?: string;
  created_at: string;
  default_repository_permission?: string | null;
  /**
   * Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
   * this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  dependabot_alerts_enabled_for_new_repositories?: boolean;
  /**
   * Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
   * to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  dependabot_security_updates_enabled_for_new_repositories?: boolean;
  /**
   * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
   * organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  dependency_graph_enabled_for_new_repositories?: boolean;
  description: string | null;
  disk_usage?: number | null;
  email?: string;
  events_url: string;
  followers: number;
  following: number;
  has_organization_projects: boolean;
  has_repository_projects: boolean;
  hooks_url: string;
  html_url: string;
  id: number;
  is_verified?: boolean;
  issues_url: string;
  location?: string;
  login: string;
  members_allowed_repository_creation_type?: string;
  members_can_create_internal_repositories?: boolean;
  members_can_create_pages?: boolean;
  members_can_create_private_pages?: boolean;
  members_can_create_private_repositories?: boolean;
  members_can_create_public_pages?: boolean;
  members_can_create_public_repositories?: boolean;
  members_can_create_repositories?: boolean | null;
  members_can_fork_private_repositories?: boolean | null;
  members_url: string;
  name?: string;
  node_id: string;
  owned_private_repos?: number;
  plan?: {
    filled_seats?: number;
    name: string;
    private_repos: number;
    seats?: number;
    space: number;
  };
  private_gists?: number | null;
  public_gists: number;
  public_members_url: string;
  public_repos: number;
  repos_url: string;
  /**
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
   * organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  secret_scanning_enabled_for_new_repositories?: boolean;
  /**
   * An optional URL string to display to contributors who are blocked from pushing a secret.
   */
  secret_scanning_push_protection_custom_link?: string | null;
  /**
   * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
   */
  secret_scanning_push_protection_custom_link_enabled?: boolean;
  /**
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories
   * transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
  total_private_repos?: number;
  twitter_username?: string | null;
  two_factor_requirement_enabled?: boolean | null;
  type: string;
  updated_at: string;
  url: string;
  web_commit_signoff_required?: boolean;
};

/**
 * Organization Invitation
 */
export type organization_invitation = {
  created_at: string;
  email: string | null;
  failed_at?: string | null;
  failed_reason?: string | null;
  id: number;
  invitation_source?: string;
  invitation_teams_url: string;
  inviter: simple_user;
  login: string | null;
  node_id: string;
  role: string;
  team_count: number;
};

export type organization_secret_scanning_alert = {
  created_at?: alert_created_at;
  html_url?: alert_html_url;
  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  number?: alert_number;
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: string | null;
  push_protection_bypassed_by?: nullable_simple_user;
  repository?: simple_repository;
  resolution?: secret_scanning_alert_resolution;
  /**
   * The comment that was optionally added when this alert was closed
   */
  resolution_comment?: string | null;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at?: string | null;
  resolved_by?: nullable_simple_user;
  /**
   * The secret that was detected.
   */
  secret?: string;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
   */
  secret_type_display_name?: string;
  state?: secret_scanning_alert_state;
  updated_at?: nullable_alert_updated_at;
  url?: alert_url;
};

/**
 * A GitHub organization.
 */
export type organization_simple = {
  avatar_url: string;
  description: string | null;
  events_url: string;
  hooks_url: string;
  id: number;
  issues_url: string;
  login: string;
  members_url: string;
  node_id: string;
  public_members_url: string;
  repos_url: string;
  url: string;
};

/**
 * A software package
 */
export type _package = {
  created_at: string;
  html_url: string;
  /**
   * Unique identifier of the package.
   */
  id: number;
  /**
   * The name of the package.
   */
  name: string;
  owner?: nullable_simple_user;
  package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  repository?: nullable_minimal_repository;
  updated_at: string;
  url: string;
  /**
   * The number of versions of the package.
   */
  version_count: number;
  visibility: 'private' | 'public';
};

export type package_type = 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';

export type visibility2 = 'private' | 'public';

/**
 * A version of a software package
 */
export type package_version = {
  created_at: string;
  deleted_at?: string;
  description?: string;
  html_url?: string;
  /**
   * Unique identifier of the package version.
   */
  id: number;
  license?: string;
  metadata?: {
    container?: {
      tags: Array<string>;
    };
    docker?: {
      tag?: Array<string>;
    };
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
  /**
   * The name of the package version.
   */
  name: string;
  package_html_url: string;
  updated_at: string;
  url: string;
};

export type packages_billing_usage = {
  /**
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;
  /**
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
};

/**
 * The configuration for GitHub Pages for a repository.
 */
export type page = {
  /**
   * The process in which the Page will be built.
   */
  build_type?: ('legacy' | 'workflow') | null;
  /**
   * The Pages site's custom domain
   */
  cname: string | null;
  /**
   * Whether the Page has a custom 404 page.
   */
  custom_404: boolean;
  /**
   * The web address the Page can be accessed from.
   */
  html_url?: string;
  https_certificate?: pages_https_certificate;
  /**
   * Whether https is enabled on the domain
   */
  https_enforced?: boolean;
  /**
   * The timestamp when a pending domain becomes unverified.
   */
  pending_domain_unverified_at?: string | null;
  /**
   * The state if the domain is verified
   */
  protected_domain_state?: ('pending' | 'verified' | 'unverified') | null;
  /**
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   */
  public: boolean;
  source?: pages_source_hash;
  /**
   * The status of the most recent build of the Page.
   */
  status: ('built' | 'building' | 'errored') | null;
  /**
   * The API address for accessing this Page resource.
   */
  url: string;
};

/**
 * The process in which the Page will be built.
 */
export type build_type = 'legacy' | 'workflow';

/**
 * The state if the domain is verified
 */
export type protected_domain_state = 'pending' | 'verified' | 'unverified';

/**
 * The status of the most recent build of the Page.
 */
export type status6 = 'built' | 'building' | 'errored';

/**
 * Page Build
 */
export type page_build = {
  commit: string;
  created_at: string;
  duration: number;
  error: {
    message: string | null;
  };
  pusher: nullable_simple_user;
  status: string;
  updated_at: string;
  url: string;
};

/**
 * Page Build Status
 */
export type page_build_status = {
  status: string;
  url: string;
};

/**
 * The GitHub Pages deployment status.
 */
export type page_deployment = {
  /**
   * The URI to the deployed GitHub Pages.
   */
  page_url: string;
  /**
   * The URI to the deployed GitHub Pages preview.
   */
  preview_url?: string;
  /**
   * The URI to monitor GitHub Pages deployment status.
   */
  status_url: string;
};

/**
 * Pages Health Check Status
 */
export type pages_health_check = {
  alt_domain?: {
    caa_error?: string | null;
    dns_resolves?: boolean;
    enforces_https?: boolean;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    host?: string;
    https_error?: string | null;
    is_a_record?: boolean | null;
    is_apex_domain?: boolean;
    is_cloudflare_ip?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_https_eligible?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_pages_domain?: boolean;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_proxied?: boolean | null;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    is_valid_domain?: boolean;
    nameservers?: string;
    reason?: string | null;
    responds_to_https?: boolean;
    should_be_a_record?: boolean | null;
    uri?: string;
  } | null;
  domain?: {
    caa_error?: string | null;
    dns_resolves?: boolean;
    enforces_https?: boolean;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    host?: string;
    https_error?: string | null;
    is_a_record?: boolean | null;
    is_apex_domain?: boolean;
    is_cloudflare_ip?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_https_eligible?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_pages_domain?: boolean;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_proxied?: boolean | null;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    is_valid_domain?: boolean;
    nameservers?: string;
    reason?: string | null;
    responds_to_https?: boolean;
    should_be_a_record?: boolean | null;
    uri?: string;
  };
};

export type pages_https_certificate = {
  description: string;
  /**
   * Array of the domain set and its alternate name (if it is configured)
   */
  domains: Array<string>;
  expires_at?: string;
  state:
    | 'new'
    | 'authorization_created'
    | 'authorization_pending'
    | 'authorized'
    | 'authorization_revoked'
    | 'issued'
    | 'uploaded'
    | 'approved'
    | 'errored'
    | 'bad_authz'
    | 'destroy_pending'
    | 'dns_changed';
};

export type state8 =
  | 'new'
  | 'authorization_created'
  | 'authorization_pending'
  | 'authorized'
  | 'authorization_revoked'
  | 'issued'
  | 'uploaded'
  | 'approved'
  | 'errored'
  | 'bad_authz'
  | 'destroy_pending'
  | 'dns_changed';

export type pages_source_hash = {
  branch: string;
  path: string;
};

export type participation_stats = {
  all: Array<number>;
  owner: Array<number>;
};

/**
 * Details of a deployment that is waiting for protection rules to pass
 */
export type pending_deployment = {
  /**
   * Whether the currently authenticated user can approve the deployment
   */
  current_user_can_approve: boolean;
  environment: {
    html_url?: string;
    /**
     * The id of the environment.
     */
    id?: number;
    /**
     * The name of the environment.
     */
    name?: string;
    node_id?: string;
    url?: string;
  };
  /**
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   */
  reviewers: Array<{
    reviewer?: simple_user | team;
    type?: deployment_reviewer_type;
  }>;
  /**
   * The set duration of the wait timer
   */
  wait_timer: number;
  /**
   * The time that the wait timer began.
   */
  wait_timer_started_at: string | null;
};

/**
 * Porter Author
 */
export type porter_author = {
  email: string;
  id: number;
  import_url: string;
  name: string;
  remote_id: string;
  remote_name: string;
  url: string;
};

/**
 * Porter Large File
 */
export type porter_large_file = {
  oid: string;
  path: string;
  ref_name: string;
  size: number;
};

/**
 * Private User
 */
export type private_user = {
  avatar_url: string;
  bio: string | null;
  blog: string | null;
  business_plus?: boolean;
  collaborators: number;
  company: string | null;
  created_at: string;
  disk_usage: number;
  email: string | null;
  events_url: string;
  followers: number;
  followers_url: string;
  following: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable: boolean | null;
  html_url: string;
  id: number;
  ldap_dn?: string;
  location: string | null;
  login: string;
  name: string | null;
  node_id: string;
  organizations_url: string;
  owned_private_repos: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  private_gists: number;
  public_gists: number;
  public_repos: number;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  suspended_at?: string | null;
  total_private_repos: number;
  twitter_username?: string | null;
  two_factor_authentication: boolean;
  type: string;
  updated_at: string;
  url: string;
};

/**
 * Projects are a way to organize columns and cards of work.
 */
export type project = {
  /**
   * Body of the project
   */
  body: string | null;
  columns_url: string;
  created_at: string;
  creator: nullable_simple_user;
  html_url: string;
  id: number;
  /**
   * Name of the project
   */
  name: string;
  node_id: string;
  number: number;
  /**
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: 'read' | 'write' | 'admin' | 'none';
  owner_url: string;
  /**
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean;
  /**
   * State of the project; either 'open' or 'closed'
   */
  state: string;
  updated_at: string;
  url: string;
};

/**
 * The baseline permission that all organization members have on this project. Only present if owner is an organization.
 */
export type organization_permission = 'read' | 'write' | 'admin' | 'none';

/**
 * Project cards represent a scope of work.
 */
export type project_card = {
  /**
   * Whether or not the card is archived
   */
  archived?: boolean;
  column_name?: string;
  column_url: string;
  content_url?: string;
  created_at: string;
  creator: nullable_simple_user;
  /**
   * The project card's ID
   */
  id: number;
  node_id: string;
  note: string | null;
  project_id?: string;
  project_url: string;
  updated_at: string;
  url: string;
};

/**
 * Project Collaborator Permission
 */
export type project_collaborator_permission = {
  permission: string;
  user: nullable_simple_user;
};

/**
 * Project columns contain cards of work.
 */
export type project_column = {
  cards_url: string;
  created_at: string;
  /**
   * The unique identifier of the project column
   */
  id: number;
  /**
   * Name of the project column
   */
  name: string;
  node_id: string;
  project_url: string;
  updated_at: string;
  url: string;
};

/**
 * A projects v2 project
 */
export type projects_v2 = {
  closed_at: string | null;
  created_at: string;
  creator: simple_user;
  deleted_at: string | null;
  deleted_by: nullable_simple_user;
  description: string | null;
  id: number;
  node_id: string;
  number: number;
  owner: simple_user;
  public: boolean;
  short_description: string | null;
  title: string;
  updated_at: string;
};

/**
 * An item belonging to a project
 */
export type projects_v2_item = {
  archived_at: string | null;
  content_node_id: string;
  content_type: projects_v2_item_content_type;
  created_at: string;
  creator?: simple_user;
  id: number;
  node_id?: string;
  project_node_id?: string;
  updated_at: string;
};

/**
 * The type of content tracked in a project item
 */
export type projects_v2_item_content_type = 'Issue' | 'PullRequest' | 'DraftIssue';

/**
 * Branch protections protect branches
 */
export type protected_branch = {
  allow_deletions?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };
  enforce_admins?: {
    enabled: boolean;
    url: string;
  };
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    enabled?: boolean;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  required_pull_request_reviews?: {
    bypass_pull_request_allowances?: {
      apps?: Array<integration>;
      teams: Array<team>;
      users: Array<simple_user>;
    };
    dismiss_stale_reviews?: boolean;
    dismissal_restrictions?: {
      apps?: Array<integration>;
      teams: Array<team>;
      teams_url: string;
      url: string;
      users: Array<simple_user>;
      users_url: string;
    };
    require_code_owner_reviews?: boolean;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it.
     */
    require_last_push_approval?: boolean;
    required_approving_review_count?: number;
    url: string;
  };
  required_signatures?: {
    enabled: boolean;
    url: string;
  };
  required_status_checks?: status_check_policy;
  restrictions?: branch_restriction_policy;
  url: string;
};

/**
 * Protected Branch Admin Enforced
 */
export type protected_branch_admin_enforced = {
  enabled: boolean;
  url: string;
};

/**
 * Protected Branch Pull Request Review
 */
export type protected_branch_pull_request_review = {
  /**
   * Allow specific users, teams, or apps to bypass pull request requirements.
   */
  bypass_pull_request_allowances?: {
    /**
     * The list of apps allowed to bypass pull request requirements.
     */
    apps?: Array<integration>;
    /**
     * The list of teams allowed to bypass pull request requirements.
     */
    teams?: Array<team>;
    /**
     * The list of users allowed to bypass pull request requirements.
     */
    users?: Array<simple_user>;
  };
  dismiss_stale_reviews: boolean;
  dismissal_restrictions?: {
    /**
     * The list of apps with review dismissal access.
     */
    apps?: Array<integration>;
    /**
     * The list of teams with review dismissal access.
     */
    teams?: Array<team>;
    teams_url?: string;
    url?: string;
    /**
     * The list of users with review dismissal access.
     */
    users?: Array<simple_user>;
    users_url?: string;
  };
  require_code_owner_reviews: boolean;
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it.
   */
  require_last_push_approval?: boolean;
  required_approving_review_count?: number;
  url?: string;
};

/**
 * Protected Branch Required Status Check
 */
export type protected_branch_required_status_check = {
  checks: Array<{
    app_id: number | null;
    context: string;
  }>;
  contexts: Array<string>;
  contexts_url?: string;
  enforcement_level?: string;
  strict?: boolean;
  url?: string;
};

/**
 * Public User
 */
export type public_user = {
  avatar_url: string;
  bio: string | null;
  blog: string | null;
  collaborators?: number;
  company: string | null;
  created_at: string;
  disk_usage?: number;
  email: string | null;
  events_url: string;
  followers: number;
  followers_url: string;
  following: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable: boolean | null;
  html_url: string;
  id: number;
  location: string | null;
  login: string;
  name: string | null;
  node_id: string;
  organizations_url: string;
  owned_private_repos?: number;
  plan?: {
    collaborators: number;
    name: string;
    private_repos: number;
    space: number;
  };
  private_gists?: number;
  public_gists: number;
  public_repos: number;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  suspended_at?: string | null;
  total_private_repos?: number;
  twitter_username?: string | null;
  type: string;
  updated_at: string;
  url: string;
};

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export type pull_request = {
  _links: {
    comments: link;
    commits: link;
    html: link;
    issue: link;
    review_comment: link;
    review_comments: link;
    self: link;
    statuses: link;
  };
  active_lock_reason?: string | null;
  additions: number;
  assignee: nullable_simple_user;
  assignees?: Array<simple_user> | null;
  author_association: author_association;
  auto_merge: auto_merge;
  base: {
    label: string;
    ref: string;
    repo: {
      allow_forking?: boolean;
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: string;
      default_branch: string;
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_discussions: boolean;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      license: nullable_license_simple;
      master_branch?: string;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      private: boolean;
      pulls_url: string;
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      temp_clone_token?: string;
      topics?: Array<string>;
      trees_url: string;
      updated_at: string;
      url: string;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      watchers: number;
      watchers_count: number;
      web_commit_signoff_required?: boolean;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  body: string | null;
  changed_files: number;
  closed_at: string | null;
  comments: number;
  comments_url: string;
  commits: number;
  commits_url: string;
  created_at: string;
  deletions: number;
  diff_url: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: {
      allow_forking?: boolean;
      allow_merge_commit?: boolean;
      allow_rebase_merge?: boolean;
      allow_squash_merge?: boolean;
      archive_url: string;
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: string;
      default_branch: string;
      deployments_url: string;
      description: string | null;
      disabled: boolean;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      has_discussions: boolean;
      has_downloads: boolean;
      has_issues: boolean;
      has_pages: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string | null;
        url: string | null;
      } | null;
      master_branch?: string;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      private: boolean;
      pulls_url: string;
      pushed_at: string;
      releases_url: string;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      temp_clone_token?: string;
      topics?: Array<string>;
      trees_url: string;
      updated_at: string;
      url: string;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      watchers: number;
      watchers_count: number;
      web_commit_signoff_required?: boolean;
    } | null;
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  html_url: string;
  id: number;
  issue_url: string;
  labels: Array<{
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    name: string;
    node_id: string;
    url: string;
  }>;
  locked: boolean;
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainer_can_modify: boolean;
  merge_commit_sha: string | null;
  mergeable: boolean | null;
  mergeable_state: string;
  merged: boolean;
  merged_at: string | null;
  merged_by: nullable_simple_user;
  milestone: nullable_milestone;
  node_id: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   */
  number: number;
  patch_url: string;
  rebaseable?: boolean | null;
  requested_reviewers?: Array<simple_user> | null;
  requested_teams?: Array<team_simple> | null;
  review_comment_url: string;
  review_comments: number;
  review_comments_url: string;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state: 'open' | 'closed';
  statuses_url: string;
  /**
   * The title of the pull request.
   */
  title: string;
  updated_at: string;
  url: string;
  user: nullable_simple_user;
};

/**
 * Pull Request Merge Result
 */
export type pull_request_merge_result = {
  merged: boolean;
  message: string;
  sha: string;
};

export type pull_request_minimal = {
  base: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  head: {
    ref: string;
    repo: {
      id: number;
      name: string;
      url: string;
    };
    sha: string;
  };
  id: number;
  number: number;
  url: string;
};

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export type pull_request_review = {
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  author_association: author_association;
  /**
   * The text of the review.
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /**
   * A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
   */
  commit_id: string | null;
  html_url: string;
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  pull_request_url: string;
  state: string;
  submitted_at?: string;
  user: nullable_simple_user;
};

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export type pull_request_review_comment = {
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
    self: {
      href: string;
    };
  };
  author_association: author_association;
  /**
   * The text of the comment.
   */
  body: string;
  body_html?: string;
  body_text?: string;
  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id: string;
  created_at: string;
  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk: string;
  /**
   * HTML URL for the pull request review comment.
   */
  html_url: string;
  /**
   * The ID of the pull request review comment.
   */
  id: number;
  /**
   * The comment ID to reply to.
   */
  in_reply_to_id?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line?: number;
  /**
   * The node ID of the pull request review comment.
   */
  node_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id: string;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line?: number;
  /**
   * The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
   */
  original_position: number;
  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line?: number | null;
  /**
   * The relative path of the file to which the comment applies.
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
   */
  position: number;
  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id: number | null;
  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url: string;
  reactions?: reaction_rollup;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side?: 'LEFT' | 'RIGHT';
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side?: ('LEFT' | 'RIGHT') | null;
  updated_at: string;
  /**
   * URL for the pull request review comment
   */
  url: string;
  user: simple_user;
};

/**
 * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
 */
export type side = 'LEFT' | 'RIGHT';

/**
 * The side of the first line of the range for a multi-line comment.
 */
export type start_side = 'LEFT' | 'RIGHT';

/**
 * Pull Request Review Request
 */
export type pull_request_review_request = {
  teams: Array<team>;
  users: Array<simple_user>;
};

/**
 * Pull Request Simple
 */
export type pull_request_simple = {
  _links: {
    comments: link;
    commits: link;
    html: link;
    issue: link;
    review_comment: link;
    review_comments: link;
    self: link;
    statuses: link;
  };
  active_lock_reason?: string | null;
  assignee: nullable_simple_user;
  assignees?: Array<simple_user> | null;
  author_association: author_association;
  auto_merge: auto_merge;
  base: {
    label: string;
    ref: string;
    repo: repository;
    sha: string;
    user: nullable_simple_user;
  };
  body: string | null;
  closed_at: string | null;
  comments_url: string;
  commits_url: string;
  created_at: string;
  diff_url: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
  head: {
    label: string;
    ref: string;
    repo: repository;
    sha: string;
    user: nullable_simple_user;
  };
  html_url: string;
  id: number;
  issue_url: string;
  labels: Array<{
    color: string;
    default: boolean;
    description: string;
    id: number;
    name: string;
    node_id: string;
    url: string;
  }>;
  locked: boolean;
  merge_commit_sha: string | null;
  merged_at: string | null;
  milestone: nullable_milestone;
  node_id: string;
  number: number;
  patch_url: string;
  requested_reviewers?: Array<simple_user> | null;
  requested_teams?: Array<team> | null;
  review_comment_url: string;
  review_comments_url: string;
  state: string;
  statuses_url: string;
  title: string;
  updated_at: string;
  url: string;
  user: nullable_simple_user;
};

export type rate_limit = {
  limit: number;
  remaining: number;
  reset: number;
  used: number;
};

/**
 * Rate Limit Overview
 */
export type rate_limit_overview = {
  rate: rate_limit;
  resources: {
    actions_runner_registration?: rate_limit;
    code_scanning_upload?: rate_limit;
    core: rate_limit;
    dependency_snapshots?: rate_limit;
    graphql?: rate_limit;
    integration_manifest?: rate_limit;
    scim?: rate_limit;
    search: rate_limit;
    source_import?: rate_limit;
  };
};

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export type reaction = {
  /**
   * The reaction to use
   */
  content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  created_at: string;
  id: number;
  node_id: string;
  user: nullable_simple_user;
};

/**
 * The reaction to use
 */
export type content = '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';

export type reaction_rollup = {
  '+1': number;
  '-1': number;
  confused: number;
  eyes: number;
  heart: number;
  hooray: number;
  laugh: number;
  rocket: number;
  total_count: number;
  url: string;
};

/**
 * A workflow referenced/reused by the initial caller workflow
 */
export type referenced_workflow = {
  path: string;
  ref?: string;
  sha: string;
};

/**
 * Referrer Traffic
 */
export type referrer_traffic = {
  count: number;
  referrer: string;
  uniques: number;
};

/**
 * A release.
 */
export type release = {
  assets: Array<release_asset>;
  assets_url: string;
  author: simple_user;
  body?: string | null;
  body_html?: string;
  body_text?: string;
  created_at: string;
  /**
   * The URL of the release discussion.
   */
  discussion_url?: string;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  html_url: string;
  id: number;
  mentions_count?: number;
  name: string | null;
  node_id: string;
  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  published_at: string | null;
  reactions?: reaction_rollup;
  /**
   * The name of the tag.
   */
  tag_name: string;
  tarball_url: string | null;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish: string;
  upload_url: string;
  url: string;
  zipball_url: string | null;
};

/**
 * Data related to a release.
 */
export type release_asset = {
  browser_download_url: string;
  content_type: string;
  created_at: string;
  download_count: number;
  id: number;
  label: string | null;
  /**
   * The file name of the asset.
   */
  name: string;
  node_id: string;
  size: number;
  /**
   * State of the release asset.
   */
  state: 'uploaded' | 'open';
  updated_at: string;
  uploader: nullable_simple_user;
  url: string;
};

/**
 * State of the release asset.
 */
export type state9 = 'uploaded' | 'open';

/**
 * Generated name and body describing a release
 */
export type release_notes_content = {
  /**
   * The generated body describing the contents of the release supporting markdown formatting
   */
  body: string;
  /**
   * The generated name of the release
   */
  name: string;
};

/**
 * Removed from Project Issue Event
 */
export type removed_from_project_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  project_card?: {
    column_name: string;
    id: number;
    previous_column_name?: string;
    project_id: number;
    project_url: string;
    url: string;
  };
  url: string;
};

/**
 * Renamed Issue Event
 */
export type renamed_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  rename: {
    from: string;
    to: string;
  };
  url: string;
};

/**
 * Set repository secrets for GitHub Codespaces.
 */
export type repo_codespaces_secret = {
  created_at: string;
  /**
   * The name of the secret.
   */
  name: string;
  updated_at: string;
};

/**
 * A GitHub Actions required workflow
 */
export type repo_required_workflow = {
  badge_url: string;
  created_at: string;
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  path: string;
  source_repository: minimal_repository;
  state: 'active' | 'deleted';
  updated_at: string;
  url: string;
};

export type state10 = 'active' | 'deleted';

/**
 * Repo Search Result Item
 */
export type repo_search_result_item = {
  allow_auto_merge?: boolean;
  allow_forking?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  archive_url: string;
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at: string;
  default_branch: string;
  delete_branch_on_merge?: boolean;
  deployments_url: string;
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  has_discussions?: boolean;
  has_downloads: boolean;
  has_issues: boolean;
  has_pages: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  homepage: string | null;
  hooks_url: string;
  html_url: string;
  id: number;
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  languages_url: string;
  license: nullable_license_simple;
  master_branch?: string;
  merges_url: string;
  milestones_url: string;
  mirror_url: string | null;
  name: string;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  owner: nullable_simple_user;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  private: boolean;
  pulls_url: string;
  pushed_at: string;
  releases_url: string;
  score: number;
  size: number;
  ssh_url: string;
  stargazers_count: number;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  svn_url: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string;
  text_matches?: search_result_text_matches;
  topics?: Array<string>;
  trees_url: string;
  updated_at: string;
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  watchers: number;
  watchers_count: number;
  web_commit_signoff_required?: boolean;
};

/**
 * A repository on GitHub.
 */
export type repository = {
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;
  /**
   * Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;
  archive_url: string;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at: string | null;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  deployments_url: string;
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  /**
   * Whether discussions are enabled.
   */
  has_discussions?: boolean;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  homepage: string | null;
  hooks_url: string;
  html_url: string;
  /**
   * Unique identifier of the repository
   */
  id: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  languages_url: string;
  license: nullable_license_simple;
  master_branch?: string;
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
  merges_url: string;
  milestones_url: string;
  mirror_url: string | null;
  /**
   * The name of the repository.
   */
  name: string;
  network_count?: number;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  organization?: nullable_simple_user;
  owner: simple_user;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  pulls_url: string;
  pushed_at: string | null;
  releases_url: string;
  /**
   * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size: number;
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
  ssh_url: string;
  stargazers_count: number;
  stargazers_url: string;
  starred_at?: string;
  statuses_url: string;
  subscribers_count?: number;
  subscribers_url: string;
  subscription_url: string;
  svn_url: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: {
    allow_auto_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    delete_branch_on_merge?: boolean;
    deployments_url?: string;
    description?: string;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: boolean;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: string;
    languages_url?: string;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: string;
    name?: string;
    network_count?: number;
    node_id?: string;
    notifications_url?: string;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      pull?: boolean;
      push?: boolean;
      triage?: boolean;
    };
    private?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_count?: number;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    temp_clone_token?: string;
    topics?: Array<string>;
    trees_url?: string;
    updated_at?: string;
    url?: string;
    use_squash_pr_title_as_default?: boolean;
    visibility?: string;
    watchers_count?: number;
  } | null;
  topics?: Array<string>;
  trees_url: string;
  updated_at: string | null;
  url: string;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   * @deprecated
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  watchers: number;
  watchers_count: number;
  /**
   * Whether to require contributors to sign off on web-based commits
   */
  web_commit_signoff_required?: boolean;
};

/**
 * Repository Collaborator Permission
 */
export type repository_collaborator_permission = {
  permission: string;
  role_name: string;
  user: nullable_collaborator;
};

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type repository_invitation = {
  created_at: string;
  /**
   * Whether or not the invitation has expired
   */
  expired?: boolean;
  html_url: string;
  /**
   * Unique identifier of the repository invitation.
   */
  id: number;
  invitee: nullable_simple_user;
  inviter: nullable_simple_user;
  node_id: string;
  /**
   * The permission associated with the invitation.
   */
  permissions: 'read' | 'write' | 'admin' | 'triage' | 'maintain';
  repository: minimal_repository;
  /**
   * URL for the repository invitation
   */
  url: string;
};

/**
 * The permission associated with the invitation.
 */
export type permissions = 'read' | 'write' | 'admin' | 'triage' | 'maintain';

/**
 * Repository invitations let you manage who you collaborate with.
 */
export type repository_subscription = {
  created_at: string;
  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string | null;
  repository_url: string;
  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed: boolean;
  url: string;
};

export type required_workflow = {
  created_at: string;
  /**
   * Unique identifier for a required workflow
   */
  id: number;
  /**
   * Name present in the workflow file
   */
  name: string;
  /**
   * Path of the workflow file
   */
  path: string;
  /**
   * Ref at which the workflow file will be selected
   */
  ref: string;
  repository: minimal_repository;
  /**
   * Scope of the required workflow
   */
  scope: 'all' | 'selected';
  selected_repositories_url?: string;
  /**
   * State of the required workflow
   */
  state: 'active' | 'deleted';
  updated_at: string;
};

/**
 * Scope of the required workflow
 */
export type scope2 = 'all' | 'selected';

/**
 * Legacy Review Comment
 */
export type review_comment = {
  _links: {
    html: link;
    pull_request: link;
    self: link;
  };
  author_association: author_association;
  body: string;
  body_html?: string;
  body_text?: string;
  commit_id: string;
  created_at: string;
  diff_hunk: string;
  html_url: string;
  id: number;
  in_reply_to_id?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line?: number;
  node_id: string;
  original_commit_id: string;
  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line?: number;
  original_position: number;
  /**
   * The original first line of the range for a multi-line comment.
   */
  original_start_line?: number | null;
  path: string;
  position: number | null;
  pull_request_review_id: number | null;
  pull_request_url: string;
  reactions?: reaction_rollup;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  side?: 'LEFT' | 'RIGHT';
  /**
   * The first line of the range for a multi-line comment.
   */
  start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side?: ('LEFT' | 'RIGHT') | null;
  updated_at: string;
  url: string;
  user: nullable_simple_user;
};

/**
 * Review Dismissed Issue Event
 */
export type review_dismissed_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  dismissed_review: {
    dismissal_commit_id?: string;
    dismissal_message: string | null;
    review_id: number;
    state: string;
  };
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

/**
 * Review Request Removed Issue Event
 */
export type review_request_removed_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  requested_reviewer?: simple_user;
  requested_team?: team;
  review_requester: simple_user;
  url: string;
};

/**
 * Review Requested Issue Event
 */
export type review_requested_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  requested_reviewer?: simple_user;
  requested_team?: team;
  review_requester: simple_user;
  url: string;
};

export type root = {
  authorizations_url: string;
  code_search_url: string;
  commit_search_url: string;
  current_user_authorizations_html_url: string;
  current_user_repositories_url: string;
  current_user_url: string;
  emails_url: string;
  emojis_url: string;
  events_url: string;
  feeds_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  hub_url: string;
  issue_search_url: string;
  issues_url: string;
  keys_url: string;
  label_search_url: string;
  notifications_url: string;
  organization_repositories_url: string;
  organization_teams_url: string;
  organization_url: string;
  public_gists_url: string;
  rate_limit_url: string;
  repository_search_url: string;
  repository_url: string;
  starred_gists_url: string;
  starred_url: string;
  topic_search_url?: string;
  user_organizations_url: string;
  user_repositories_url: string;
  user_search_url: string;
  user_url: string;
};

/**
 * A self hosted runner
 */
export type runner = {
  busy: boolean;
  /**
   * The id of the runner.
   */
  id: number;
  labels: Array<runner_label>;
  /**
   * The name of the runner.
   */
  name: string;
  /**
   * The Operating System of the runner.
   */
  os: string;
  /**
   * The status of the runner.
   */
  status: string;
};

/**
 * Runner Application
 */
export type runner_application = {
  architecture: string;
  download_url: string;
  filename: string;
  os: string;
  sha256_checksum?: string;
  /**
   * A short lived bearer token used to download the runner, if needed.
   */
  temp_download_token?: string;
};

/**
 * A label for a self hosted runner
 */
export type runner_label = {
  /**
   * Unique identifier of the label.
   */
  id?: number;
  /**
   * Name of the label.
   */
  name: string;
  /**
   * The type of label. Read-only labels are applied automatically when the runner is configured.
   */
  type?: 'read-only' | 'custom';
};

/**
 * The type of label. Read-only labels are applied automatically when the runner is configured.
 */
export type type5 = 'read-only' | 'custom';

/**
 * Scim Error
 */
export type scim_error = {
  detail?: string | null;
  documentation_url?: string | null;
  message?: string | null;
  schemas?: Array<string>;
  scimType?: string | null;
  status?: number;
};

export type search_result_text_matches = Array<{
  fragment?: string;
  matches?: Array<{
    indices?: Array<number>;
    text?: string;
  }>;
  object_type?: string | null;
  object_url?: string;
  property?: string;
}>;

export type secret_scanning_alert = {
  created_at?: alert_created_at;
  html_url?: alert_html_url;
  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  number?: alert_number;
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: string | null;
  push_protection_bypassed_by?: nullable_simple_user;
  resolution?: secret_scanning_alert_resolution;
  /**
   * An optional comment to resolve an alert.
   */
  resolution_comment?: string | null;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at?: string | null;
  resolved_by?: nullable_simple_user;
  /**
   * The secret that was detected.
   */
  secret?: string;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
   */
  secret_type_display_name?: string;
  state?: secret_scanning_alert_state;
  updated_at?: nullable_alert_updated_at;
  url?: alert_url;
};

/**
 * **Required when the `state` is `resolved`.** The reason for resolving the alert.
 */
export type secret_scanning_alert_resolution = 'false_positive' | 'wont_fix' | 'revoked' | 'used_in_tests';

/**
 * An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.
 */
export type secret_scanning_alert_resolution_comment = string | null;

/**
 * Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
 */
export type secret_scanning_alert_state = 'open' | 'resolved';

export type secret_scanning_location = {
  details:
    | secret_scanning_location_commit
    | secret_scanning_location_issue_title
    | secret_scanning_location_issue_body
    | secret_scanning_location_issue_comment;
  /**
   * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
   */
  type: 'commit' | 'issue_title' | 'issue_body' | 'issue_comment';
};

/**
 * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.
 */
export type type6 = 'commit' | 'issue_title' | 'issue_body' | 'issue_comment';

/**
 * Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
 */
export type secret_scanning_location_commit = {
  /**
   * SHA-1 hash ID of the associated blob
   */
  blob_sha: string;
  /**
   * The API URL to get the associated blob resource
   */
  blob_url: string;
  /**
   * SHA-1 hash ID of the associated commit
   */
  commit_sha: string;
  /**
   * The API URL to get the associated commit resource
   */
  commit_url: string;
  /**
   * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
   */
  end_column: number;
  /**
   * Line number at which the secret ends in the file
   */
  end_line: number;
  /**
   * The file path in the repository
   */
  path: string;
  /**
   * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
   */
  start_column: number;
  /**
   * Line number at which the secret starts in the file
   */
  start_line: number;
};

/**
 * Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
 */
export type secret_scanning_location_issue_body = {
  /**
   * The API URL to get the issue where the secret was detected.
   */
  issue_body_url: string;
};

/**
 * Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
 */
export type secret_scanning_location_issue_comment = {
  /**
   * The API URL to get the issue comment where the secret was detected.
   */
  issue_comment_url: string;
};

/**
 * Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
 */
export type secret_scanning_location_issue_title = {
  /**
   * The API URL to get the issue where the secret was detected.
   */
  issue_title_url: string;
};

export type security_and_analysis = {
  advanced_security?: {
    status?: 'enabled' | 'disabled';
  };
  secret_scanning?: {
    status?: 'enabled' | 'disabled';
  };
  secret_scanning_push_protection?: {
    status?: 'enabled' | 'disabled';
  };
} | null;

export type status7 = 'enabled' | 'disabled';

export type selected_actions = {
  /**
   * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
   */
  github_owned_allowed?: boolean;
  /**
   * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa*`.
   *
   * **Note**: The `patterns_allowed` setting only applies to public repositories.
   */
  patterns_allowed?: Array<string>;
  /**
   * Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
   */
  verified_allowed?: boolean;
};

/**
 * The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
 */
export type selected_actions_url = string;

/**
 * Short Blob
 */
export type short_blob = {
  sha: string;
  url: string;
};

/**
 * Short Branch
 */
export type short_branch = {
  commit: {
    sha: string;
    url: string;
  };
  name: string;
  protected: boolean;
  protection?: branch_protection;
  protection_url?: string;
};

/**
 * A suite of checks performed on the code of a given code change
 */
export type simple_check_suite = {
  after?: string | null;
  app?: integration;
  before?: string | null;
  conclusion?:
    | (
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
        | 'stale'
        | 'startup_failure'
      )
    | null;
  created_at?: string;
  head_branch?: string | null;
  /**
   * The SHA of the head commit that is being checked.
   */
  head_sha?: string;
  id?: number;
  node_id?: string;
  pull_requests?: Array<pull_request_minimal>;
  repository?: minimal_repository;
  status?: 'queued' | 'in_progress' | 'completed' | 'pending' | 'waiting';
  updated_at?: string;
  url?: string;
};

export type status8 = 'queued' | 'in_progress' | 'completed' | 'pending' | 'waiting';

/**
 * A commit.
 */
export type simple_commit = {
  author: {
    email: string;
    name: string;
  } | null;
  committer: {
    email: string;
    name: string;
  } | null;
  id: string;
  message: string;
  timestamp: string;
  tree_id: string;
};

export type simple_commit_status = {
  avatar_url: string | null;
  context: string;
  created_at: string;
  description: string | null;
  id: number;
  node_id: string;
  required?: boolean | null;
  state: string;
  target_url: string | null;
  updated_at: string;
  url: string;
};

/**
 * The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
 */
export type simple_installation = {
  /**
   * The ID of the installation.
   */
  id: number;
  /**
   * The global node ID of the installation.
   */
  node_id: string;
};

/**
 * A GitHub repository.
 */
export type simple_repository = {
  /**
   * A template for the API URL to download the repository as an archive.
   */
  archive_url: string;
  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   */
  assignees_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   */
  blobs_url: string;
  /**
   * A template for the API URL to get information about branches in the repository.
   */
  branches_url: string;
  /**
   * A template for the API URL to get information about collaborators of the repository.
   */
  collaborators_url: string;
  /**
   * A template for the API URL to get information about comments on the repository.
   */
  comments_url: string;
  /**
   * A template for the API URL to get information about commits on the repository.
   */
  commits_url: string;
  /**
   * A template for the API URL to compare two commits or refs.
   */
  compare_url: string;
  /**
   * A template for the API URL to get the contents of the repository.
   */
  contents_url: string;
  /**
   * A template for the API URL to list the contributors to the repository.
   */
  contributors_url: string;
  /**
   * The API URL to list the deployments of the repository.
   */
  deployments_url: string;
  /**
   * The repository description.
   */
  description: string | null;
  /**
   * The API URL to list the downloads on the repository.
   */
  downloads_url: string;
  /**
   * The API URL to list the events of the repository.
   */
  events_url: string;
  /**
   * Whether the repository is a fork.
   */
  fork: boolean;
  /**
   * The API URL to list the forks of the repository.
   */
  forks_url: string;
  /**
   * The full, globally unique, name of the repository.
   */
  full_name: string;
  /**
   * A template for the API URL to get information about Git commits of the repository.
   */
  git_commits_url: string;
  /**
   * A template for the API URL to get information about Git refs of the repository.
   */
  git_refs_url: string;
  /**
   * A template for the API URL to get information about Git tags of the repository.
   */
  git_tags_url: string;
  /**
   * The API URL to list the hooks on the repository.
   */
  hooks_url: string;
  /**
   * The URL to view the repository on GitHub.com.
   */
  html_url: string;
  /**
   * A unique identifier of the repository.
   */
  id: number;
  /**
   * A template for the API URL to get information about issue comments on the repository.
   */
  issue_comment_url: string;
  /**
   * A template for the API URL to get information about issue events on the repository.
   */
  issue_events_url: string;
  /**
   * A template for the API URL to get information about issues on the repository.
   */
  issues_url: string;
  /**
   * A template for the API URL to get information about deploy keys on the repository.
   */
  keys_url: string;
  /**
   * A template for the API URL to get information about labels of the repository.
   */
  labels_url: string;
  /**
   * The API URL to get information about the languages of the repository.
   */
  languages_url: string;
  /**
   * The API URL to merge branches in the repository.
   */
  merges_url: string;
  /**
   * A template for the API URL to get information about milestones of the repository.
   */
  milestones_url: string;
  /**
   * The name of the repository.
   */
  name: string;
  /**
   * The GraphQL identifier of the repository.
   */
  node_id: string;
  /**
   * A template for the API URL to get information about notifications on the repository.
   */
  notifications_url: string;
  owner: simple_user;
  /**
   * Whether the repository is private.
   */
  private: boolean;
  /**
   * A template for the API URL to get information about pull requests on the repository.
   */
  pulls_url: string;
  /**
   * A template for the API URL to get information about releases on the repository.
   */
  releases_url: string;
  /**
   * The API URL to list the stargazers on the repository.
   */
  stargazers_url: string;
  /**
   * A template for the API URL to get information about statuses of a commit.
   */
  statuses_url: string;
  /**
   * The API URL to list the subscribers on the repository.
   */
  subscribers_url: string;
  /**
   * The API URL to subscribe to notifications for this repository.
   */
  subscription_url: string;
  /**
   * The API URL to get information about tags on the repository.
   */
  tags_url: string;
  /**
   * The API URL to list the teams on the repository.
   */
  teams_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   */
  trees_url: string;
  /**
   * The URL to get more information about the repository from the GitHub API.
   */
  url: string;
};

/**
 * A GitHub user.
 */
export type simple_user = {
  avatar_url: string;
  email?: string | null;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  html_url: string;
  id: number;
  login: string;
  name?: string | null;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
};

/**
 * Create a new snapshot of a repository's dependencies.
 */
export type snapshot = {
  /**
   * A description of the detector used.
   */
  detector: {
    /**
     * The name of the detector used.
     */
    name: string;
    /**
     * The url of the detector used.
     */
    url: string;
    /**
     * The version of the detector used.
     */
    version: string;
  };
  job: {
    /**
     * Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
     */
    correlator: string;
    /**
     * The url for the job.
     */
    html_url?: string;
    /**
     * The external ID of the job.
     */
    id: string;
  };
  /**
   * A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
   */
  manifests?: {
    [key: string]: manifest;
  };
  metadata?: metadata;
  /**
   * The repository branch that triggered this snapshot.
   */
  ref: string;
  /**
   * The time at which the snapshot was scanned.
   */
  scanned: string;
  /**
   * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
   */
  sha: string;
  /**
   * The version of the repository snapshot submission.
   */
  version: number;
};

/**
 * A public SSH key used to sign Git commits
 */
export type ssh_signing_key = {
  created_at: string;
  id: number;
  key: string;
  title: string;
};

/**
 * Stargazer
 */
export type stargazer = {
  starred_at: string;
  user: nullable_simple_user;
};

/**
 * Starred Repository
 */
export type starred_repository = {
  repo: repository;
  starred_at: string;
};

/**
 * State Change Issue Event
 */
export type state_change_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  state_reason?: string | null;
  url: string;
};

/**
 * The status of a commit.
 */
export type status9 = {
  avatar_url: string | null;
  context: string;
  created_at: string;
  creator: nullable_simple_user;
  description: string | null;
  id: number;
  node_id: string;
  state: string;
  target_url: string | null;
  updated_at: string;
  url: string;
};

/**
 * Status Check Policy
 */
export type status_check_policy = {
  checks: Array<{
    app_id: number | null;
    context: string;
  }>;
  contexts: Array<string>;
  contexts_url: string;
  strict: boolean;
  url: string;
};

/**
 * Tag
 */
export type tag = {
  commit: {
    sha: string;
    url: string;
  };
  name: string;
  node_id: string;
  tarball_url: string;
  zipball_url: string;
};

/**
 * Tag protection
 */
export type tag_protection = {
  created_at?: string;
  enabled?: boolean;
  id?: number;
  pattern: string;
  updated_at?: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type team = {
  description: string | null;
  html_url: string;
  id: number;
  members_url: string;
  name: string;
  node_id: string;
  parent: nullable_team_simple;
  permission: string;
  permissions?: {
    admin: boolean;
    maintain: boolean;
    pull: boolean;
    push: boolean;
    triage: boolean;
  };
  privacy?: string;
  repositories_url: string;
  slug: string;
  url: string;
};

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export type team_discussion = {
  author: nullable_simple_user;
  /**
   * The main text of the discussion.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  comments_count: number;
  comments_url: string;
  created_at: string;
  html_url: string;
  last_edited_at: string | null;
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private: boolean;
  reactions?: reaction_rollup;
  team_url: string;
  /**
   * The title of the discussion.
   */
  title: string;
  updated_at: string;
  url: string;
};

/**
 * A reply to a discussion within a team.
 */
export type team_discussion_comment = {
  author: nullable_simple_user;
  /**
   * The main text of the comment.
   */
  body: string;
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version: string;
  created_at: string;
  discussion_url: string;
  html_url: string;
  last_edited_at: string | null;
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   */
  number: number;
  reactions?: reaction_rollup;
  updated_at: string;
  url: string;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type team_full = {
  created_at: string;
  description: string | null;
  html_url: string;
  /**
   * Unique identifier of the team
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  members_count: number;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  node_id: string;
  organization: team_organization;
  parent?: nullable_team_simple;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: 'closed' | 'secret';
  repos_count: number;
  repositories_url: string;
  slug: string;
  updated_at: string;
  /**
   * URL for the team
   */
  url: string;
};

/**
 * The level of privacy this team should have
 */
export type privacy = 'closed' | 'secret';

/**
 * Team Membership
 */
export type team_membership = {
  /**
   * The role of the user in the team.
   */
  role: 'member' | 'maintainer';
  /**
   * The state of the user's membership in the team.
   */
  state: 'active' | 'pending';
  url: string;
};

/**
 * The role of the user in the team.
 */
export type role2 = 'member' | 'maintainer';

/**
 * Team Organization
 */
export type team_organization = {
  avatar_url: string;
  billing_email?: string | null;
  blog?: string;
  collaborators?: number | null;
  company?: string;
  created_at: string;
  default_repository_permission?: string | null;
  description: string | null;
  disk_usage?: number | null;
  email?: string;
  events_url: string;
  followers: number;
  following: number;
  has_organization_projects: boolean;
  has_repository_projects: boolean;
  hooks_url: string;
  html_url: string;
  id: number;
  is_verified?: boolean;
  issues_url: string;
  location?: string;
  login: string;
  members_allowed_repository_creation_type?: string;
  members_can_create_internal_repositories?: boolean;
  members_can_create_pages?: boolean;
  members_can_create_private_pages?: boolean;
  members_can_create_private_repositories?: boolean;
  members_can_create_public_pages?: boolean;
  members_can_create_public_repositories?: boolean;
  members_can_create_repositories?: boolean | null;
  members_can_fork_private_repositories?: boolean | null;
  members_url: string;
  name?: string;
  node_id: string;
  owned_private_repos?: number;
  plan?: {
    filled_seats?: number;
    name: string;
    private_repos: number;
    seats?: number;
    space: number;
  };
  private_gists?: number | null;
  public_gists: number;
  public_members_url: string;
  public_repos: number;
  repos_url: string;
  total_private_repos?: number;
  twitter_username?: string | null;
  two_factor_requirement_enabled?: boolean | null;
  type: string;
  updated_at: string;
  url: string;
  web_commit_signoff_required?: boolean;
};

/**
 * A team's access to a project.
 */
export type team_project = {
  body: string | null;
  columns_url: string;
  created_at: string;
  creator: simple_user;
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  number: number;
  /**
   * The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string;
  owner_url: string;
  permissions: {
    admin: boolean;
    read: boolean;
    write: boolean;
  };
  /**
   * Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean;
  state: string;
  updated_at: string;
  url: string;
};

/**
 * A team's access to a repository.
 */
export type team_repository = {
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean;
  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean;
  archive_url: string;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at: string | null;
  /**
   * The default branch of the repository.
   */
  default_branch: string;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  deployments_url: string;
  description: string | null;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  /**
   * Whether downloads are enabled.
   */
  has_downloads: boolean;
  /**
   * Whether issues are enabled.
   */
  has_issues: boolean;
  has_pages: boolean;
  /**
   * Whether projects are enabled.
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   */
  has_wiki: boolean;
  homepage: string | null;
  hooks_url: string;
  html_url: string;
  /**
   * Unique identifier of the repository
   */
  id: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: string | null;
  languages_url: string;
  license: nullable_license_simple;
  master_branch?: string;
  merges_url: string;
  milestones_url: string;
  mirror_url: string | null;
  /**
   * The name of the repository.
   */
  name: string;
  network_count?: number;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  owner: nullable_simple_user;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    pull: boolean;
    push: boolean;
    triage?: boolean;
  };
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  pulls_url: string;
  pushed_at: string | null;
  releases_url: string;
  role_name?: string;
  size: number;
  ssh_url: string;
  stargazers_count: number;
  stargazers_url: string;
  statuses_url: string;
  subscribers_count?: number;
  subscribers_url: string;
  subscription_url: string;
  svn_url: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string;
  template_repository?: nullable_repository;
  topics?: Array<string>;
  trees_url: string;
  updated_at: string | null;
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  watchers: number;
  watchers_count: number;
  /**
   * Whether to require contributors to sign off on web-based commits
   */
  web_commit_signoff_required?: boolean;
};

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export type team_simple = {
  /**
   * Description of the team
   */
  description: string | null;
  html_url: string;
  /**
   * Unique identifier of the team
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  node_id: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  repositories_url: string;
  slug: string;
  /**
   * URL for the team
   */
  url: string;
};

/**
 * Thread
 */
export type thread = {
  id: string;
  last_read_at: string | null;
  reason: string;
  repository: minimal_repository;
  subject: {
    latest_comment_url: string;
    title: string;
    type: string;
    url: string;
  };
  subscription_url: string;
  unread: boolean;
  updated_at: string;
  url: string;
};

/**
 * Thread Subscription
 */
export type thread_subscription = {
  created_at: string | null;
  ignored: boolean;
  reason: string | null;
  repository_url?: string;
  subscribed: boolean;
  thread_url?: string;
  url: string;
};

/**
 * Timeline Assigned Issue Event
 */
export type timeline_assigned_issue_event = {
  actor: simple_user;
  assignee: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

/**
 * Timeline Comment Event
 */
export type timeline_comment_event = {
  actor: simple_user;
  author_association: author_association;
  /**
   * Contents of the issue comment
   */
  body?: string;
  body_html?: string;
  body_text?: string;
  created_at: string;
  event: string;
  html_url: string;
  /**
   * Unique identifier of the issue comment
   */
  id: number;
  issue_url: string;
  node_id: string;
  performed_via_github_app?: nullable_integration;
  reactions?: reaction_rollup;
  updated_at: string;
  /**
   * URL for the issue comment
   */
  url: string;
  user: simple_user;
};

/**
 * Timeline Commit Commented Event
 */
export type timeline_commit_commented_event = {
  comments?: Array<commit_comment>;
  commit_id?: string;
  event?: string;
  node_id?: string;
};

/**
 * Timeline Committed Event
 */
export type timeline_committed_event = {
  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     */
    date: string;
    /**
     * Git email address of the user
     */
    email: string;
    /**
     * Name of the git user
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     */
    date: string;
    /**
     * Git email address of the user
     */
    email: string;
    /**
     * Name of the git user
     */
    name: string;
  };
  event?: string;
  html_url: string;
  /**
   * Message describing the purpose of the commit
   */
  message: string;
  node_id: string;
  parents: Array<{
    html_url: string;
    /**
     * SHA for the commit
     */
    sha: string;
    url: string;
  }>;
  /**
   * SHA for the commit
   */
  sha: string;
  tree: {
    /**
     * SHA for the commit
     */
    sha: string;
    url: string;
  };
  url: string;
  verification: {
    payload: string | null;
    reason: string;
    signature: string | null;
    verified: boolean;
  };
};

/**
 * Timeline Cross Referenced Event
 */
export type timeline_cross_referenced_event = {
  actor?: simple_user;
  created_at: string;
  event: string;
  source: {
    issue?: issue;
    type?: string;
  };
  updated_at: string;
};

/**
 * Timeline Event
 */
export type timeline_issue_events =
  | labeled_issue_event
  | unlabeled_issue_event
  | milestoned_issue_event
  | demilestoned_issue_event
  | renamed_issue_event
  | review_requested_issue_event
  | review_request_removed_issue_event
  | review_dismissed_issue_event
  | locked_issue_event
  | added_to_project_issue_event
  | moved_column_in_project_issue_event
  | removed_from_project_issue_event
  | converted_note_to_issue_issue_event
  | timeline_comment_event
  | timeline_cross_referenced_event
  | timeline_committed_event
  | timeline_reviewed_event
  | timeline_line_commented_event
  | timeline_commit_commented_event
  | timeline_assigned_issue_event
  | timeline_unassigned_issue_event
  | state_change_issue_event;

/**
 * Timeline Line Commented Event
 */
export type timeline_line_commented_event = {
  comments?: Array<pull_request_review_comment>;
  event?: string;
  node_id?: string;
};

/**
 * Timeline Reviewed Event
 */
export type timeline_reviewed_event = {
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  author_association: author_association;
  /**
   * The text of the review.
   */
  body: string | null;
  body_html?: string;
  body_text?: string;
  /**
   * A commit SHA for the review.
   */
  commit_id: string;
  event: string;
  html_url: string;
  /**
   * Unique identifier of the review
   */
  id: number;
  node_id: string;
  pull_request_url: string;
  state: string;
  submitted_at?: string;
  user: simple_user;
};

/**
 * Timeline Unassigned Issue Event
 */
export type timeline_unassigned_issue_event = {
  actor: simple_user;
  assignee: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

/**
 * A topic aggregates entities that are related to a subject.
 */
export type topic = {
  names: Array<string>;
};

/**
 * Topic Search Result Item
 */
export type topic_search_result_item = {
  aliases?: Array<{
    topic_relation?: {
      id?: number;
      name?: string;
      relation_type?: string;
      topic_id?: number;
    };
  }> | null;
  created_at: string;
  created_by: string | null;
  curated: boolean;
  description: string | null;
  display_name: string | null;
  featured: boolean;
  logo_url?: string | null;
  name: string;
  related?: Array<{
    topic_relation?: {
      id?: number;
      name?: string;
      relation_type?: string;
      topic_id?: number;
    };
  }> | null;
  released: string | null;
  repository_count?: number | null;
  score: number;
  short_description: string | null;
  text_matches?: search_result_text_matches;
  updated_at: string;
};

export type traffic = {
  count: number;
  timestamp: string;
  uniques: number;
};

/**
 * Unassigned Issue Event
 */
export type unassigned_issue_event = {
  actor: simple_user;
  assignee: simple_user;
  assigner: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

/**
 * Unlabeled Issue Event
 */
export type unlabeled_issue_event = {
  actor: simple_user;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  event: string;
  id: number;
  label: {
    color: string;
    name: string;
  };
  node_id: string;
  performed_via_github_app: nullable_integration;
  url: string;
};

/**
 * User Marketplace Purchase
 */
export type user_marketplace_purchase = {
  account: marketplace_account;
  billing_cycle: string;
  free_trial_ends_on: string | null;
  next_billing_date: string | null;
  on_free_trial: boolean;
  plan: marketplace_listing_plan;
  unit_count: number | null;
  updated_at: string | null;
};

/**
 * User Search Result Item
 */
export type user_search_result_item = {
  avatar_url: string;
  bio?: string | null;
  blog?: string | null;
  company?: string | null;
  created_at?: string;
  email?: string | null;
  events_url: string;
  followers?: number;
  followers_url: string;
  following?: number;
  following_url: string;
  gists_url: string;
  gravatar_id: string | null;
  hireable?: boolean | null;
  html_url: string;
  id: number;
  location?: string | null;
  login: string;
  name?: string | null;
  node_id: string;
  organizations_url: string;
  public_gists?: number;
  public_repos?: number;
  received_events_url: string;
  repos_url: string;
  score: number;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  suspended_at?: string | null;
  text_matches?: search_result_text_matches;
  type: string;
  updated_at?: string;
  url: string;
};

/**
 * Validation Error
 */
export type validation_error = {
  documentation_url: string;
  errors?: Array<{
    code: string;
    field?: string;
    index?: number;
    message?: string;
    resource?: string;
    value?: string | null | number | null | Array<string> | null;
  }>;
  message: string;
};

/**
 * Validation Error Simple
 */
export type validation_error_simple = {
  documentation_url: string;
  errors?: Array<string>;
  message: string;
};

export type verification = {
  payload: string | null;
  reason: string;
  signature: string | null;
  verified: boolean;
};

/**
 * View Traffic
 */
export type view_traffic = {
  count: number;
  uniques: number;
  views: Array<traffic>;
};

/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 */
export type wait_timer = number;

export type webhook_branch_protection_rule_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  /**
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: 'off' | 'non_admins' | 'everyone';
    allow_force_pushes_enforcement_level: 'off' | 'non_admins' | 'everyone';
    authorized_actor_names: Array<string>;
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    created_at: string;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    merge_queue_enforcement_level: 'off' | 'non_admins' | 'everyone';
    name: string;
    pull_request_reviews_enforcement_level: 'off' | 'non_admins' | 'everyone';
    repository_id: number;
    require_code_owner_review: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: 'off' | 'non_admins' | 'everyone';
    required_deployments_enforcement_level: 'off' | 'non_admins' | 'everyone';
    required_status_checks: Array<string>;
    required_status_checks_enforcement_level: 'off' | 'non_admins' | 'everyone';
    signature_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    strict_required_status_checks_policy: boolean;
    updated_at: string;
  };
  sender: simple_user;
};

export type action = 'created';

export type allow_deletions_enforcement_level = 'off' | 'non_admins' | 'everyone';

export type allow_force_pushes_enforcement_level = 'off' | 'non_admins' | 'everyone';

export type linear_history_requirement_enforcement_level = 'off' | 'non_admins' | 'everyone';

export type merge_queue_enforcement_level = 'off' | 'non_admins' | 'everyone';

export type pull_request_reviews_enforcement_level = 'off' | 'non_admins' | 'everyone';

export type required_conversation_resolution_level = 'off' | 'non_admins' | 'everyone';

export type required_deployments_enforcement_level = 'off' | 'non_admins' | 'everyone';

export type required_status_checks_enforcement_level = 'off' | 'non_admins' | 'everyone';

export type signature_requirement_enforcement_level = 'off' | 'non_admins' | 'everyone';

export type webhook_branch_protection_rule_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  /**
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: 'off' | 'non_admins' | 'everyone';
    allow_force_pushes_enforcement_level: 'off' | 'non_admins' | 'everyone';
    authorized_actor_names: Array<string>;
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    created_at: string;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    merge_queue_enforcement_level: 'off' | 'non_admins' | 'everyone';
    name: string;
    pull_request_reviews_enforcement_level: 'off' | 'non_admins' | 'everyone';
    repository_id: number;
    require_code_owner_review: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: 'off' | 'non_admins' | 'everyone';
    required_deployments_enforcement_level: 'off' | 'non_admins' | 'everyone';
    required_status_checks: Array<string>;
    required_status_checks_enforcement_level: 'off' | 'non_admins' | 'everyone';
    signature_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    strict_required_status_checks_policy: boolean;
    updated_at: string;
  };
  sender: simple_user;
};

export type action2 = 'deleted';

export type webhook_branch_protection_rule_edited = {
  action: 'edited';
  /**
   * If the action was `edited`, the changes to the rule.
   */
  changes?: {
    admin_enforced?: {
      from: boolean | null;
    };
    authorized_actor_names?: {
      from: Array<string>;
    };
    authorized_actors_only?: {
      from: boolean | null;
    };
    authorized_dismissal_actors_only?: {
      from: boolean | null;
    };
    linear_history_requirement_enforcement_level?: {
      from: 'off' | 'non_admins' | 'everyone';
    };
    required_status_checks?: {
      from: Array<string>;
    };
    required_status_checks_enforcement_level?: {
      from: 'off' | 'non_admins' | 'everyone';
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  /**
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: 'off' | 'non_admins' | 'everyone';
    allow_force_pushes_enforcement_level: 'off' | 'non_admins' | 'everyone';
    authorized_actor_names: Array<string>;
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    created_at: string;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    merge_queue_enforcement_level: 'off' | 'non_admins' | 'everyone';
    name: string;
    pull_request_reviews_enforcement_level: 'off' | 'non_admins' | 'everyone';
    repository_id: number;
    require_code_owner_review: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: 'off' | 'non_admins' | 'everyone';
    required_deployments_enforcement_level: 'off' | 'non_admins' | 'everyone';
    required_status_checks: Array<string>;
    required_status_checks_enforcement_level: 'off' | 'non_admins' | 'everyone';
    signature_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    strict_required_status_checks_policy: boolean;
    updated_at: string;
  };
  sender: simple_user;
};

export type action3 = 'edited';

export type from = 'off' | 'non_admins' | 'everyone';

export type webhook_check_run_completed = {
  action?: 'completed';
  check_run: check_run_with_simple_check_suite;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action4 = 'completed';

/**
 * The check_run.completed webhook encoded with URL encoding
 */
export type webhook_check_run_completed_form_encoded = {
  /**
   * A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type webhook_check_run_created = {
  action?: 'created';
  check_run: check_run_with_simple_check_suite;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

/**
 * The check_run.created webhook encoded with URL encoding
 */
export type webhook_check_run_created_form_encoded = {
  /**
   * A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type webhook_check_run_requested_action = {
  action: 'requested_action';
  check_run: check_run_with_simple_check_suite;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  /**
   * The action requested by the user.
   */
  requested_action?: {
    /**
     * The integrator reference of the action requested by the user.
     */
    identifier?: string;
  };
  sender: simple_user;
};

export type action5 = 'requested_action';

/**
 * The check_run.requested_action webhook encoded with URL encoding
 */
export type webhook_check_run_requested_action_form_encoded = {
  /**
   * A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type webhook_check_run_rerequested = {
  action?: 'rerequested';
  check_run: check_run_with_simple_check_suite;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action6 = 'rerequested';

/**
 * The check_run.rerequested webhook encoded with URL encoding
 */
export type webhook_check_run_rerequested_form_encoded = {
  /**
   * A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type webhook_check_suite_completed = {
  action: 'completed';
  actions_meta?: {
    [key: string]: string;
  } | null;
  /**
   * The [check_suite](https://docs.github.com/rest/reference/checks#suites).
   */
  check_suite: {
    after: string | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'merge_group'
        | 'pull_request_review_thread'
        | 'workflow_job'
        | 'merge_queue_entry'
        | 'security_and_analysis'
        | 'projects_v2_item'
        | 'secret_scanning_alert_location'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    };
    before: string | null;
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has `completed`.
     */
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | 'skipped'
          | 'startup_failure'
        )
      | null;
    created_at: string;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: Array<{
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }>;
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status: ('requested' | 'in_progress' | 'completed' | 'queued' | 'pending') | null;
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     */
    url: string;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type content_references = 'read' | 'write';

export type discussions = 'read' | 'write';

export type emails = 'read' | 'write';

export type keys = 'read' | 'write';

export type organization_plan2 = 'read' | 'write';

export type security_scanning_alert = 'read' | 'write';

export type workflows2 = 'read' | 'write';

/**
 * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
 */
export type status10 = 'requested' | 'in_progress' | 'completed' | 'queued' | 'pending';

export type webhook_check_suite_requested = {
  action: 'requested';
  actions_meta?: {
    [key: string]: string;
  } | null;
  /**
   * The [check_suite](https://docs.github.com/rest/reference/checks#suites).
   */
  check_suite: {
    after: string | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'workflow_job'
        | 'merge_queue_entry'
        | 'security_and_analysis'
        | 'secret_scanning_alert_location'
        | 'projects_v2_item'
        | 'merge_group'
        | 'repository_import'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    };
    before: string | null;
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
     */
    conclusion:
      | ('success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'stale' | 'skipped')
      | null;
    created_at: string;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: Array<{
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }>;
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status: ('requested' | 'in_progress' | 'completed' | 'queued') | null;
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     */
    url: string;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action7 = 'requested';

/**
 * The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
 */
export type conclusion4 =
  | 'success'
  | 'failure'
  | 'neutral'
  | 'cancelled'
  | 'timed_out'
  | 'action_required'
  | 'stale'
  | 'skipped';

/**
 * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
 */
export type status11 = 'requested' | 'in_progress' | 'completed' | 'queued';

export type webhook_check_suite_rerequested = {
  action: 'rerequested';
  actions_meta?: {
    rerun_info?: {
      job_ids?: Array<string>;
      plan_id?: string;
    };
  } | null;
  /**
   * The [check_suite](https://docs.github.com/rest/reference/checks#suites).
   */
  check_suite: {
    after: string | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'merge_queue_entry'
        | 'workflow_job'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    };
    before: string | null;
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
     */
    conclusion: ('success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'stale') | null;
    created_at: string;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: Array<{
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }>;
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status: ('requested' | 'in_progress' | 'completed' | 'queued') | null;
    updated_at: string;
    /**
     * URL that points to the check suite API resource.
     */
    url: string;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

/**
 * The summary conclusion for all check runs that are part of the check suite. Can be one of `success`, `failure`,` neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
 */
export type conclusion5 = 'success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'stale';

export type webhook_code_scanning_alert_appeared_in_branch = {
  action: 'appeared_in_branch';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: string | null;
    dismissed_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: ('false positive' | "won't fix" | 'sed in tests') | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: Array<string>;
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error') | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'open' | 'dismissed' | 'fixed';
    tool: {
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: repository;
  sender: simple_user;
};

export type action8 = 'appeared_in_branch';

/**
 * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
 */
export type dismissed_reason2 = 'false positive' | "won't fix" | 'used in tests';

export type webhook_code_scanning_alert_closed_by_user = {
  action: 'closed_by_user';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: string;
    dismissed_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: ('false positive' | "won't fix" | 'used in tests') | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: Array<string>;
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error') | null;
      tags?: Array<string> | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'dismissed' | 'fixed';
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: repository;
  sender: simple_user;
};

export type action9 = 'closed_by_user';

export type webhook_code_scanning_alert_created = {
  action: 'created';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: string | null;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: string;
    dismissed_by: string;
    dismissed_comment?: code_scanning_alert_dismissed_comment;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: string;
    fixed_at?: string;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    instances_url?: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: Array<string>;
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error') | null;
      tags?: Array<string> | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'open' | 'dismissed';
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    } | null;
    updated_at?: string | null;
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: repository;
  sender: simple_user;
};

export type webhook_code_scanning_alert_fixed = {
  action: 'fixed';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: string | null;
    dismissed_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: ('false positive' | "won't fix" | 'used in tests') | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    instances_url?: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: Array<string>;
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error') | null;
      tags?: Array<string> | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'fixed';
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: repository;
  sender: simple_user;
};

export type action10 = 'fixed';

export type webhook_code_scanning_alert_reopened = {
  action: 'reopened';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: string | null;
    dismissed_by: {
      [key: string]: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: string | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: Array<string>;
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error') | null;
      tags?: Array<string> | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'open' | 'dismissed' | 'fixed';
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  } | null;
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string | null;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string | null;
  repository: repository;
  sender: simple_user;
};

export type action11 = 'reopened';

export type webhook_code_scanning_alert_reopened_by_user = {
  action: 'reopened_by_user';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: string;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: string;
    dismissed_by: string;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: string;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      classifications?: Array<string>;
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error') | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'open' | 'fixed';
    tool: {
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: repository;
  sender: simple_user;
};

export type action12 = 'reopened_by_user';

export type webhook_commit_comment_created = {
  /**
   * The action performed. Can be `created`.
   */
  action: 'created';
  /**
   * The [commit comment](https://docs.github.com/rest/reference/repos#get-a-commit-comment) resource.
   */
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: string;
    html_url: string;
    /**
     * The ID of the commit comment.
     */
    id: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the commit comment.
     */
    node_id: string;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string | null;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

/**
 * Configuration object of the webhook
 */
export type webhook_config = {
  content_type?: webhook_config_content_type;
  insecure_ssl?: webhook_config_insecure_ssl;
  secret?: webhook_config_secret;
  url?: webhook_config_url;
};

/**
 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 */
export type webhook_config_content_type = string;

export type webhook_config_insecure_ssl = string | number;

/**
 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 */
export type webhook_config_secret = string;

/**
 * The URL to which the payloads will be delivered.
 */
export type webhook_config_url = string;

export type webhook_create = {
  /**
   * The repository's current description.
   */
  description: string | null;
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The name of the repository's default branch (usually `main`).
   */
  master_branch: string;
  organization?: organization_simple;
  /**
   * The pusher type for the event. Can be either `user` or a deploy key.
   */
  pusher_type: string;
  /**
   * The [`git ref`](https://docs.github.com/rest/reference/git#get-a-reference) resource.
   */
  ref: string;
  /**
   * The type of Git ref object created in the repository.
   */
  ref_type: 'tag' | 'branch';
  repository: repository;
  sender: simple_user;
};

/**
 * The type of Git ref object created in the repository.
 */
export type ref_type = 'tag' | 'branch';

export type webhook_delete = {
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The pusher type for the event. Can be either `user` or a deploy key.
   */
  pusher_type: string;
  /**
   * The [`git ref`](https://docs.github.com/rest/reference/git#get-a-reference) resource.
   */
  ref: string;
  /**
   * The type of Git ref object deleted in the repository.
   */
  ref_type: 'tag' | 'branch';
  repository: repository;
  sender: simple_user;
};

export type webhook_dependabot_alert_created = {
  action: 'created';
  alert: dependabot_alert;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_dependabot_alert_dismissed = {
  action: 'dismissed';
  alert: dependabot_alert;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action13 = 'dismissed';

export type webhook_dependabot_alert_fixed = {
  action: 'fixed';
  alert: dependabot_alert;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_dependabot_alert_reintroduced = {
  action: 'reintroduced';
  alert: dependabot_alert;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action14 = 'reintroduced';

export type webhook_dependabot_alert_reopened = {
  action: 'reopened';
  alert: dependabot_alert;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_deploy_key_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [`deploy key`](https://docs.github.com/rest/reference/deployments#get-a-deploy-key) resource.
   */
  key: {
    added_by?: string | null;
    created_at: string;
    id: number;
    key: string;
    last_used?: string | null;
    read_only: boolean;
    title: string;
    url: string;
    verified: boolean;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_deploy_key_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [`deploy key`](https://docs.github.com/rest/reference/deployments#get-a-deploy-key) resource.
   */
  key: {
    added_by?: string | null;
    created_at: string;
    id: number;
    key: string;
    last_used?: string | null;
    read_only: boolean;
    title: string;
    url: string;
    verified: boolean;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_deployment_created = {
  action: 'created';
  /**
   * The [deployment](https://docs.github.com/rest/reference/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload:
      | {
          [key: string]: string;
        }
      | string;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'workflow_job'
        | 'pull_request_review_thread'
        | 'merge_queue_entry'
        | 'secret_scanning_alert_location'
        | 'merge_group'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    production_environment?: boolean;
    ref: string;
    repository_url: string;
    sha: string;
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    url: string;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow: {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  } | null;
  workflow_run: {
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion: ('success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'stale') | null;
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: string;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string;
    pull_requests: Array<{
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }>;
    referenced_workflows?: Array<{
      path: string;
      ref?: string;
      sha: string;
    }> | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    run_started_at: string;
    status: 'requested' | 'in_progress' | 'completed' | 'queued' | 'waiting' | 'pending';
    triggering_actor?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url?: string;
  } | null;
};

export type organization_projects2 = 'read' | 'write';

export type repository_projects2 = 'read' | 'write';

export type status12 = 'requested' | 'in_progress' | 'completed' | 'queued' | 'waiting' | 'pending';

export type webhook_deployment_status_created = {
  action: 'created';
  check_run?: {
    completed_at: string | null;
    /**
     * The result of the completed check run. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, `action_required` or `stale`. This value will be `null` until the check run has completed.
     */
    conclusion:
      | ('success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'stale' | 'skipped')
      | null;
    details_url: string;
    external_id: string;
    /**
     * The SHA of the commit that is being checked.
     */
    head_sha: string;
    html_url: string;
    /**
     * The id of the check.
     */
    id: number;
    /**
     * The name of the check run.
     */
    name: string;
    node_id: string;
    started_at: string;
    /**
     * The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
     */
    status: 'queued' | 'in_progress' | 'completed' | 'waiting' | 'pending';
    url: string;
  } | null;
  /**
   * The [deployment](https://docs.github.com/rest/reference/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload:
      | (
          | string
          | {
              [key: string]: string;
            }
        )
      | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'merge_queue_entry'
        | 'workflow_job'
        | 'pull_request_review_thread'
        | 'secret_scanning_alert_location'
        | 'merge_group'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    production_environment?: boolean;
    ref: string;
    repository_url: string;
    sha: string;
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    url: string;
  };
  /**
   * The [deployment status](https://docs.github.com/rest/reference/deployments#list-deployment-statuses).
   */
  deployment_status: {
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    deployment_url: string;
    /**
     * The optional human-readable description added to the status.
     */
    description: string;
    environment: string;
    environment_url?: string;
    id: number;
    log_url?: string;
    node_id: string;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'merge_queue_entry'
        | 'workflow_job'
        | 'merge_group'
        | 'secret_scanning_alert_location'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    repository_url: string;
    /**
     * The new state. Can be `pending`, `success`, `failure`, or `error`.
     */
    state: string;
    /**
     * The optional link added to the status.
     */
    target_url: string;
    updated_at: string;
    url: string;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow?: {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  } | null;
  workflow_run?: {
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | 'startup_failure'
        )
      | null;
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: string;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string;
    pull_requests: Array<{
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }>;
    referenced_workflows?: Array<{
      path: string;
      ref?: string;
      sha: string;
    }> | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    run_started_at: string;
    status: 'requested' | 'in_progress' | 'completed' | 'queued' | 'waiting' | 'pending';
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url?: string;
  } | null;
};

export type webhook_discussion_answered = {
  action: 'answered';
  answer: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: string;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action15 = 'answered';

export type webhook_discussion_category_changed = {
  action: 'category_changed';
  changes: {
    category: {
      from: {
        created_at: string;
        description: string;
        emoji: string;
        id: number;
        is_answerable: boolean;
        name: string;
        node_id?: string;
        repository_id: number;
        slug: string;
        updated_at: string;
      };
    };
  };
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action16 = 'category_changed';

export type webhook_discussion_comment_created = {
  action: 'created';
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_discussion_comment_deleted = {
  action: 'deleted';
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_discussion_comment_edited = {
  action: 'edited';
  changes: {
    body: {
      from: string;
    };
  };
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_discussion_created = {
  action: 'created';
  discussion: {
    active_lock_reason: string | null;
    answer_chosen_at: string | null;
    answer_chosen_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    answer_html_url: string | null;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string | null;
    category: {
      created_at: string;
      description: string;
      emoji: string;
      id: number;
      is_answerable: boolean;
      name: string;
      node_id?: string;
      repository_id: number;
      slug: string;
      updated_at: string;
    };
    comments: number;
    created_at: string;
    html_url: string;
    id: number;
    locked: boolean;
    node_id: string;
    number: number;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    state: 'open' | 'locked' | 'converting' | 'transferring';
    timeline_url?: string;
    title: string;
    updated_at: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string;
    answer_chosen_at: string;
    answer_chosen_by: string;
    answer_html_url: string | null;
    author_association?: string;
    body?: string | null;
    category?: {
      created_at?: string;
      description?: string;
      emoji?: string;
      id?: number;
      is_answerable?: boolean;
      name?: string;
      node_id?: string;
      repository_id?: number;
      slug?: string;
      updated_at?: string;
    };
    comments?: number;
    created_at?: string;
    html_url?: string;
    id?: number;
    locked: boolean;
    node_id?: string;
    number?: number;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state: 'open' | 'converting' | 'transferring';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_discussion_deleted = {
  action: 'deleted';
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_discussion_edited = {
  action: 'edited';
  changes?: {
    body?: {
      from: string;
    };
    title?: {
      from: string;
    };
  };
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_discussion_labeled = {
  action: 'labeled';
  discussion: {
    active_lock_reason: string | null;
    answer_chosen_at: string | null;
    answer_chosen_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    answer_html_url: string | null;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string | null;
    category: {
      created_at: string;
      description: string;
      emoji: string;
      id: number;
      is_answerable: boolean;
      name: string;
      node_id?: string;
      repository_id: number;
      slug: string;
      updated_at: string;
    };
    comments: number;
    created_at: string;
    html_url: string;
    id: number;
    locked: boolean;
    node_id: string;
    number: number;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    state: 'open' | 'locked' | 'converting' | 'transferring';
    timeline_url?: string;
    title: string;
    updated_at: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action17 = 'labeled';

export type webhook_discussion_locked = {
  action: 'locked';
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action18 = 'locked';

export type webhook_discussion_pinned = {
  action: 'pinned';
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action19 = 'pinned';

export type webhook_discussion_transferred = {
  action: 'transferred';
  changes: {
    new_discussion: {
      active_lock_reason: string | null;
      answer_chosen_at: string | null;
      answer_chosen_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      answer_html_url: string | null;
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      body: string;
      category: {
        created_at: string;
        description: string;
        emoji: string;
        id: number;
        is_answerable: boolean;
        name: string;
        node_id?: string;
        repository_id: number;
        slug: string;
        updated_at: string;
      };
      comments: number;
      created_at: string;
      html_url: string;
      id: number;
      locked: boolean;
      node_id: string;
      number: number;
      reactions?: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      state: 'open' | 'locked' | 'converting' | 'transferring';
      timeline_url?: string;
      title: string;
      updated_at: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    /**
     * A git repository
     */
    new_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to allow private forks
       */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      archive_url: string;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: number | string;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      deployments_url: string;
      description: string | null;
      /**
       * Returns whether or not this repository is disabled.
       */
      disabled?: boolean;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      /**
       * Whether discussions are enabled.
       */
      has_discussions: boolean;
      /**
       * Whether downloads are enabled.
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       */
      has_wiki: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        url: string | null;
      } | null;
      master_branch?: string;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      public?: boolean;
      pulls_url: string;
      pushed_at: (number | string) | null;
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      topics: Array<string>;
      trees_url: string;
      updated_at: string;
      url: string;
      visibility: 'public' | 'private' | 'internal';
      watchers: number;
      watchers_count: number;
      /**
       * Whether to require contributors to sign off on web-based commits
       */
      web_commit_signoff_required?: boolean;
    };
  };
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action20 = 'transferred';

export type visibility3 = 'public' | 'private' | 'internal';

export type webhook_discussion_unanswered = {
  action: 'unanswered';
  discussion: discussion;
  old_answer: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: string;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: organization_simple;
  repository: repository;
  sender?: simple_user;
};

export type action21 = 'unanswered';

export type webhook_discussion_unlabeled = {
  action: 'unlabeled';
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action22 = 'unlabeled';

export type webhook_discussion_unlocked = {
  action: 'unlocked';
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action23 = 'unlocked';

export type webhook_discussion_unpinned = {
  action: 'unpinned';
  discussion: discussion;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action24 = 'unpinned';

/**
 * A user forks a repository.
 */
export type webhook_fork = {
  enterprise?: enterprise;
  /**
   * The created [`repository`](https://docs.github.com/rest/reference/repos#get-a-repository) resource.
   */
  forkee: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | string) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
    /**
     * Whether to require contributors to sign off on web-based commits
     */
    web_commit_signoff_required?: boolean;
  } & {
    allow_forking?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    deployments_url?: string;
    description?: string | null;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: boolean;
    forks?: number;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string | null;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: string;
    languages_url?: string;
    license?: {
      [key: string]: string;
    } | null;
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: string;
    name?: string;
    node_id?: string;
    notifications_url?: string;
    open_issues?: number;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    private?: boolean;
    public?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    topics?: Array<string>;
    trees_url?: string;
    updated_at?: string;
    url?: string;
    visibility?: string;
    watchers?: number;
    watchers_count?: number;
  };
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_github_app_authorization_revoked = {
  action: 'revoked';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  sender: simple_user;
};

export type action25 = 'revoked';

export type webhook_gollum = {
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The pages that were updated.
   */
  pages: Array<{
    /**
     * The action that was performed on the page. Can be `created` or `edited`.
     */
    action: 'created' | 'edited';
    /**
     * Points to the HTML wiki page.
     */
    html_url: string;
    /**
     * The name of the page.
     */
    page_name: string;
    /**
     * The latest commit SHA of the page.
     */
    sha: string;
    summary: string | null;
    /**
     * The current page title.
     */
    title: string;
  }>;
  repository: repository;
  sender: simple_user;
};

export type webhook_installation_created = {
  action: 'created';
  enterprise?: enterprise;
  installation: installation;
  organization?: organization_simple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: Array<{
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }>;
  repository?: repository;
  requester?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  sender: simple_user;
};

export type webhook_installation_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation: installation;
  organization?: organization_simple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: Array<{
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }>;
  repository?: repository;
  requester?: string;
  sender: simple_user;
};

export type webhook_installation_new_permissions_accepted = {
  action: 'new_permissions_accepted';
  enterprise?: enterprise;
  installation: installation;
  organization?: organization_simple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: Array<{
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }>;
  repository?: repository;
  requester?: string;
  sender: simple_user;
};

export type action26 = 'new_permissions_accepted';

export type webhook_installation_repositories_added = {
  action: 'added';
  enterprise?: enterprise;
  installation: installation;
  organization?: organization_simple;
  /**
   * An array of repository objects, which were added to the installation.
   */
  repositories_added: Array<{
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }>;
  /**
   * An array of repository objects, which were removed from the installation.
   */
  repositories_removed: Array<{
    full_name?: string;
    /**
     * Unique identifier of the repository
     */
    id?: number;
    /**
     * The name of the repository.
     */
    name?: string;
    node_id?: string;
    /**
     * Whether the repository is private or public.
     */
    private?: boolean;
  }>;
  repository?: repository;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: 'all' | 'selected';
  requester: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  sender: simple_user;
};

export type action27 = 'added';

export type webhook_installation_repositories_removed = {
  action: 'removed';
  enterprise?: enterprise;
  installation: installation;
  organization?: organization_simple;
  /**
   * An array of repository objects, which were added to the installation.
   */
  repositories_added: Array<{
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }>;
  /**
   * An array of repository objects, which were removed from the installation.
   */
  repositories_removed: Array<{
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }>;
  repository?: repository;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: 'all' | 'selected';
  requester: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  sender: simple_user;
};

export type action28 = 'removed';

export type webhook_installation_suspend = {
  action: 'suspend';
  enterprise?: enterprise;
  installation: installation;
  organization?: organization_simple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: Array<{
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }>;
  repository?: repository;
  requester?: string;
  sender: simple_user;
};

export type action29 = 'suspend';

export type webhook_installation_target_renamed = {
  account: {
    avatar_url: string;
    created_at?: string;
    description?: string;
    events_url?: string;
    followers?: number;
    followers_url?: string;
    following?: number;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    hooks_url?: string;
    html_url: string;
    id: number;
    is_verified?: boolean;
    issues_url?: string;
    login?: string;
    members_url?: string;
    name?: string;
    node_id: string;
    organizations_url?: string;
    public_gists?: number;
    public_members_url?: string;
    public_repos?: number;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    slug?: string;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    updated_at?: string;
    url?: string;
    website_url?: string;
  };
  action: string;
  changes: {
    login?: {
      from: string;
    };
    slug?: {
      from: string;
    };
  };
  enterprise?: enterprise;
  installation: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  sender?: simple_user;
  target_type: string;
};

export type webhook_installation_unsuspend = {
  action: 'unsuspend';
  enterprise?: enterprise;
  installation: installation;
  organization?: organization_simple;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: Array<{
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }>;
  repository?: repository;
  requester?: string;
  sender: simple_user;
};

export type action30 = 'unsuspend';

export type webhook_issue_comment_created = {
  action: 'created';
  /**
   * The [comment](https://docs.github.com/rest/reference/issues#comments) itself.
   */
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue comment
     */
    body: string;
    created_at: string;
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    issue_url: string;
    node_id: string;
    performed_via_github_app: nullable_integration;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: string;
    /**
     * URL for the issue comment
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) the comment belongs to.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url?: string;
    locked: boolean;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: {
      [key: string]: string;
    } | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type active_lock_reason = 'resolved' | 'off-topic' | 'too heated' | 'spam';

export type webhook_issue_comment_deleted = {
  action: 'deleted';
  /**
   * The [comment](https://docs.github.com/rest/reference/issues#comments) itself.
   */
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue comment
     */
    body: string;
    created_at: string;
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    issue_url: string;
    node_id: string;
    performed_via_github_app: nullable_integration;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: string;
    /**
     * URL for the issue comment
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) the comment belongs to.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url?: string;
    locked: boolean;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: {
      [key: string]: string;
    } | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type type7 = 'Bot' | 'User' | 'Organization' | 'Mannequin';

export type webhook_issue_comment_edited = {
  action: 'edited';
  /**
   * The changes to the comment.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
  };
  /**
   * The [comment](https://docs.github.com/rest/reference/issues#comments) itself.
   */
  comment: {
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue comment
     */
    body: string;
    created_at: string;
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    issue_url: string;
    node_id: string;
    performed_via_github_app: nullable_integration;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: string;
    /**
     * URL for the issue comment
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) the comment belongs to.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url?: string;
    locked: boolean;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: {
      [key: string]: string;
    } | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_assigned = {
  /**
   * The action that was performed.
   */
  action: 'assigned';
  assignee?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

/**
 * The action that was performed.
 */
export type action31 = 'assigned';

export type webhook_issues_closed = {
  /**
   * The action that was performed.
   */
  action: 'closed';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'security_and_analysis'
        | 'reminder'
        | 'pull_request_review_thread'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    labels_url?: string;
    locked?: boolean;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: {
      [key: string]: string;
    } | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state: 'closed' | 'open';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

/**
 * The action that was performed.
 */
export type action32 = 'closed';

export type webhook_issues_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_demilestoned = {
  action: 'demilestoned';
  enterprise?: enterprise;
  installation?: simple_installation;
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    labels_url?: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: {
      [key: string]: string;
    } | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state?: string;
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  /**
   * A collection of related issues and pull requests.
   */
  milestone?: {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: string;
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action33 = 'demilestoned';

export type webhook_issues_edited = {
  action: 'edited';
  /**
   * The changes to the issue.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title.
       */
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'security_and_analysis'
        | 'pull_request_review_thread'
        | 'reminder'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_labeled = {
  action: 'labeled';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'reminder'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_locked = {
  action: 'locked';
  enterprise?: enterprise;
  installation?: simple_installation;
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'security_and_analysis'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  } & {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    labels_url?: string;
    locked: boolean;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: {
      [key: string]: string;
    } | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state?: string;
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_milestoned = {
  action: 'milestoned';
  enterprise?: enterprise;
  installation?: simple_installation;
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    labels_url?: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    };
    node_id?: string;
    number?: number;
    performed_via_github_app?: {
      [key: string]: string;
    } | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state?: string;
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: string;
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action34 = 'milestoned';

export type webhook_issues_opened = {
  action: 'opened';
  changes?: {
    /**
     * The [issue](https://docs.github.com/rest/reference/issues) itself.
     */
    old_issue: {
      active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
      assignee?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      assignees: Array<{
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null>;
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      /**
       * Contents of the issue
       */
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean;
      events_url: string;
      html_url: string;
      id: number;
      labels?: Array<{
        /**
         * 6-character hex code, without the leading #, identifying the color
         */
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        /**
         * The name of the label.
         */
        name: string;
        node_id: string;
        /**
         * URL for the label
         */
        url: string;
      }>;
      labels_url: string;
      locked?: boolean;
      /**
       * A collection of related issues and pull requests.
       */
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        /**
         * The number of the milestone.
         */
        number: number;
        open_issues: number;
        /**
         * The state of the milestone.
         */
        state: 'open' | 'closed';
        /**
         * The title of the milestone.
         */
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      /**
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        created_at: string | null;
        description: string | null;
        /**
         * The list of events for the GitHub app
         */
        events?: Array<
          | 'branch_protection_rule'
          | 'check_run'
          | 'check_suite'
          | 'code_scanning_alert'
          | 'commit_comment'
          | 'content_reference'
          | 'create'
          | 'delete'
          | 'deployment'
          | 'deployment_review'
          | 'deployment_status'
          | 'deploy_key'
          | 'discussion'
          | 'discussion_comment'
          | 'fork'
          | 'gollum'
          | 'issues'
          | 'issue_comment'
          | 'label'
          | 'member'
          | 'membership'
          | 'milestone'
          | 'organization'
          | 'org_block'
          | 'page_build'
          | 'project'
          | 'project_card'
          | 'project_column'
          | 'public'
          | 'pull_request'
          | 'pull_request_review'
          | 'pull_request_review_comment'
          | 'push'
          | 'registry_package'
          | 'release'
          | 'repository'
          | 'repository_dispatch'
          | 'secret_scanning_alert'
          | 'star'
          | 'status'
          | 'team'
          | 'team_add'
          | 'watch'
          | 'workflow_dispatch'
          | 'workflow_run'
        >;
        external_url: string | null;
        html_url: string;
        /**
         * Unique identifier of the GitHub app
         */
        id: number | null;
        /**
         * The name of the GitHub app
         */
        name: string;
        node_id: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * The set of permissions for the GitHub app
         */
        permissions?: {
          actions?: 'read' | 'write';
          administration?: 'read' | 'write';
          checks?: 'read' | 'write';
          content_references?: 'read' | 'write';
          contents?: 'read' | 'write';
          deployments?: 'read' | 'write';
          discussions?: 'read' | 'write';
          emails?: 'read' | 'write';
          environments?: 'read' | 'write';
          issues?: 'read' | 'write';
          keys?: 'read' | 'write';
          members?: 'read' | 'write';
          metadata?: 'read' | 'write';
          organization_administration?: 'read' | 'write';
          organization_hooks?: 'read' | 'write';
          organization_packages?: 'read' | 'write';
          organization_plan?: 'read' | 'write';
          organization_projects?: 'read' | 'write';
          organization_secrets?: 'read' | 'write';
          organization_self_hosted_runners?: 'read' | 'write';
          organization_user_blocking?: 'read' | 'write';
          packages?: 'read' | 'write';
          pages?: 'read' | 'write';
          pull_requests?: 'read' | 'write';
          repository_hooks?: 'read' | 'write';
          repository_projects?: 'read' | 'write';
          secret_scanning_alerts?: 'read' | 'write';
          secrets?: 'read' | 'write';
          security_events?: 'read' | 'write';
          security_scanning_alert?: 'read' | 'write';
          single_file?: 'read' | 'write';
          statuses?: 'read' | 'write';
          team_discussions?: 'read' | 'write';
          vulnerability_alerts?: 'read' | 'write';
          workflows?: 'read' | 'write';
        };
        /**
         * The slug name of the GitHub app
         */
        slug?: string;
        updated_at: string | null;
      } | null;
      pull_request?: {
        diff_url?: string;
        html_url?: string;
        merged_at?: string | null;
        patch_url?: string;
        url?: string;
      };
      reactions: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      /**
       * State of the issue; either 'open' or 'closed'
       */
      state?: 'open' | 'closed';
      state_reason?: string | null;
      timeline_url?: string;
      /**
       * Title of the issue
       */
      title: string;
      updated_at: string;
      /**
       * URL for the issue
       */
      url: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    } | null;
    /**
     * A git repository
     */
    old_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to allow private forks
       */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      archive_url: string;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: number | string;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      deployments_url: string;
      description: string | null;
      /**
       * Returns whether or not this repository is disabled.
       */
      disabled?: boolean;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      /**
       * Whether downloads are enabled.
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       */
      has_wiki: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        url: string | null;
      } | null;
      master_branch?: string;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      public?: boolean;
      pulls_url: string;
      pushed_at: (number | string) | null;
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      topics: Array<string>;
      trees_url: string;
      updated_at: string;
      url: string;
      visibility: 'public' | 'private' | 'internal';
      watchers: number;
      watchers_count: number;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'security_and_analysis'
        | 'pull_request_review_thread'
        | 'reminder'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action35 = 'opened';

export type webhook_issues_pinned = {
  action: 'pinned';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_reopened = {
  action: 'reopened';
  enterprise?: enterprise;
  installation?: simple_installation;
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'reminder'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    labels_url?: string;
    locked?: boolean;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: {
      [key: string]: string;
    } | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state: 'open' | 'closed';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_transferred = {
  action: 'transferred';
  changes: {
    /**
     * The [issue](https://docs.github.com/rest/reference/issues) itself.
     */
    new_issue: {
      active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
      assignee?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      assignees: Array<{
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null>;
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      /**
       * Contents of the issue
       */
      body: string | null;
      closed_at: string | null;
      comments: number;
      comments_url: string;
      created_at: string;
      draft?: boolean;
      events_url: string;
      html_url: string;
      id: number;
      labels?: Array<{
        /**
         * 6-character hex code, without the leading #, identifying the color
         */
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        /**
         * The name of the label.
         */
        name: string;
        node_id: string;
        /**
         * URL for the label
         */
        url: string;
      }>;
      labels_url: string;
      locked?: boolean;
      /**
       * A collection of related issues and pull requests.
       */
      milestone: {
        closed_at: string | null;
        closed_issues: number;
        created_at: string;
        creator: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        description: string | null;
        due_on: string | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        /**
         * The number of the milestone.
         */
        number: number;
        open_issues: number;
        /**
         * The state of the milestone.
         */
        state: 'open' | 'closed';
        /**
         * The title of the milestone.
         */
        title: string;
        updated_at: string;
        url: string;
      } | null;
      node_id: string;
      number: number;
      /**
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        created_at: string | null;
        description: string | null;
        /**
         * The list of events for the GitHub app
         */
        events?: Array<
          | 'branch_protection_rule'
          | 'check_run'
          | 'check_suite'
          | 'code_scanning_alert'
          | 'commit_comment'
          | 'content_reference'
          | 'create'
          | 'delete'
          | 'deployment'
          | 'deployment_review'
          | 'deployment_status'
          | 'deploy_key'
          | 'discussion'
          | 'discussion_comment'
          | 'fork'
          | 'gollum'
          | 'issues'
          | 'issue_comment'
          | 'label'
          | 'member'
          | 'membership'
          | 'milestone'
          | 'organization'
          | 'org_block'
          | 'page_build'
          | 'project'
          | 'project_card'
          | 'project_column'
          | 'public'
          | 'pull_request'
          | 'pull_request_review'
          | 'pull_request_review_comment'
          | 'push'
          | 'registry_package'
          | 'release'
          | 'repository'
          | 'repository_dispatch'
          | 'secret_scanning_alert'
          | 'star'
          | 'status'
          | 'team'
          | 'team_add'
          | 'watch'
          | 'workflow_dispatch'
          | 'workflow_run'
        >;
        external_url: string | null;
        html_url: string;
        /**
         * Unique identifier of the GitHub app
         */
        id: number | null;
        /**
         * The name of the GitHub app
         */
        name: string;
        node_id: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * The set of permissions for the GitHub app
         */
        permissions?: {
          actions?: 'read' | 'write';
          administration?: 'read' | 'write';
          checks?: 'read' | 'write';
          content_references?: 'read' | 'write';
          contents?: 'read' | 'write';
          deployments?: 'read' | 'write';
          discussions?: 'read' | 'write';
          emails?: 'read' | 'write';
          environments?: 'read' | 'write';
          issues?: 'read' | 'write';
          keys?: 'read' | 'write';
          members?: 'read' | 'write';
          metadata?: 'read' | 'write';
          organization_administration?: 'read' | 'write';
          organization_hooks?: 'read' | 'write';
          organization_packages?: 'read' | 'write';
          organization_plan?: 'read' | 'write';
          organization_projects?: 'read' | 'write';
          organization_secrets?: 'read' | 'write';
          organization_self_hosted_runners?: 'read' | 'write';
          organization_user_blocking?: 'read' | 'write';
          packages?: 'read' | 'write';
          pages?: 'read' | 'write';
          pull_requests?: 'read' | 'write';
          repository_hooks?: 'read' | 'write';
          repository_projects?: 'read' | 'write';
          secret_scanning_alerts?: 'read' | 'write';
          secrets?: 'read' | 'write';
          security_events?: 'read' | 'write';
          security_scanning_alert?: 'read' | 'write';
          single_file?: 'read' | 'write';
          statuses?: 'read' | 'write';
          team_discussions?: 'read' | 'write';
          vulnerability_alerts?: 'read' | 'write';
          workflows?: 'read' | 'write';
        };
        /**
         * The slug name of the GitHub app
         */
        slug?: string;
        updated_at: string | null;
      } | null;
      pull_request?: {
        diff_url?: string;
        html_url?: string;
        merged_at?: string | null;
        patch_url?: string;
        url?: string;
      };
      reactions: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      /**
       * State of the issue; either 'open' or 'closed'
       */
      state?: 'open' | 'closed';
      state_reason?: string | null;
      timeline_url?: string;
      /**
       * Title of the issue
       */
      title: string;
      updated_at: string;
      /**
       * URL for the issue
       */
      url: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    /**
     * A git repository
     */
    new_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to allow private forks
       */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      archive_url: string;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: number | string;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      deployments_url: string;
      description: string | null;
      /**
       * Returns whether or not this repository is disabled.
       */
      disabled?: boolean;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      /**
       * Whether discussions are enabled.
       */
      has_discussions: boolean;
      /**
       * Whether downloads are enabled.
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       */
      has_wiki: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        url: string | null;
      } | null;
      master_branch?: string;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      public?: boolean;
      pulls_url: string;
      pushed_at: (number | string) | null;
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      topics: Array<string>;
      trees_url: string;
      updated_at: string;
      url: string;
      visibility: 'public' | 'private' | 'internal';
      watchers: number;
      watchers_count: number;
      /**
       * Whether to require contributors to sign off on web-based commits
       */
      web_commit_signoff_required?: boolean;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_unassigned = {
  /**
   * The action that was performed.
   */
  action: 'unassigned';
  assignee?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
    url?: string;
  } | null;
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

/**
 * The action that was performed.
 */
export type action36 = 'unassigned';

export type webhook_issues_unlabeled = {
  action: 'unlabeled';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_unlocked = {
  action: 'unlocked';
  enterprise?: enterprise;
  installation?: simple_installation;
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  } & {
    active_lock_reason: string;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    labels_url?: string;
    locked: boolean;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: string;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state?: string;
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_issues_unpinned = {
  action: 'unpinned';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The [issue](https://docs.github.com/rest/reference/issues) itself.
   */
  issue: {
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: string | null;
    comments: number;
    comments_url: string;
    created_at: string;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    labels_url: string;
    locked?: boolean;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: string | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: Array<
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      >;
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: string | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: string | null;
      patch_url?: string;
      url?: string;
    };
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: string;
    /**
     * URL for the issue
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_label_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender?: simple_user;
};

export type webhook_label_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_label_edited = {
  action: 'edited';
  /**
   * The changes to the label if the action was `edited`.
   */
  changes?: {
    color?: {
      /**
       * The previous version of the color if the action was `edited`.
       */
      from: string;
    };
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_marketplace_purchase_cancelled = {
  action: 'cancelled';
  effective_date: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    account?: {
      id?: number;
      login?: string;
      node_id?: string;
      organization_billing_email?: string | null;
      type?: string;
    };
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    next_billing_date: string | null;
    on_free_trial?: boolean;
    plan?: {
      bullets?: Array<string | null>;
      description?: string;
      has_free_trial?: boolean;
      id?: number;
      monthly_price_in_cents?: number;
      name?: string;
      price_model?: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name?: string | null;
      yearly_price_in_cents?: number;
    };
    unit_count?: number;
  };
  organization?: organization_simple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: repository;
  sender: simple_user;
};

export type action37 = 'cancelled';

export type webhook_marketplace_purchase_changed = {
  action: 'changed';
  effective_date: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    account?: {
      id?: number;
      login?: string;
      node_id?: string;
      organization_billing_email?: string | null;
      type?: string;
    };
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    next_billing_date: string | null;
    on_free_trial?: boolean;
    plan?: {
      bullets?: Array<string | null>;
      description?: string;
      has_free_trial?: boolean;
      id?: number;
      monthly_price_in_cents?: number;
      name?: string;
      price_model?: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name?: string | null;
      yearly_price_in_cents?: number;
    };
    unit_count?: number;
  };
  organization?: organization_simple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean | null;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: repository;
  sender: simple_user;
};

export type action38 = 'changed';

export type webhook_marketplace_purchase_pending_change = {
  action: 'pending_change';
  effective_date: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    account?: {
      id?: number;
      login?: string;
      node_id?: string;
      organization_billing_email?: string | null;
      type?: string;
    };
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    next_billing_date: string | null;
    on_free_trial?: boolean;
    plan?: {
      bullets?: Array<string | null>;
      description?: string;
      has_free_trial?: boolean;
      id?: number;
      monthly_price_in_cents?: number;
      name?: string;
      price_model?: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name?: string | null;
      yearly_price_in_cents?: number;
    };
    unit_count?: number;
  };
  organization?: organization_simple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: repository;
  sender: simple_user;
};

export type action39 = 'pending_change';

export type webhook_marketplace_purchase_pending_change_cancelled = {
  action: 'pending_change_cancelled';
  effective_date: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    next_billing_date: string;
  };
  organization?: organization_simple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: repository;
  sender: simple_user;
};

export type action40 = 'pending_change_cancelled';

export type webhook_marketplace_purchase_purchased = {
  action: 'purchased';
  effective_date: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    account?: {
      id?: number;
      login?: string;
      node_id?: string;
      organization_billing_email?: string | null;
      type?: string;
    };
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    next_billing_date: string | null;
    on_free_trial?: boolean;
    plan?: {
      bullets?: Array<string | null>;
      description?: string;
      has_free_trial?: boolean;
      id?: number;
      monthly_price_in_cents?: number;
      name?: string;
      price_model?: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name?: string | null;
      yearly_price_in_cents?: number;
    };
    unit_count?: number;
  };
  organization?: organization_simple;
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: Array<string>;
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: repository;
  sender: simple_user;
};

export type action41 = 'purchased';

export type webhook_member_added = {
  action: 'added';
  changes?: {
    permission?: {
      to: 'write' | 'admin' | 'read';
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type to = 'write' | 'admin' | 'read';

export type webhook_member_edited = {
  action: 'edited';
  /**
   * The changes to the collaborator permissions
   */
  changes: {
    old_permission?: {
      /**
       * The previous permissions of the collaborator if the action was edited.
       */
      from: string;
    };
    permission?: {
      from?: string | null;
      to?: string | null;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_member_removed = {
  action: 'removed';
  enterprise?: enterprise;
  installation?: simple_installation;
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_membership_added = {
  action: 'added';
  enterprise?: enterprise;
  installation?: simple_installation;
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization: organization_simple;
  repository?: repository;
  /**
   * The scope of the membership. Currently, can only be `team`.
   */
  scope: 'team';
  sender: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};

/**
 * The scope of the membership. Currently, can only be `team`.
 */
export type scope3 = 'team';

export type privacy2 = 'open' | 'closed' | 'secret';

export type webhook_membership_removed = {
  action: 'removed';
  enterprise?: enterprise;
  installation?: simple_installation;
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization: organization_simple;
  repository?: repository;
  /**
   * The scope of the membership. Currently, can only be `team`.
   */
  scope: 'team' | 'organization';
  sender: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};

/**
 * The scope of the membership. Currently, can only be `team`.
 */
export type scope4 = 'team' | 'organization';

export type webhook_merge_group_checks_requested = {
  action: string;
  installation?: simple_installation;
  merge_group: {
    /**
     * The full ref of the branch the merge group will be merged into.
     */
    base_ref: string;
    /**
     * The SHA of the merge group's parent commit.
     */
    base_sha: string;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The full ref of the merge group.
     */
    head_ref: string;
    /**
     * The SHA of the merge group.
     */
    head_sha: string;
  };
  organization?: organization_simple;
  repository?: repository;
  sender?: simple_user;
};

export type webhook_meta_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  /**
   * The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.
   */
  hook: {
    active: boolean;
    config: {
      content_type: 'json' | 'form';
      insecure_ssl: string;
      secret?: string;
      url: string;
    };
    created_at: string;
    events: Array<
      | '*'
      | 'branch_protection_rule'
      | 'check_run'
      | 'check_suite'
      | 'code_scanning_alert'
      | 'commit_comment'
      | 'create'
      | 'delete'
      | 'deployment'
      | 'deployment_status'
      | 'deploy_key'
      | 'discussion'
      | 'discussion_comment'
      | 'fork'
      | 'gollum'
      | 'issues'
      | 'issue_comment'
      | 'label'
      | 'member'
      | 'membership'
      | 'meta'
      | 'milestone'
      | 'organization'
      | 'org_block'
      | 'package'
      | 'page_build'
      | 'project'
      | 'project_card'
      | 'project_column'
      | 'public'
      | 'pull_request'
      | 'pull_request_review'
      | 'pull_request_review_comment'
      | 'pull_request_review_thread'
      | 'push'
      | 'registry_package'
      | 'release'
      | 'repository'
      | 'repository_import'
      | 'repository_vulnerability_alert'
      | 'secret_scanning_alert'
      | 'secret_scanning_alert_location'
      | 'security_and_analysis'
      | 'star'
      | 'status'
      | 'team'
      | 'team_add'
      | 'watch'
      | 'workflow_job'
      | 'workflow_run'
      | 'repository_dispatch'
      | 'projects_v2_item'
    >;
    id: number;
    name: string;
    type: string;
    updated_at: string;
  };
  /**
   * The id of the modified webhook.
   */
  hook_id: number;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: nullable_repository;
  sender?: simple_user;
};

export type content_type = 'json' | 'form';

export type webhook_milestone_closed = {
  action: 'closed';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: string;
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_milestone_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: string;
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_milestone_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: string;
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_milestone_edited = {
  action: 'edited';
  /**
   * The changes to the milestone if the action was `edited`.
   */
  changes: {
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    due_on?: {
      /**
       * The previous version of the due date if the action was `edited`.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: string;
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_milestone_opened = {
  action: 'opened';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: string | null;
    closed_issues: number;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    description: string | null;
    due_on: string | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: string;
    url: string;
  };
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_org_block_blocked = {
  action: 'blocked';
  blocked_user: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization: organization_simple;
  repository?: repository;
  sender: simple_user;
};

export type action42 = 'blocked';

export type webhook_org_block_unblocked = {
  action: 'unblocked';
  blocked_user: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization: organization_simple;
  repository?: repository;
  sender: simple_user;
};

export type action43 = 'unblocked';

export type webhook_organization_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership?: {
    organization_url: string;
    role: string;
    state: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization: organization_simple;
  repository?: repository;
  sender: simple_user;
};

export type webhook_organization_member_added = {
  action: 'member_added';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership: {
    organization_url: string;
    role: string;
    state: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization: organization_simple;
  repository?: repository;
  sender: simple_user;
};

export type action44 = 'member_added';

export type webhook_organization_member_invited = {
  action: 'member_invited';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The invitation for the user or email if the action is `member_invited`.
   */
  invitation: {
    created_at: string;
    email: string | null;
    failed_at: string | null;
    failed_reason: string | null;
    id: number;
    invitation_source?: string;
    invitation_teams_url: string;
    inviter: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    login: string | null;
    node_id: string;
    role: string;
    team_count: number;
  };
  organization: organization_simple;
  repository?: repository;
  sender: simple_user;
  user?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
};

export type action45 = 'member_invited';

export type webhook_organization_member_removed = {
  action: 'member_removed';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership: {
    organization_url: string;
    role: string;
    state: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization: organization_simple;
  repository?: repository;
  sender: simple_user;
};

export type action46 = 'member_removed';

export type webhook_organization_renamed = {
  action: 'renamed';
  changes?: {
    login?: {
      from?: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership?: {
    organization_url: string;
    role: string;
    state: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization: organization_simple;
  repository?: repository;
  sender: simple_user;
};

export type action47 = 'renamed';

export type webhook_package_published = {
  action: 'published';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * Information about the package.
   */
  package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    package_type: string;
    package_version: {
      author?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      body?:
        | string
        | {
            [key: string]: string;
          };
      body_html?: string;
      container_metadata?: {
        labels?: {
          [key: string]: string;
        } | null;
        manifest?: {
          [key: string]: string;
        } | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      } | null;
      created_at?: string;
      description: string;
      docker_metadata?: Array<string>;
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Array<{
        [key: string]: string;
      }>;
      name: string;
      npm_metadata?: {
        author?: {
          [key: string]: string;
        } | null;
        bin?: {
          [key: string]: string;
        };
        bugs?: {
          [key: string]: string;
        } | null;
        commit_oid?: string;
        contributors?: Array<{
          [key: string]: string;
        }>;
        cpu?: Array<string>;
        deleted_by_id?: number;
        dependencies?: {
          [key: string]: string;
        };
        description?: string;
        dev_dependencies?: {
          [key: string]: string;
        };
        directories?: {
          [key: string]: string;
        } | null;
        dist?: {
          [key: string]: string;
        } | null;
        engines?: {
          [key: string]: string;
        };
        files?: Array<string>;
        git_head?: string;
        has_shrinkwrap?: boolean;
        homepage?: string;
        id?: string;
        installation_command?: string;
        keywords?: Array<string>;
        license?: string;
        main?: string;
        maintainers?: Array<{
          [key: string]: string;
        }>;
        man?: {
          [key: string]: string;
        };
        name?: string;
        node_version?: string;
        npm_user?: string;
        npm_version?: string;
        optional_dependencies?: {
          [key: string]: string;
        };
        os?: Array<string>;
        peer_dependencies?: {
          [key: string]: string;
        };
        published_via_actions?: boolean;
        readme?: string;
        release_id?: number;
        repository?: {
          [key: string]: string;
        } | null;
        scripts?: {
          [key: string]: string;
        };
        version?: string;
      } | null;
      nuget_metadata?: Array<{
        id?: number | string;
        name?: string;
        value?:
          | boolean
          | string
          | number
          | {
              branch?: string;
              commit?: string;
              type?: string;
              url?: string;
            };
      }> | null;
      package_files: Array<{
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }>;
      package_url?: string;
      prerelease?: boolean;
      release?: {
        author: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string | null;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: Array<string>;
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    } | null;
    registry: {
      about_url: string;
      name: string;
      type: string;
      url: string;
      vendor: string;
    } | null;
    updated_at: string | null;
  };
  repository?: repository;
  sender: simple_user;
};

export type action48 = 'published';

export type webhook_package_updated = {
  action: 'updated';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * Information about the package.
   */
  package: {
    created_at: string;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    package_type: string;
    package_version: {
      author: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: Array<string>;
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Array<string>;
      name: string;
      package_files: Array<{
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string;
        size: number;
        state: string;
        updated_at: string;
      }>;
      package_url?: string;
      prerelease?: boolean;
      release?: {
        author: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: Array<string>;
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: {
      about_url: string;
      name: string;
      type: string;
      url: string;
      vendor: string;
    } | null;
    updated_at: string;
  };
  repository: repository;
  sender: simple_user;
};

export type action49 = 'updated';

export type webhook_page_build = {
  /**
   * The [List GitHub Pages builds](https://docs.github.com/rest/reference/repos#list-github-pages-builds) itself.
   */
  build: {
    commit: string | null;
    created_at: string;
    duration: number;
    error: {
      message: string | null;
    };
    pusher: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    status: string;
    updated_at: string;
    url: string;
  };
  enterprise?: enterprise;
  id: number;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_ping = {
  /**
   * The webhook that is being pinged
   */
  hook?: {
    /**
     * Determines whether the hook is actually triggered for the events it subscribes to.
     */
    active: boolean;
    /**
     * Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app.
     */
    app_id?: number;
    config: {
      content_type?: webhook_config_content_type;
      insecure_ssl?: webhook_config_insecure_ssl;
      secret?: webhook_config_secret;
      url?: webhook_config_url;
    };
    created_at: string;
    deliveries_url?: string;
    /**
     * Determines what events the hook is triggered for. Default: ['push'].
     */
    events: Array<string>;
    /**
     * Unique identifier of the webhook.
     */
    id: number;
    last_response?: hook_response;
    /**
     * The type of webhook. The only valid value is 'web'.
     */
    name: 'web';
    ping_url?: string;
    test_url?: string;
    type: string;
    updated_at: string;
    url?: string;
  };
  /**
   * The ID of the webhook that triggered the ping.
   */
  hook_id?: number;
  organization?: organization_simple;
  repository?: repository;
  sender?: simple_user;
  /**
   * Random string of GitHub zen.
   */
  zen?: string;
};

/**
 * The type of webhook. The only valid value is 'web'.
 */
export type name = 'web';

/**
 * The webhooks ping payload encoded with URL encoding.
 */
export type webhook_ping_form_encoded = {
  /**
   * A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type webhook_project_card_converted = {
  action: 'converted';
  changes: {
    note: {
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type action50 = 'converted';

export type webhook_project_card_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type webhook_project_card_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number | null;
    column_url: string;
    content_url?: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: string;
    url: string;
  };
  repository?: nullable_repository;
  sender: simple_user;
};

export type webhook_project_card_edited = {
  action: 'edited';
  changes: {
    note: {
      from: string | null;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type webhook_project_card_moved = {
  action: 'moved';
  changes?: {
    column_id: {
      from: number;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: string;
    url: string;
  } & {
    after_id: number | null;
    archived?: boolean;
    column_id?: number;
    column_url?: string;
    created_at?: string;
    creator?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    } | null;
    id?: number;
    node_id?: string;
    note?: string | null;
    project_url?: string;
    updated_at?: string;
    url?: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type action51 = 'moved';

export type webhook_project_closed = {
  action: 'closed';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type webhook_project_column_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_column: {
    after_id?: number | null;
    cards_url: string;
    created_at: string;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    project_url: string;
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender?: simple_user;
};

export type webhook_project_column_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_column: {
    after_id?: number | null;
    cards_url: string;
    created_at: string;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    project_url: string;
    updated_at: string;
    url: string;
  };
  repository?: nullable_repository;
  sender?: simple_user;
};

export type webhook_project_column_edited = {
  action: 'edited';
  changes: {
    name?: {
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_column: {
    after_id?: number | null;
    cards_url: string;
    created_at: string;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    project_url: string;
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender?: simple_user;
};

export type webhook_project_column_moved = {
  action: 'moved';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project_column: {
    after_id?: number | null;
    cards_url: string;
    created_at: string;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    project_url: string;
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type webhook_project_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type webhook_project_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: string;
    url: string;
  };
  repository?: nullable_repository;
  sender?: simple_user;
};

export type webhook_project_edited = {
  action: 'edited';
  /**
   * The changes to the project if the action was `edited`.
   */
  changes?: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The changes to the project if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender?: simple_user;
};

export type webhook_project_reopened = {
  action: 'reopened';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: string;
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: string;
    url: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type webhook_projects_v2_item_archived = {
  action: 'archived';
  changes: {
    archived_at?: {
      from?: string | null;
      to?: string | null;
    };
  };
  installation?: simple_installation;
  organization: organization_simple;
  projects_v2_item: projects_v2_item;
  sender: simple_user;
};

export type action52 = 'archived';

export type webhook_projects_v2_item_converted = {
  action: 'converted';
  changes: {
    content_type?: {
      from?: string | null;
      to?: string;
    };
  };
  installation?: simple_installation;
  organization: organization_simple;
  projects_v2_item: projects_v2_item;
  sender: simple_user;
};

export type webhook_projects_v2_item_created = {
  action: 'created';
  installation?: simple_installation;
  organization: organization_simple;
  projects_v2_item: projects_v2_item;
  sender: simple_user;
};

export type webhook_projects_v2_item_deleted = {
  action: 'deleted';
  installation?: simple_installation;
  organization: organization_simple;
  projects_v2_item: projects_v2_item;
  sender: simple_user;
};

export type webhook_projects_v2_item_edited = {
  action: 'edited';
  changes?:
    | {
        field_value: {
          field_node_id?: string;
          field_type?: string;
        };
      }
    | {
        body: {
          from?: string | null;
          to?: string | null;
        };
      };
  installation?: simple_installation;
  organization: organization_simple;
  projects_v2_item: projects_v2_item;
  sender: simple_user;
};

export type webhook_projects_v2_item_reordered = {
  action: 'reordered';
  changes: {
    previous_projects_v2_item_node_id?: {
      from?: string | null;
      to?: string | null;
    };
  };
  installation?: simple_installation;
  organization: organization_simple;
  projects_v2_item: projects_v2_item;
  sender: simple_user;
};

export type action53 = 'reordered';

export type webhook_projects_v2_item_restored = {
  action: 'restored';
  changes: {
    archived_at?: {
      from?: string | null;
      to?: string | null;
    };
  };
  installation?: simple_installation;
  organization: organization_simple;
  projects_v2_item: projects_v2_item;
  sender: simple_user;
};

export type action54 = 'restored';

export type webhook_projects_v2_project_closed = {
  action: 'closed';
  organization: organization_simple;
  projects_v2: projects_v2;
  sender: simple_user;
};

/**
 * A project was created
 */
export type webhook_projects_v2_project_created = {
  action: 'created';
  organization: organization_simple;
  projects_v2: projects_v2;
  sender: simple_user;
};

export type webhook_projects_v2_project_edited = {
  action: 'edited';
  changes: {
    description?: {
      from?: string | null;
      to?: string | null;
    };
    public?: {
      from?: boolean;
      to?: boolean;
    };
    short_description?: {
      from?: string | null;
      to?: string | null;
    };
    title?: {
      from?: string;
      to?: string;
    };
  };
  organization: organization_simple;
  projects_v2: projects_v2;
  sender: simple_user;
};

export type webhook_projects_v2_project_reopened = {
  action: 'reopened';
  organization: organization_simple;
  projects_v2: projects_v2;
  sender: simple_user;
};

export type webhook_public = {
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_assigned = {
  action: 'assigned';
  assignee: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_auto_merge_disabled = {
  action: 'auto_merge_disabled';
  enterprise?: enterprise;
  installation?: simple_installation;
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  reason: string;
  repository: repository;
  sender: simple_user;
};

export type action55 = 'auto_merge_disabled';

export type webhook_pull_request_auto_merge_enabled = {
  action: 'auto_merge_enabled';
  enterprise?: enterprise;
  installation?: simple_installation;
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  reason?: string;
  repository: repository;
  sender: simple_user;
};

export type action56 = 'auto_merge_enabled';

export type webhook_pull_request_closed = {
  action: 'closed';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title.
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    _links?: {
      comments?: {
        href?: string;
      };
      commits?: {
        href?: string;
      };
      html?: {
        href?: string;
      };
      issue?: {
        href?: string;
      };
      review_comment?: {
        href?: string;
      };
      review_comments?: {
        href?: string;
      };
      self?: {
        href?: string;
      };
      statuses?: {
        href?: string;
      };
    };
    active_lock_reason?: string | null;
    additions?: number;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    auto_merge?: {
      [key: string]: string;
    } | null;
    base?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string | null;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        use_squash_pr_title_as_default?: boolean;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      };
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    body?: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    commits?: number;
    commits_url?: string;
    created_at?: string;
    deletions?: number;
    diff_url?: string;
    draft?: boolean;
    head?: {
      label?: string | null;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string | null;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        } | null;
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        use_squash_pr_title_as_default?: boolean;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      } | null;
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      } | null;
    };
    html_url?: string;
    id?: number;
    issue_url?: string;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    locked?: boolean;
    maintainer_can_modify?: boolean;
    merge_commit_sha?: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged: boolean;
    merged_at?: string | null;
    merged_by?: {
      [key: string]: string;
    } | null;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    patch_url?: string;
    rebaseable?: boolean | null;
    requested_reviewers?: Array<{
      [key: string]: string;
    } | null>;
    requested_teams?: Array<{
      [key: string]: string;
    } | null>;
    review_comment_url?: string;
    review_comments?: number;
    review_comments_url?: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'closed' | 'open';
    statuses_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_converted_to_draft = {
  action: 'converted_to_draft';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    _links?: {
      comments?: {
        href?: string;
      };
      commits?: {
        href?: string;
      };
      html?: {
        href?: string;
      };
      issue?: {
        href?: string;
      };
      review_comment?: {
        href?: string;
      };
      review_comments?: {
        href?: string;
      };
      self?: {
        href?: string;
      };
      statuses?: {
        href?: string;
      };
    };
    active_lock_reason?: string | null;
    additions?: number;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    auto_merge?: {
      [key: string]: string;
    } | null;
    base?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        use_squash_pr_title_as_default?: boolean;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      };
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    body?: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    commits?: number;
    commits_url?: string;
    created_at?: string;
    deletions?: number;
    diff_url?: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        use_squash_pr_title_as_default?: boolean;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      } | null;
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    html_url?: string;
    id?: number;
    issue_url?: string;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    locked?: boolean;
    maintainer_can_modify?: boolean;
    merge_commit_sha?: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged: boolean;
    merged_at: string;
    merged_by: string;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    patch_url?: string;
    rebaseable?: boolean | null;
    requested_reviewers?: Array<{
      [key: string]: string;
    } | null>;
    requested_teams?: Array<{
      [key: string]: string;
    } | null>;
    review_comment_url?: string;
    review_comments?: number;
    review_comments_url?: string;
    state?: string;
    statuses_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  repository: repository;
  sender: simple_user;
};

export type action57 = 'converted_to_draft';

export type webhook_pull_request_demilestoned = {
  action: 'demilestoned';
  enterprise?: enterprise;
  milestone?: milestone;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type webhook_pull_request_dequeued = {
  action: 'dequeued';
  enterprise?: enterprise;
  installation?: simple_installation;
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  reason: string;
  repository: repository;
  sender: simple_user;
};

export type action58 = 'dequeued';

export type webhook_pull_request_edited = {
  action: 'edited';
  /**
   * The changes to the comment if the action was `edited`.
   */
  changes: {
    base?: {
      ref: {
        from: string;
      };
      sha: {
        from: string;
      };
    };
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type webhook_pull_request_enqueued = {
  action: 'enqueued';
  enterprise?: enterprise;
  installation?: simple_installation;
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type action59 = 'enqueued';

export type webhook_pull_request_labeled = {
  action: 'labeled';
  enterprise?: enterprise;
  installation?: simple_installation;
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_locked = {
  action: 'locked';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_milestoned = {
  action: 'milestoned';
  enterprise?: enterprise;
  milestone?: milestone;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type webhook_pull_request_opened = {
  action: 'opened';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    _links?: {
      comments?: {
        href?: string;
      };
      commits?: {
        href?: string;
      };
      html?: {
        href?: string;
      };
      issue?: {
        href?: string;
      };
      review_comment?: {
        href?: string;
      };
      review_comments?: {
        href?: string;
      };
      self?: {
        href?: string;
      };
      statuses?: {
        href?: string;
      };
    };
    active_lock_reason: string | null;
    additions?: number;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    auto_merge?: {
      [key: string]: string;
    } | null;
    base?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string | null;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      };
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    body?: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    commits?: number;
    commits_url?: string;
    created_at?: string;
    deletions?: number;
    diff_url?: string;
    draft?: boolean;
    head?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string | null;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      };
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    html_url?: string;
    id?: number;
    issue_url?: string;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    locked?: boolean;
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean;
    merged_at: string | null;
    merged_by: {
      [key: string]: string;
    } | null;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    patch_url?: string;
    rebaseable?: boolean | null;
    requested_reviewers?: Array<{
      [key: string]: string;
    } | null>;
    requested_teams?: Array<{
      [key: string]: string;
    } | null>;
    review_comment_url?: string;
    review_comments?: number;
    review_comments_url?: string;
    state: 'open' | 'closed';
    statuses_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_ready_for_review = {
  action: 'ready_for_review';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    _links?: {
      comments?: {
        href?: string;
      };
      commits?: {
        href?: string;
      };
      html?: {
        href?: string;
      };
      issue?: {
        href?: string;
      };
      review_comment?: {
        href?: string;
      };
      review_comments?: {
        href?: string;
      };
      self?: {
        href?: string;
      };
      statuses?: {
        href?: string;
      };
    };
    active_lock_reason?: string | null;
    additions?: number;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    auto_merge?: {
      [key: string]: string;
    } | null;
    base?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string | null;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        use_squash_pr_title_as_default?: boolean;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      };
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    body?: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    commits?: number;
    commits_url?: string;
    created_at?: string;
    deletions?: number;
    diff_url?: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string | null;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        use_squash_pr_title_as_default?: boolean;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      };
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    html_url?: string;
    id?: number;
    issue_url?: string;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    locked?: boolean;
    maintainer_can_modify?: boolean;
    merge_commit_sha?: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged: boolean;
    merged_at: string | null;
    merged_by: {
      [key: string]: string;
    } | null;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    patch_url?: string;
    rebaseable?: boolean | null;
    requested_reviewers?: Array<{
      [key: string]: string;
    } | null>;
    requested_teams?: Array<{
      [key: string]: string;
    } | null>;
    review_comment_url?: string;
    review_comments?: number;
    review_comments_url?: string;
    state: 'open' | 'closed';
    statuses_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  repository: repository;
  sender: simple_user;
};

export type action60 = 'ready_for_review';

export type webhook_pull_request_reopened = {
  action: 'reopened';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    _links?: {
      comments?: {
        href?: string;
      };
      commits?: {
        href?: string;
      };
      html?: {
        href?: string;
      };
      issue?: {
        href?: string;
      };
      review_comment?: {
        href?: string;
      };
      review_comments?: {
        href?: string;
      };
      self?: {
        href?: string;
      };
      statuses?: {
        href?: string;
      };
    };
    active_lock_reason?: string | null;
    additions?: number;
    assignee?: {
      [key: string]: string;
    } | null;
    assignees?: Array<{
      [key: string]: string;
    } | null>;
    author_association?: string;
    auto_merge?: string;
    base?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        use_squash_pr_title_as_default?: boolean;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      };
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    body?: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    commits?: number;
    commits_url?: string;
    created_at?: string;
    deletions?: number;
    diff_url?: string;
    draft?: boolean;
    head?: {
      label?: string;
      ref?: string;
      repo?: {
        allow_auto_merge?: boolean;
        allow_forking?: boolean;
        allow_merge_commit?: boolean;
        allow_rebase_merge?: boolean;
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url?: string;
        archived?: boolean;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        clone_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        created_at?: string;
        default_branch?: string;
        delete_branch_on_merge?: boolean;
        deployments_url?: string;
        description?: string | null;
        disabled?: boolean;
        downloads_url?: string;
        events_url?: string;
        fork?: boolean;
        forks?: number;
        forks_count?: number;
        forks_url?: string;
        full_name?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        has_downloads?: boolean;
        has_issues?: boolean;
        has_pages?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        homepage?: string | null;
        hooks_url?: string;
        html_url?: string;
        id?: number;
        is_template?: boolean;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        language?: string | null;
        languages_url?: string;
        license?: {
          [key: string]: string;
        } | null;
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url?: string;
        milestones_url?: string;
        mirror_url?: string;
        name?: string;
        node_id?: string;
        notifications_url?: string;
        open_issues?: number;
        open_issues_count?: number;
        owner?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        private?: boolean;
        pulls_url?: string;
        pushed_at?: string;
        releases_url?: string;
        size?: number;
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url?: string;
        stargazers_count?: number;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        svn_url?: string;
        tags_url?: string;
        teams_url?: string;
        topics?: Array<string | null>;
        trees_url?: string;
        updated_at?: string;
        url?: string;
        use_squash_pr_title_as_default?: boolean;
        visibility?: string;
        watchers?: number;
        watchers_count?: number;
        web_commit_signoff_required?: boolean;
      };
      sha?: string;
      user?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
    };
    html_url?: string;
    id?: number;
    issue_url?: string;
    labels?: Array<{
      [key: string]: string;
    } | null>;
    locked?: boolean;
    maintainer_can_modify?: boolean;
    merge_commit_sha?: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged: boolean;
    merged_at: string | null;
    merged_by: {
      [key: string]: string;
    } | null;
    milestone?: {
      [key: string]: string;
    } | null;
    node_id?: string;
    number?: number;
    patch_url?: string;
    rebaseable?: boolean | null;
    requested_reviewers?: Array<{
      [key: string]: string;
    } | null>;
    requested_teams?: Array<{
      [key: string]: string;
    } | null>;
    review_comment_url?: string;
    review_comments?: number;
    review_comments_url?: string;
    state: 'open' | 'closed';
    statuses_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_review_comment_created = {
  action: 'created';
  /**
   * The [comment](https://docs.github.com/rest/reference/pulls#comments) itself.
   */
  comment: {
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
      self: {
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: string;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number | null;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     */
    pull_request_url: string;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: 'LEFT' | 'RIGHT';
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    start_side: ('LEFT' | 'RIGHT') | null;
    updated_at: string;
    /**
     * URL for the pull request review comment
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions?: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_review_comment_deleted = {
  action: 'deleted';
  /**
   * The [comment](https://docs.github.com/rest/reference/pulls#comments) itself.
   */
  comment: {
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
      self: {
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: string;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     */
    pull_request_url: string;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: 'LEFT' | 'RIGHT';
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    start_side: ('LEFT' | 'RIGHT') | null;
    updated_at: string;
    /**
     * URL for the pull request review comment
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_review_comment_edited = {
  action: 'edited';
  /**
   * The changes to the comment.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
  };
  /**
   * The [comment](https://docs.github.com/rest/reference/pulls#comments) itself.
   */
  comment: {
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
      self: {
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: string;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     */
    pull_request_url: string;
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: 'LEFT' | 'RIGHT';
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    start_side: ('LEFT' | 'RIGHT') | null;
    updated_at: string;
    /**
     * URL for the pull request review comment
     */
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_review_dismissed = {
  action: 'dismissed';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    pull_request_url: string;
    state: 'dismissed' | 'approved' | 'changes_requested';
    submitted_at: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  sender: simple_user;
};

export type webhook_pull_request_review_edited = {
  action: 'edited';
  changes: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    pull_request_url: string;
    state: string;
    submitted_at: string | null;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  sender: simple_user;
};

export type webhook_pull_request_review_request_removed =
  | {
      action: 'review_request_removed';
      enterprise?: enterprise;
      installation?: simple_installation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: organization_simple;
      pull_request: {
        _links: {
          comments: {
            href: string;
          };
          commits: {
            href: string;
          };
          html: {
            href: string;
          };
          issue: {
            href: string;
          };
          review_comment: {
            href: string;
          };
          review_comments: {
            href: string;
          };
          self: {
            href: string;
          };
          statuses: {
            href: string;
          };
        };
        active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
        additions?: number;
        assignee: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        assignees: Array<{
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null>;
        /**
         * How the author is associated with the repository.
         */
        author_association:
          | 'COLLABORATOR'
          | 'CONTRIBUTOR'
          | 'FIRST_TIMER'
          | 'FIRST_TIME_CONTRIBUTOR'
          | 'MANNEQUIN'
          | 'MEMBER'
          | 'NONE'
          | 'OWNER';
        /**
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          enabled_by: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: 'merge' | 'squash' | 'rebase';
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             */
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message.
             */
            squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
            /**
             * The default value for a squash merge commit title.
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        closed_at: string | null;
        comments?: number;
        comments_url: string;
        commits?: number;
        commits_url: string;
        created_at: string;
        deletions?: number;
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             */
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        html_url: string;
        id: number;
        issue_url: string;
        labels: Array<{
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           */
          url: string;
        }>;
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        merged_at: string | null;
        merged_by?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * A collection of related issues and pull requests.
         */
        milestone: {
          closed_at: string | null;
          closed_issues: number;
          created_at: string;
          creator: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          description: string | null;
          due_on: string | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: 'open' | 'closed';
          /**
           * The title of the milestone.
           */
          title: string;
          updated_at: string;
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: Array<
          | {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            }
          | null
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: 'open' | 'closed' | 'secret';
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: 'open' | 'closed' | 'secret';
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               */
              url: string;
            }
        >;
        requested_teams: Array<{
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }>;
        review_comment_url: string;
        review_comments?: number;
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: 'open' | 'closed';
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        updated_at: string;
        url: string;
        user: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
      };
      repository: repository;
      requested_reviewer: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      sender: simple_user;
    }
  | {
      action: 'review_request_removed';
      enterprise?: enterprise;
      installation?: simple_installation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: organization_simple;
      pull_request: {
        _links: {
          comments: {
            href: string;
          };
          commits: {
            href: string;
          };
          html: {
            href: string;
          };
          issue: {
            href: string;
          };
          review_comment: {
            href: string;
          };
          review_comments: {
            href: string;
          };
          self: {
            href: string;
          };
          statuses: {
            href: string;
          };
        };
        active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
        additions?: number;
        assignee: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        assignees: Array<{
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null>;
        /**
         * How the author is associated with the repository.
         */
        author_association:
          | 'COLLABORATOR'
          | 'CONTRIBUTOR'
          | 'FIRST_TIMER'
          | 'FIRST_TIME_CONTRIBUTOR'
          | 'MANNEQUIN'
          | 'MEMBER'
          | 'NONE'
          | 'OWNER';
        /**
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          enabled_by: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: 'merge' | 'squash' | 'rebase';
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             */
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        closed_at: string | null;
        comments?: number;
        comments_url: string;
        commits?: number;
        commits_url: string;
        created_at: string;
        deletions?: number;
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             */
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        html_url: string;
        id: number;
        issue_url: string;
        labels: Array<{
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           */
          url: string;
        }>;
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        merged_at: string | null;
        merged_by?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * A collection of related issues and pull requests.
         */
        milestone: {
          closed_at: string | null;
          closed_issues: number;
          created_at: string;
          creator: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          description: string | null;
          due_on: string | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: 'open' | 'closed';
          /**
           * The title of the milestone.
           */
          title: string;
          updated_at: string;
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: Array<
          | {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            }
          | null
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: 'open' | 'closed' | 'secret';
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: 'open' | 'closed' | 'secret';
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               */
              url: string;
            }
        >;
        requested_teams: Array<{
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }>;
        review_comment_url: string;
        review_comments?: number;
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: 'open' | 'closed';
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        updated_at: string;
        url: string;
        user: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
      };
      repository: repository;
      /**
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        parent?: {
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        } | null;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      };
      sender: simple_user;
    };

export type action61 = 'review_request_removed';

export type webhook_pull_request_review_requested =
  | {
      action: 'review_requested';
      enterprise?: enterprise;
      installation?: simple_installation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: organization_simple;
      pull_request: {
        _links: {
          comments: {
            href: string;
          };
          commits: {
            href: string;
          };
          html: {
            href: string;
          };
          issue: {
            href: string;
          };
          review_comment: {
            href: string;
          };
          review_comments: {
            href: string;
          };
          self: {
            href: string;
          };
          statuses: {
            href: string;
          };
        };
        active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
        additions?: number;
        assignee: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null;
        assignees: Array<{
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null>;
        /**
         * How the author is associated with the repository.
         */
        author_association:
          | 'COLLABORATOR'
          | 'CONTRIBUTOR'
          | 'FIRST_TIMER'
          | 'FIRST_TIME_CONTRIBUTOR'
          | 'MANNEQUIN'
          | 'MEMBER'
          | 'NONE'
          | 'OWNER';
        /**
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          enabled_by: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: 'merge' | 'squash' | 'rebase';
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             */
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        closed_at: string | null;
        comments?: number;
        comments_url: string;
        commits?: number;
        commits_url: string;
        created_at: string;
        deletions?: number;
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             */
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        html_url: string;
        id: number;
        issue_url: string;
        labels: Array<{
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           */
          url: string;
        }>;
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        merged_at: string | null;
        merged_by?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * A collection of related issues and pull requests.
         */
        milestone: {
          closed_at: string | null;
          closed_issues: number;
          created_at: string;
          creator: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
            url?: string;
          } | null;
          description: string | null;
          due_on: string | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: 'open' | 'closed';
          /**
           * The title of the milestone.
           */
          title: string;
          updated_at: string;
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: Array<
          | {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            }
          | null
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: 'open' | 'closed' | 'secret';
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: 'open' | 'closed' | 'secret';
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               */
              url: string;
            }
        >;
        requested_teams: Array<{
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }>;
        review_comment_url: string;
        review_comments?: number;
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: 'open' | 'closed';
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        updated_at: string;
        url: string;
        user: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null;
      };
      repository: repository;
      requested_reviewer: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      sender: simple_user;
    }
  | {
      action: 'review_requested';
      enterprise?: enterprise;
      installation?: simple_installation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: organization_simple;
      pull_request: {
        _links: {
          comments: {
            href: string;
          };
          commits: {
            href: string;
          };
          html: {
            href: string;
          };
          issue: {
            href: string;
          };
          review_comment: {
            href: string;
          };
          review_comments: {
            href: string;
          };
          self: {
            href: string;
          };
          statuses: {
            href: string;
          };
        };
        active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
        additions?: number;
        assignee: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null;
        assignees: Array<{
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null>;
        /**
         * How the author is associated with the repository.
         */
        author_association:
          | 'COLLABORATOR'
          | 'CONTRIBUTOR'
          | 'FIRST_TIMER'
          | 'FIRST_TIME_CONTRIBUTOR'
          | 'MANNEQUIN'
          | 'MEMBER'
          | 'NONE'
          | 'OWNER';
        /**
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          enabled_by: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: 'merge' | 'squash' | 'rebase';
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             */
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        closed_at: string | null;
        comments?: number;
        comments_url: string;
        commits?: number;
        commits_url: string;
        created_at: string;
        deletions?: number;
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | string;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            /**
             * Whether downloads are enabled.
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             */
            has_wiki: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | string) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: Array<string>;
            trees_url: string;
            updated_at: string;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        html_url: string;
        id: number;
        issue_url: string;
        labels: Array<{
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           */
          url: string;
        }>;
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        merged_at: string | null;
        merged_by?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * A collection of related issues and pull requests.
         */
        milestone: {
          closed_at: string | null;
          closed_issues: number;
          created_at: string;
          creator: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
            url?: string;
          } | null;
          description: string | null;
          due_on: string | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: 'open' | 'closed';
          /**
           * The title of the milestone.
           */
          title: string;
          updated_at: string;
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: Array<
          | {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            }
          | null
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description?: string | null;
              html_url?: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              members_url?: string;
              /**
               * Name of the team
               */
              name: string;
              node_id?: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: 'open' | 'closed' | 'secret';
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission?: string;
              privacy?: 'open' | 'closed' | 'secret';
              repositories_url?: string;
              slug?: string;
              /**
               * URL for the team
               */
              url?: string;
            }
        >;
        requested_teams: Array<{
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }>;
        review_comment_url: string;
        review_comments?: number;
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: 'open' | 'closed';
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        updated_at: string;
        url: string;
        user: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null;
      };
      repository: repository;
      /**
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /**
         * Description of the team
         */
        description?: string | null;
        html_url?: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url?: string;
        /**
         * Name of the team
         */
        name: string;
        node_id?: string;
        parent?: {
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        } | null;
        /**
         * Permission that the team will have for its repositories
         */
        permission?: string;
        privacy?: 'open' | 'closed' | 'secret';
        repositories_url?: string;
        slug?: string;
        /**
         * URL for the team
         */
        url?: string;
      };
      sender: simple_user;
    };

export type action62 = 'review_requested';

export type webhook_pull_request_review_submitted = {
  action: 'submitted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    pull_request_url: string;
    state: string;
    submitted_at: string | null;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  sender: simple_user;
};

export type action63 = 'submitted';

export type webhook_pull_request_review_thread_resolved = {
  action: 'resolved';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender?: simple_user;
  thread: {
    comments: Array<{
      _links: {
        html: {
          href: string;
        };
        pull_request: {
          href: string;
        };
        self: {
          href: string;
        };
      };
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      /**
       * The text of the comment.
       */
      body: string;
      /**
       * The SHA of the commit to which the comment applies.
       */
      commit_id: string;
      created_at: string;
      /**
       * The diff of the line that the comment refers to.
       */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       */
      html_url: string;
      /**
       * The ID of the pull request review comment.
       */
      id: number;
      /**
       * The comment ID to reply to.
       */
      in_reply_to_id?: number;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line: number | null;
      /**
       * The node ID of the pull request review comment.
       */
      node_id: string;
      /**
       * The SHA of the original commit to which the comment applies.
       */
      original_commit_id: string;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line: number | null;
      /**
       * The index of the original line in the diff to which the comment applies.
       */
      original_position: number;
      /**
       * The first line of the range for a multi-line comment.
       */
      original_start_line: number | null;
      /**
       * The relative path of the file to which the comment applies.
       */
      path: string;
      /**
       * The line index in the diff to which the comment applies.
       */
      position: number | null;
      /**
       * The ID of the pull request review to which the comment belongs.
       */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       */
      pull_request_url: string;
      reactions: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      side: 'LEFT' | 'RIGHT';
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      start_side: ('LEFT' | 'RIGHT') | null;
      updated_at: string;
      /**
       * URL for the pull request review comment
       */
      url: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
    }>;
    node_id: string;
  };
};

export type action64 = 'resolved';

export type webhook_pull_request_review_thread_unresolved = {
  action: 'unresolved';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  repository: repository;
  sender?: simple_user;
  thread: {
    comments: Array<{
      _links: {
        html: {
          href: string;
        };
        pull_request: {
          href: string;
        };
        self: {
          href: string;
        };
      };
      /**
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      /**
       * The text of the comment.
       */
      body: string;
      /**
       * The SHA of the commit to which the comment applies.
       */
      commit_id: string;
      created_at: string;
      /**
       * The diff of the line that the comment refers to.
       */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       */
      html_url: string;
      /**
       * The ID of the pull request review comment.
       */
      id: number;
      /**
       * The comment ID to reply to.
       */
      in_reply_to_id?: number;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line: number | null;
      /**
       * The node ID of the pull request review comment.
       */
      node_id: string;
      /**
       * The SHA of the original commit to which the comment applies.
       */
      original_commit_id: string;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line: number;
      /**
       * The index of the original line in the diff to which the comment applies.
       */
      original_position: number;
      /**
       * The first line of the range for a multi-line comment.
       */
      original_start_line: number | null;
      /**
       * The relative path of the file to which the comment applies.
       */
      path: string;
      /**
       * The line index in the diff to which the comment applies.
       */
      position: number | null;
      /**
       * The ID of the pull request review to which the comment belongs.
       */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       */
      pull_request_url: string;
      reactions: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      side: 'LEFT' | 'RIGHT';
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      start_side: ('LEFT' | 'RIGHT') | null;
      updated_at: string;
      /**
       * URL for the pull request review comment
       */
      url: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    }>;
    node_id: string;
  };
};

export type action65 = 'unresolved';

export type webhook_pull_request_synchronize = {
  action: 'synchronize';
  after: string;
  before: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type action66 = 'synchronize';

export type webhook_pull_request_unassigned = {
  action: 'unassigned';
  assignee?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
    url?: string;
  } | null;
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type webhook_pull_request_unlabeled = {
  action: 'unlabeled';
  enterprise?: enterprise;
  installation?: simple_installation;
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_pull_request_unlocked = {
  action: 'unlocked';
  enterprise?: enterprise;
  installation?: simple_installation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: organization_simple;
  pull_request: {
    _links: {
      comments: {
        href: string;
      };
      commits: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      self: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    active_lock_reason: ('resolved' | 'off-topic' | 'too heated' | 'spam') | null;
    additions?: number;
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: Array<{
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null>;
    /**
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string;
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: string | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: string;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | string;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        /**
         * Whether downloads are enabled.
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | string) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: Array<string>;
        trees_url: string;
        updated_at: string;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: Array<{
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }>;
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: string | null;
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: string | null;
      closed_issues: number;
      created_at: string;
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: string | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: string;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: Array<
      | {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        }
      | null
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    >;
    requested_teams: Array<{
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }>;
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: string;
    url: string;
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_push = {
  /**
   * The SHA of the most recent commit on `ref` after the push.
   */
  after: string;
  base_ref: string | null;
  /**
   * The SHA of the most recent commit on `ref` before the push.
   */
  before: string;
  /**
   * An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 20 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/reference/repos#commits) to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.
   */
  commits: Array<{
    /**
     * An array of files added in the commit.
     */
    added?: Array<string>;
    /**
     * Metaproperties for Git author/committer information.
     */
    author: {
      date?: string;
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Metaproperties for Git author/committer information.
     */
    committer: {
      date?: string;
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Whether this commit is distinct from any that have been pushed before.
     */
    distinct: boolean;
    id: string;
    /**
     * The commit message.
     */
    message: string;
    /**
     * An array of files modified by the commit.
     */
    modified?: Array<string>;
    /**
     * An array of files removed in the commit.
     */
    removed?: Array<string>;
    /**
     * The ISO 8601 timestamp of the commit.
     */
    timestamp: string;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     */
    url: string;
  }>;
  /**
   * URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
   */
  compare: string;
  /**
   * Whether this push created the `ref`.
   */
  created: boolean;
  /**
   * Whether this push deleted the `ref`.
   */
  deleted: boolean;
  enterprise?: enterprise;
  /**
   * Whether this push was a force push of the `ref`.
   */
  forced: boolean;
  head_commit: {
    /**
     * An array of files added in the commit.
     */
    added?: Array<string>;
    /**
     * Metaproperties for Git author/committer information.
     */
    author: {
      date?: string;
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Metaproperties for Git author/committer information.
     */
    committer: {
      date?: string;
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Whether this commit is distinct from any that have been pushed before.
     */
    distinct: boolean;
    id: string;
    /**
     * The commit message.
     */
    message: string;
    /**
     * An array of files modified by the commit.
     */
    modified?: Array<string>;
    /**
     * An array of files removed in the commit.
     */
    removed?: Array<string>;
    /**
     * The ISO 8601 timestamp of the commit.
     */
    timestamp: string;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     */
    url: string;
  } | null;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * Metaproperties for Git author/committer information.
   */
  pusher: {
    date?: string;
    email?: string | null;
    /**
     * The git author's name.
     */
    name: string;
    username?: string;
  };
  /**
   * The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
   */
  ref: string;
  /**
   * A git repository
   */
  repository: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether discussions are enabled.
     */
    has_discussions: boolean;
    /**
     * Whether downloads are enabled.
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | string) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
    /**
     * Whether to require contributors to sign off on web-based commits
     */
    web_commit_signoff_required?: boolean;
  };
  sender?: simple_user;
};

export type webhook_registry_package_published = {
  action: 'published';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  registry_package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
    package_type: string;
    package_version: {
      author?: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      body?:
        | string
        | {
            [key: string]: string;
          };
      body_html?: string;
      container_metadata?: {
        labels?: {
          [key: string]: string;
        } | null;
        manifest?: {
          [key: string]: string;
        } | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      };
      created_at?: string;
      description: string;
      docker_metadata?: Array<string>;
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Array<{
        [key: string]: string;
      }>;
      name: string;
      npm_metadata?: {
        author?:
          | (
              | string
              | {
                  [key: string]: string;
                }
            )
          | null;
        bin?: {
          [key: string]: string;
        };
        bugs?:
          | (
              | string
              | {
                  [key: string]: string;
                }
            )
          | null;
        commit_oid?: string;
        contributors?: Array<string>;
        cpu?: Array<string>;
        deleted_by_id?: number;
        dependencies?: {
          [key: string]: string;
        };
        description?: string;
        dev_dependencies?: {
          [key: string]: string;
        };
        directories?:
          | (
              | string
              | {
                  [key: string]: string;
                }
            )
          | null;
        dist?:
          | (
              | string
              | {
                  [key: string]: string;
                }
            )
          | null;
        engines?: {
          [key: string]: string;
        };
        files?: Array<string>;
        git_head?: string;
        has_shrinkwrap?: boolean;
        homepage?: string;
        id?: string;
        installation_command?: string;
        keywords?: Array<string>;
        license?: string;
        main?: string;
        maintainers?: Array<string>;
        man?: {
          [key: string]: string;
        };
        name?: string;
        node_version?: string;
        npm_user?: string;
        npm_version?: string;
        optional_dependencies?: {
          [key: string]: string;
        };
        os?: Array<string>;
        peer_dependencies?: {
          [key: string]: string;
        };
        published_via_actions?: boolean;
        readme?: string;
        release_id?: number;
        repository?:
          | (
              | string
              | {
                  [key: string]: string;
                }
            )
          | null;
        scripts?: {
          [key: string]: string;
        };
        version?: string;
      } | null;
      nuget_metadata?: Array<{
        id?:
          | (
              | string
              | {
                  [key: string]: string;
                }
              | number
            )
          | null;
        name?: string;
        value?:
          | boolean
          | string
          | number
          | {
              branch?: string;
              commit?: string;
              type?: string;
              url?: string;
            };
      }> | null;
      package_files: Array<{
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }>;
      package_url: string;
      prerelease?: boolean;
      release?: {
        author?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        created_at?: string;
        draft?: boolean;
        html_url?: string;
        id?: number;
        name?: string | null;
        prerelease?: boolean;
        published_at?: string;
        tag_name?: string;
        target_commitish?: string;
        url?: string;
      };
      rubygems_metadata?: Array<string>;
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    } | null;
    registry: {
      about_url?: string;
      name?: string;
      type?: string;
      url?: string;
      vendor?: string;
    } | null;
    updated_at: string | null;
  };
  repository?: repository;
  sender: simple_user;
};

export type webhook_registry_package_updated = {
  action: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  registry_package: {
    created_at: string;
    description: string;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
    package_type: string;
    package_version: {
      author: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: Array<string>;
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: Array<string>;
      name: string;
      package_files: Array<{
        content_type?: string;
        created_at?: string;
        download_url?: string;
        id?: number;
        md5?: string | null;
        name?: string;
        sha1?: string | null;
        sha256?: string;
        size?: number;
        state?: string;
        updated_at?: string;
      }>;
      package_url: string;
      prerelease?: boolean;
      release?: {
        author: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: Array<string>;
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: {
      [key: string]: string;
    } | null;
    updated_at: string;
  };
  repository?: repository;
  sender: simple_user;
};

export type webhook_release_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: string;
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }>;
    assets_url: string;
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: string | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: string | null;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_release_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: string;
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }>;
    assets_url: string;
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: string | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: string | null;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  repository: repository;
  sender: simple_user;
};

export type webhook_release_edited = {
  action: 'edited';
  changes: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: string;
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }>;
    assets_url: string;
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: string | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: string | null;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type webhook_release_prereleased = {
  action: 'prereleased';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  release: {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: string;
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }>;
    assets_url: string;
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: string | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: string | null;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  } & {
    assets?: Array<{
      [key: string]: string;
    } | null>;
    assets_url?: string;
    author?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    body?: string | null;
    created_at?: string;
    draft?: boolean;
    html_url?: string;
    id?: number;
    name?: string | null;
    node_id?: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at?: string | null;
    tag_name?: string;
    tarball_url?: string | null;
    target_commitish?: string;
    upload_url?: string;
    url?: string;
    zipball_url?: string | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type action67 = 'prereleased';

export type webhook_release_published = {
  action: 'published';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  release: {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: string;
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }>;
    assets_url: string;
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: string | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: string | null;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  } & {
    assets?: Array<{
      [key: string]: string;
    } | null>;
    assets_url?: string;
    author?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    body?: string | null;
    created_at?: string;
    draft?: boolean;
    html_url?: string;
    id?: number;
    name?: string | null;
    node_id?: string;
    prerelease?: boolean;
    published_at: string | null;
    tag_name?: string;
    tarball_url?: string | null;
    target_commitish?: string;
    upload_url?: string;
    url?: string;
    zipball_url?: string | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type webhook_release_released = {
  action: 'released';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  /**
   * The [release](https://docs.github.com/rest/reference/repos/#get-a-release) object.
   */
  release: {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: string;
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }>;
    assets_url: string;
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: string | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: string | null;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type action68 = 'released';

export type webhook_release_unpublished = {
  action: 'unpublished';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  release: {
    assets: Array<{
      browser_download_url: string;
      content_type: string;
      created_at: string;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: string;
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }>;
    assets_url: string;
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: string | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: string | null;
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  } & {
    assets?: Array<{
      [key: string]: string;
    } | null>;
    assets_url?: string;
    author?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    body?: string | null;
    created_at?: string;
    draft?: boolean;
    html_url?: string;
    id?: number;
    name?: string | null;
    node_id?: string;
    prerelease?: boolean;
    published_at: string | null;
    tag_name?: string;
    tarball_url?: string | null;
    target_commitish?: string;
    upload_url?: string;
    url?: string;
    zipball_url?: string | null;
  };
  repository: repository;
  sender?: simple_user;
};

export type action69 = 'unpublished';

export type webhook_repository_archived = {
  action: 'archived';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_repository_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_repository_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_repository_dispatch_sample = {
  action: string;
  branch: string;
  client_payload: {
    [key: string]: string;
  } | null;
  enterprise?: enterprise;
  installation: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_repository_edited = {
  action: 'edited';
  changes: {
    default_branch?: {
      from: string;
    };
    description?: {
      from: string | null;
    };
    homepage?: {
      from: string | null;
    };
    topics?: {
      from?: Array<string> | null;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_repository_import = {
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  status: 'success' | 'cancelled' | 'failure';
};

export type status13 = 'success' | 'cancelled' | 'failure';

export type webhook_repository_privatized = {
  action: 'privatized';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action70 = 'privatized';

export type webhook_repository_publicized = {
  action: 'publicized';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action71 = 'publicized';

export type webhook_repository_renamed = {
  action: 'renamed';
  changes: {
    repository: {
      name: {
        from: string;
      };
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_repository_transferred = {
  action: 'transferred';
  changes: {
    owner: {
      from: {
        organization?: {
          avatar_url: string;
          description: string | null;
          events_url: string;
          hooks_url: string;
          html_url?: string;
          id: number;
          issues_url: string;
          login: string;
          members_url: string;
          node_id: string;
          public_members_url: string;
          repos_url: string;
          url: string;
        };
        user?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
      };
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_repository_unarchived = {
  action: 'unarchived';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action72 = 'unarchived';

export type webhook_repository_vulnerability_alert_create = {
  action: 'create';
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    dismisser?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string;
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: 'open' | 'dismissed' | 'fixed';
  } & {
    affected_package_name?: string;
    affected_range?: string;
    created_at?: string;
    external_identifier?: string;
    external_reference?: string | null;
    fixed_in?: string;
    ghsa_id?: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity?: string;
    state: 'open';
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action73 = 'create';

export type webhook_repository_vulnerability_alert_dismiss = {
  action: 'dismiss';
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_comment?: string | null;
    dismiss_reason?: string;
    dismissed_at?: string;
    dismisser?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string;
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: 'open' | 'dismissed' | 'fixed';
  } & {
    affected_package_name?: string;
    affected_range?: string;
    created_at?: string;
    dismiss_comment?: string | null;
    dismiss_reason: string;
    dismissed_at: string;
    dismisser: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier?: string;
    external_reference?: string | null;
    fixed_in?: string;
    ghsa_id?: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity?: string;
    state: 'dismissed';
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action74 = 'dismiss';

export type webhook_repository_vulnerability_alert_reopen = {
  action: 'reopen';
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    dismisser?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string;
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: 'open' | 'dismissed' | 'fixed';
  } & {
    affected_package_name?: string;
    affected_range?: string;
    created_at?: string;
    external_identifier?: string;
    external_reference?: string | null;
    fixed_in?: string;
    ghsa_id?: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity?: string;
    state: 'open';
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action75 = 'reopen';

export type webhook_repository_vulnerability_alert_resolve = {
  action: 'resolve';
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    dismisser?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string;
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: 'open' | 'dismissed' | 'fixed';
  } & {
    affected_package_name?: string;
    affected_range?: string;
    created_at?: string;
    external_identifier?: string;
    external_reference?: string | null;
    fix_reason?: string;
    fixed_at?: string;
    fixed_in?: string;
    ghsa_id?: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity?: string;
    state: 'fixed' | 'open';
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action76 = 'resolve';

export type webhook_secret_scanning_alert_created = {
  action: 'created';
  alert: secret_scanning_alert;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender?: simple_user;
};

export type webhook_secret_scanning_alert_location_created = {
  action?: 'created';
  alert: secret_scanning_alert;
  installation?: simple_installation;
  location: secret_scanning_location;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type webhook_secret_scanning_alert_location_created_form_encoded = {
  /**
   * A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};

export type webhook_secret_scanning_alert_reopened = {
  action: 'reopened';
  alert: secret_scanning_alert;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender?: simple_user;
};

export type webhook_secret_scanning_alert_resolved = {
  action: 'resolved';
  alert: {
    created_at?: alert_created_at;
    html_url?: alert_html_url;
    /**
     * The REST API URL of the code locations for this alert.
     */
    locations_url?: string;
    number?: alert_number;
    /**
     * Whether push protection was bypassed for the detected secret.
     */
    push_protection_bypassed?: boolean | null;
    /**
     * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    push_protection_bypassed_at?: string | null;
    push_protection_bypassed_by?: nullable_simple_user;
    /**
     * **Required when the `state` is `resolved`.** The reason for resolving the alert.
     */
    resolution?:
      | ('false_positive' | 'wont_fix' | 'revoked' | 'used_in_tests' | 'pattern_deleted' | 'pattern_edited')
      | null;
    /**
     * An optional comment to resolve an alert.
     */
    resolution_comment?: string | null;
    /**
     * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    resolved_at?: string | null;
    resolved_by?: nullable_simple_user;
    /**
     * The secret that was detected.
     */
    secret?: string;
    /**
     * The type of secret that secret scanning detected.
     */
    secret_type?: string;
    /**
     * User-friendly name for the detected secret, matching the `secret_type`.
     * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
     */
    secret_type_display_name?: string;
    state?: secret_scanning_alert_state;
    updated_at?: alert_updated_at;
    url?: alert_url;
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender?: simple_user;
};

/**
 * **Required when the `state` is `resolved`.** The reason for resolving the alert.
 */
export type resolution =
  | 'false_positive'
  | 'wont_fix'
  | 'revoked'
  | 'used_in_tests'
  | 'pattern_deleted'
  | 'pattern_edited';

export type webhook_secret_scanning_alert_revoked = {
  action: 'revoked';
  alert: secret_scanning_alert;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender?: simple_user;
};

export type webhook_security_advisory_published = {
  action: 'published';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: Array<{
      cwe_id: string;
      name: string;
    }>;
    description: string;
    ghsa_id: string;
    identifiers: Array<{
      type: string;
      value: string;
    }>;
    published_at: string;
    references: Array<{
      url: string;
    }>;
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: Array<{
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }>;
    withdrawn_at: string | null;
  };
  sender?: simple_user;
};

export type webhook_security_advisory_updated = {
  action: 'updated';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: Array<{
      cwe_id: string;
      name: string;
    }>;
    description: string;
    ghsa_id: string;
    identifiers: Array<{
      type: string;
      value: string;
    }>;
    published_at: string;
    references: Array<{
      url: string;
    }>;
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: Array<{
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }>;
    withdrawn_at: string | null;
  };
  sender?: simple_user;
};

export type webhook_security_advisory_withdrawn = {
  action: 'withdrawn';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: Array<{
      cwe_id: string;
      name: string;
    }>;
    description: string;
    ghsa_id: string;
    identifiers: Array<{
      type: string;
      value: string;
    }>;
    published_at: string;
    references: Array<{
      url: string;
    }>;
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: Array<{
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }>;
    withdrawn_at: string;
  };
  sender?: simple_user;
};

export type action77 = 'withdrawn';

export type webhook_security_and_analysis = {
  changes: {
    from?: {
      security_and_analysis?: security_and_analysis;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: full_repository;
  sender?: simple_user;
};

export type webhook_sponsorship_cancelled = {
  action: 'cancelled';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  sender: simple_user;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type webhook_sponsorship_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  sender: simple_user;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type webhook_sponsorship_edited = {
  action: 'edited';
  changes: {
    privacy_level?: {
      /**
       * The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy.
       */
      from: string;
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  sender: simple_user;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type webhook_sponsorship_pending_cancellation = {
  action: 'pending_cancellation';
  /**
   * The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
   */
  effective_date?: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  sender: simple_user;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type action78 = 'pending_cancellation';

export type webhook_sponsorship_pending_tier_change = {
  action: 'pending_tier_change';
  changes: {
    tier: {
      /**
       * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
       */
      from: {
        created_at: string;
        description: string;
        is_custom_ammount?: boolean;
        is_custom_amount?: boolean;
        is_one_time: boolean;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
        node_id: string;
      };
    };
  };
  /**
   * The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
   */
  effective_date?: string;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  sender: simple_user;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type action79 = 'pending_tier_change';

export type webhook_sponsorship_tier_changed = {
  action: 'tier_changed';
  changes: {
    tier: {
      /**
       * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
       */
      from: {
        created_at: string;
        description: string;
        is_custom_ammount?: boolean;
        is_custom_amount?: boolean;
        is_one_time: boolean;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
        node_id: string;
      };
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository?: repository;
  sender: simple_user;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};

export type action80 = 'tier_changed';

export type webhook_star_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  /**
   * The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
   */
  starred_at: string | null;
};

export type webhook_star_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  /**
   * The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
   */
  starred_at: string;
};

export type webhook_status = {
  avatar_url?: string | null;
  /**
   * An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.
   */
  branches: Array<{
    commit: {
      sha: string | null;
      url: string | null;
    };
    name: string;
    protected: boolean;
  }>;
  commit: {
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    comments_url: string;
    commit: {
      author: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      } & {
        date: string;
        email?: string;
        name?: string;
      };
      comment_count: number;
      committer: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      } & {
        date: string;
        email?: string;
        name?: string;
      };
      message: string;
      tree: {
        sha: string;
        url: string;
      };
      url: string;
      verification: {
        payload: string | null;
        reason:
          | 'expired_key'
          | 'not_signing_key'
          | 'gpgverify_error'
          | 'gpgverify_unavailable'
          | 'unsigned'
          | 'string_signature_type'
          | 'no_user'
          | 'unverified_email'
          | 'bad_email'
          | 'string_key'
          | 'malformed_signature'
          | 'invalid'
          | 'valid'
          | 'bad_cert'
          | 'ocsp_pending';
        signature: string | null;
        verified: boolean;
      };
    };
    committer: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    node_id: string;
    parents: Array<{
      html_url: string;
      sha: string;
      url: string;
    }>;
    sha: string;
    url: string;
  };
  context: string;
  created_at: string;
  /**
   * The optional human-readable description added to the status.
   */
  description: string | null;
  enterprise?: enterprise;
  /**
   * The unique identifier of the status.
   */
  id: number;
  installation?: simple_installation;
  name: string;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  /**
   * The Commit SHA.
   */
  sha: string;
  /**
   * The new state. Can be `pending`, `success`, `failure`, or `error`.
   */
  state: 'pending' | 'success' | 'failure' | 'error';
  /**
   * The optional link added to the status.
   */
  target_url: string | null;
  updated_at: string;
};

export type reason =
  | 'expired_key'
  | 'not_signing_key'
  | 'gpgverify_error'
  | 'gpgverify_unavailable'
  | 'unsigned'
  | 'string_signature_type'
  | 'no_user'
  | 'unverified_email'
  | 'bad_email'
  | 'string_key'
  | 'malformed_signature'
  | 'invalid'
  | 'valid'
  | 'bad_cert'
  | 'ocsp_pending';

/**
 * The new state. Can be `pending`, `success`, `failure`, or `error`.
 */
export type state11 = 'pending' | 'success' | 'failure' | 'error';

export type webhook_team_add = {
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};

export type webhook_team_added_to_repository = {
  action: 'added_to_repository';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization: organization_simple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | string) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender?: simple_user;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};

export type action81 = 'added_to_repository';

export type webhook_team_created = {
  action: 'created';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization: organization_simple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | string) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender: simple_user;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};

export type webhook_team_deleted = {
  action: 'deleted';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization: organization_simple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | string) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender?: simple_user;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};

export type webhook_team_edited = {
  action: 'edited';
  /**
   * The changes to the team if the action was `edited`.
   */
  changes: {
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
    privacy?: {
      /**
       * The previous version of the team's privacy if the action was `edited`.
       */
      from: string;
    };
    repository?: {
      permissions: {
        from: {
          /**
           * The previous version of the team member's `admin` permission on a repository, if the action was `edited`.
           */
          admin?: boolean;
          /**
           * The previous version of the team member's `pull` permission on a repository, if the action was `edited`.
           */
          pull?: boolean;
          /**
           * The previous version of the team member's `push` permission on a repository, if the action was `edited`.
           */
          push?: boolean;
        };
      };
    };
  };
  enterprise?: enterprise;
  installation?: simple_installation;
  organization: organization_simple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | string) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender: simple_user;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};

export type webhook_team_removed_from_repository = {
  action: 'removed_from_repository';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization: organization_simple;
  /**
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | string;
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | string) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: Array<string>;
    trees_url: string;
    updated_at: string;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender: simple_user;
  /**
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};

export type action82 = 'removed_from_repository';

export type webhook_watch_started = {
  action: 'started';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
};

export type action83 = 'started';

export type webhook_workflow_dispatch = {
  enterprise?: enterprise;
  inputs: {
    name?: string;
    number?: string;
  } | null;
  installation?: simple_installation;
  organization?: organization_simple;
  ref: string;
  repository: repository;
  sender: simple_user;
  workflow: string;
};

export type webhook_workflow_job_completed = {
  action: 'completed';
  deployment?: deployment;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow_job: {
    check_run_url: string;
    completed_at: string | null;
    conclusion: ('success' | 'failure' | 'skipped' | 'cancelled' | 'action_required' | 'neutral' | 'timed_out') | null;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    head_sha: string;
    html_url: string;
    id: number;
    /**
     * Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
     */
    labels: Array<string>;
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    run_url: string;
    /**
     * The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_id: number | null;
    /**
     * The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_name: string | null;
    /**
     * The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_id: number | null;
    /**
     * The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_name: string | null;
    started_at: string;
    /**
     * The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
     */
    status: 'queued' | 'in_progress' | 'completed' | 'waiting';
    steps: Array<{
      completed_at: string | null;
      conclusion: ('failure' | 'skipped' | 'success' | 'cancelled') | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'in_progress' | 'completed' | 'queued';
    }>;
    url: string;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
  } & {
    check_run_url?: string;
    completed_at?: string;
    conclusion: 'success' | 'failure' | 'skipped' | 'cancelled' | 'action_required' | 'neutral' | 'timed_out';
    /**
     * The name of the current branch.
     */
    head_branch?: string | null;
    head_sha?: string;
    html_url?: string;
    id?: number;
    labels?: Array<string | null>;
    name?: string;
    node_id?: string;
    run_attempt?: number;
    run_id?: number;
    run_url?: string;
    runner_group_id?: number | null;
    runner_group_name?: string | null;
    runner_id?: number | null;
    runner_name?: string | null;
    started_at?: string;
    status?: string;
    steps?: Array<{
      [key: string]: string;
    } | null>;
    url?: string;
    /**
     * The name of the workflow.
     */
    workflow_name?: string | null;
  };
};

/**
 * The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
 */
export type status14 = 'queued' | 'in_progress' | 'completed' | 'waiting';

export type webhook_workflow_job_in_progress = {
  action: 'in_progress';
  deployment?: deployment;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow_job: {
    check_run_url: string;
    completed_at: string | null;
    conclusion: ('success' | 'failure' | 'cancelled' | 'neutral') | null;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    head_sha: string;
    html_url: string;
    id: number;
    /**
     * Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
     */
    labels: Array<string>;
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    run_url: string;
    /**
     * The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_id: number | null;
    /**
     * The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_name: string | null;
    /**
     * The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_id: number | null;
    /**
     * The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_name: string | null;
    started_at: string;
    /**
     * The current status of the job. Can be `queued`, `in_progress`, or `completed`.
     */
    status: 'queued' | 'in_progress' | 'completed';
    steps: Array<{
      completed_at: string | null;
      conclusion: ('failure' | 'skipped' | 'success' | 'cancelled') | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'in_progress' | 'completed' | 'queued' | 'pending';
    }>;
    url: string;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
  } & {
    check_run_url?: string;
    completed_at?: string | null;
    conclusion?: string | null;
    /**
     * The name of the current branch.
     */
    head_branch?: string | null;
    head_sha?: string;
    html_url?: string;
    id?: number;
    labels?: Array<string>;
    name?: string;
    node_id?: string;
    run_attempt?: number;
    run_id?: number;
    run_url?: string;
    runner_group_id?: number | null;
    runner_group_name?: string | null;
    runner_id?: number | null;
    runner_name?: string | null;
    started_at?: string;
    status: 'in_progress' | 'completed' | 'queued';
    steps: Array<{
      completed_at: string | null;
      conclusion: string | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'in_progress' | 'completed' | 'pending' | 'queued';
    }>;
    url?: string;
    /**
     * The name of the workflow.
     */
    workflow_name?: string | null;
  };
};

export type action84 = 'in_progress';

export type conclusion6 = 'success' | 'failure' | 'cancelled' | 'neutral';

export type webhook_workflow_job_queued = {
  action: 'queued';
  deployment?: deployment;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow_job: {
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    head_sha: string;
    html_url: string;
    id: number;
    labels: Array<string>;
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    started_at: string;
    status: 'queued' | 'in_progress' | 'completed' | 'waiting';
    steps: Array<{
      completed_at: string | null;
      conclusion: ('failure' | 'skipped' | 'success' | 'cancelled') | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'completed' | 'in_progress' | 'queued' | 'pending';
    }>;
    url: string;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
  };
};

export type action85 = 'queued';

export type webhook_workflow_job_waiting = {
  action: 'waiting';
  deployment?: deployment;
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow_job: {
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    head_sha: string;
    html_url: string;
    id: number;
    labels: Array<string>;
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    started_at: string;
    status: 'queued' | 'in_progress' | 'completed' | 'waiting';
    steps: Array<{
      completed_at: string | null;
      conclusion: ('failure' | 'skipped' | 'success' | 'cancelled') | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'completed' | 'in_progress' | 'queued' | 'pending' | 'waiting';
    }>;
    url: string;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
  };
};

export type action86 = 'waiting';

export type webhook_workflow_run_completed = {
  action: 'completed';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow: {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  } | null;
  workflow_run: {
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url: string;
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url: string;
    conclusion:
      | ('success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'stale' | 'skipped')
      | null;
    created_at: string;
    event: string;
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    head_repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    previous_attempt_url: string | null;
    pull_requests: Array<{
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }>;
    referenced_workflows?: Array<{
      path: string;
      ref?: string;
      sha: string;
    }> | null;
    repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    run_started_at: string;
    status: 'requested' | 'in_progress' | 'completed' | 'queued' | 'pending' | 'waiting';
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url: string;
  } & {
    actor?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id?: number;
    check_suite_node_id?: string;
    check_suite_url?: string;
    conclusion: 'success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'stale' | 'skipped';
    created_at?: string;
    event?: string;
    head_branch?: string | null;
    head_commit?: {
      author?: {
        email?: string;
        name?: string;
      };
      committer?: {
        email?: string;
        name?: string;
      };
      id?: string;
      message?: string;
      timestamp?: string;
      tree_id?: string;
    };
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha?: string;
    html_url?: string;
    id?: number;
    jobs_url?: string;
    logs_url?: string;
    name?: string | null;
    node_id?: string;
    path?: string;
    previous_attempt_url?: string | null;
    pull_requests?: Array<{
      [key: string]: string;
    } | null>;
    referenced_workflows?: Array<{
      path: string;
      ref?: string;
      sha: string;
    }> | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt?: number;
    run_number?: number;
    run_started_at?: string;
    status?: string;
    triggering_actor?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    } | null;
    updated_at?: string;
    url?: string;
    workflow_id?: number;
    workflow_url?: string;
  };
};

export type webhook_workflow_run_in_progress = {
  action: 'in_progress';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow: {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  } | null;
  workflow_run: {
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url: string;
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url: string;
    conclusion:
      | ('success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'stale' | 'skipped')
      | null;
    created_at: string;
    event: string;
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    head_repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    previous_attempt_url: string | null;
    pull_requests: Array<{
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }>;
    referenced_workflows?: Array<{
      path: string;
      ref?: string;
      sha: string;
    }> | null;
    repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    run_started_at: string;
    status: 'requested' | 'in_progress' | 'completed' | 'queued' | 'pending';
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url: string;
  } & {
    actor?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id?: number;
    check_suite_node_id?: string;
    check_suite_url?: string;
    conclusion:
      | ('success' | 'failure' | 'neutral' | 'cancelled' | 'timed_out' | 'action_required' | 'skipped' | 'stale')
      | null;
    created_at?: string;
    event?: string;
    head_branch?: string | null;
    head_commit?: {
      author?: {
        email?: string;
        name?: string;
      };
      committer?: {
        email?: string;
        name?: string;
      };
      id?: string;
      message?: string;
      timestamp?: string;
      tree_id?: string;
    };
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string | null;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha?: string;
    html_url?: string;
    id?: number;
    jobs_url?: string;
    logs_url?: string;
    name?: string | null;
    node_id?: string;
    path?: string;
    previous_attempt_url?: string | null;
    pull_requests?: Array<{
      [key: string]: string;
    } | null>;
    referenced_workflows?: Array<{
      path: string;
      ref?: string;
      sha: string;
    }> | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt?: number;
    run_number?: number;
    run_started_at?: string;
    status?: string;
    triggering_actor?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    updated_at?: string;
    url?: string;
    workflow_id?: number;
    workflow_url?: string;
  };
};

export type webhook_workflow_run_requested = {
  action: 'requested';
  enterprise?: enterprise;
  installation?: simple_installation;
  organization?: organization_simple;
  repository: repository;
  sender: simple_user;
  workflow: {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  } | null;
  workflow_run: {
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url: string;
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | 'skipped'
          | 'startup_failure'
        )
      | null;
    created_at: string;
    display_title: string;
    event: string;
    head_branch: string | null;
    head_commit: {
      /**
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: string;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    head_repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    previous_attempt_url: string | null;
    pull_requests: Array<{
      base: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }>;
    referenced_workflows?: Array<{
      path: string;
      ref?: string;
      sha: string;
    }> | null;
    repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    run_started_at: string;
    status: 'requested' | 'in_progress' | 'completed' | 'queued' | 'pending' | 'waiting';
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url: string;
  };
};

/**
 * A GitHub Actions workflow
 */
export type workflow = {
  badge_url: string;
  created_at: string;
  deleted_at?: string;
  html_url: string;
  id: number;
  name: string;
  node_id: string;
  path: string;
  state: 'active' | 'deleted' | 'disabled_fork' | 'disabled_inactivity' | 'disabled_manually';
  updated_at: string;
  url: string;
};

export type state12 = 'active' | 'deleted' | 'disabled_fork' | 'disabled_inactivity' | 'disabled_manually';

/**
 * An invocation of a workflow
 */
export type workflow_run = {
  actor?: simple_user;
  /**
   * The URL to the artifacts for the workflow run.
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   */
  cancel_url: string;
  /**
   * The ID of the associated check suite.
   */
  check_suite_id?: number;
  /**
   * The node ID of the associated check suite.
   */
  check_suite_node_id?: string;
  /**
   * The URL to the associated check suite.
   */
  check_suite_url: string;
  conclusion: string | null;
  created_at: string;
  /**
   * The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
   */
  display_title: string;
  event: string;
  head_branch: string | null;
  head_commit: nullable_simple_commit;
  head_repository: minimal_repository;
  head_repository_id?: number;
  /**
   * The SHA of the head commit that points to the version of the workflow being run.
   */
  head_sha: string;
  html_url: string;
  /**
   * The ID of the workflow run.
   */
  id: number;
  /**
   * The URL to the jobs for the workflow run.
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   */
  logs_url: string;
  /**
   * The name of the workflow run.
   */
  name?: string | null;
  node_id: string;
  /**
   * The full path of the workflow
   */
  path: string;
  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   */
  previous_attempt_url?: string | null;
  pull_requests: Array<pull_request_minimal> | null;
  referenced_workflows?: Array<referenced_workflow> | null;
  repository: minimal_repository;
  /**
   * The URL to rerun the workflow run.
   */
  rerun_url: string;
  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   */
  run_attempt?: number;
  /**
   * The auto incrementing run number for the workflow run.
   */
  run_number: number;
  /**
   * The start time of the latest run. Resets on re-run.
   */
  run_started_at?: string;
  status: string | null;
  triggering_actor?: simple_user;
  updated_at: string;
  /**
   * The URL to the workflow run.
   */
  url: string;
  /**
   * The ID of the parent workflow.
   */
  workflow_id: number;
  /**
   * The URL to the workflow.
   */
  workflow_url: string;
};

/**
 * Workflow Run Usage
 */
export type workflow_run_usage = {
  billable: {
    MACOS?: {
      job_runs?: Array<{
        duration_ms: number;
        job_id: number;
      }>;
      jobs: number;
      total_ms: number;
    };
    UBUNTU?: {
      job_runs?: Array<{
        duration_ms: number;
        job_id: number;
      }>;
      jobs: number;
      total_ms: number;
    };
    WINDOWS?: {
      job_runs?: Array<{
        duration_ms: number;
        job_id: number;
      }>;
      jobs: number;
      total_ms: number;
    };
  };
  run_duration_ms?: number;
};

/**
 * Workflow Usage
 */
export type workflow_usage = {
  billable: {
    MACOS?: {
      total_ms?: number;
    };
    UBUNTU?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
};

/**
 * account_id parameter
 */
export type Parameteraccount_id = number;

/**
 * An explicit key or prefix for identifying the cache
 */
export type Parameteractions_cache_key = string;

/**
 * A key for identifying the cache.
 */
export type Parameteractions_cache_key_required = string;

/**
 * The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
 */
export type Parameteractions_cache_list_sort = 'created_at' | 'last_accessed_at' | 'size_in_bytes';

/**
 * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
 */
export type Parameteractor = string;

/**
 * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
 */
export type Parameteralert_number = alert_number;

/**
 * If `true`, show notifications marked as read.
 */
export type Parameterall = boolean;

export type Parameterapp_slug = string;

/**
 * The unique identifier of the artifact.
 */
export type Parameterartifact_id = number;

/**
 * The unique identifier of the asset.
 */
export type Parameterasset_id = number;

/**
 * The attempt number of the workflow run.
 */
export type Parameterattempt_number = number;

/**
 * The unique identifier of the autolink.
 */
export type Parameterautolink_id = number;

/**
 * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type Parameterbefore = string;

/**
 * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
 */
export type Parameterbranch = string;

/**
 * The unique identifier of the branch policy.
 */
export type Parameterbranch_policy_id = number;

/**
 * The unique identifier of the GitHub Actions cache.
 */
export type Parametercache_id = number;

/**
 * The unique identifier of the card.
 */
export type Parametercard_id = number;

/**
 * Returns check runs with the specified `name`.
 */
export type Parametercheck_name = string;

/**
 * The unique identifier of the check run.
 */
export type Parametercheck_run_id = number;

/**
 * The unique identifier of the check suite.
 */
export type Parametercheck_suite_id = number;

/**
 * The client ID of the GitHub app.
 */
export type Parameterclient_id = string;

/**
 * The name of the codespace.
 */
export type Parametercodespace_name = string;

/**
 * The unique identifier of the column.
 */
export type Parametercolumn_id = number;

/**
 * The unique identifier of the comment.
 */
export type Parametercomment_id = number;

/**
 * The number that identifies the comment.
 */
export type Parametercomment_number = number;

/**
 * The SHA of the commit.
 */
export type Parametercommit_sha = string;

/**
 * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
 */
export type Parametercreated = string;

/**
 * Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
 */
export type Parametercursor = string;

export type Parameterdelivery_id = number;

/**
 * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
 *
 * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
 */
export type Parameterdependabot_alert_comma_separated_ecosystems = string;

/**
 * A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
 */
export type Parameterdependabot_alert_comma_separated_manifests = string;

/**
 * A comma-separated list of package names. If specified, only alerts for these packages will be returned.
 */
export type Parameterdependabot_alert_comma_separated_packages = string;

/**
 * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
 *
 * Can be: `low`, `medium`, `high`, `critical`
 */
export type Parameterdependabot_alert_comma_separated_severities = string;

/**
 * A comma-separated list of states. If specified, only alerts with these states will be returned.
 *
 * Can be: `dismissed`, `fixed`, `open`
 */
export type Parameterdependabot_alert_comma_separated_states = string;

/**
 * The number that identifies a Dependabot alert in its repository.
 * You can find this at the end of the URL for a Dependabot alert within GitHub,
 * or in `number` fields in the response from the
 * `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
 */
export type Parameterdependabot_alert_number = alert_number;

/**
 * The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
 */
export type Parameterdependabot_alert_scope = 'development' | 'runtime';

/**
 * The property by which to sort the results.
 * `created` means when the alert was created.
 * `updated` means when the alert's state last changed.
 */
export type Parameterdependabot_alert_sort = 'created' | 'updated';

/**
 * deployment_id parameter
 */
export type Parameterdeployment_id = number;

/**
 * The direction to sort the results by.
 */
export type Parameterdirection = 'asc' | 'desc';

/**
 * The number that identifies the discussion.
 */
export type Parameterdiscussion_number = number;

/**
 * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 */
export type Parameterenterprise = string;

/**
 * The name of the environment.
 */
export type Parameterenvironment_name = string;

/**
 * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
 */
export type Parameterevent = string;

/**
 * If `true` pull requests are omitted from the response (empty array).
 */
export type Parameterexclude_pull_requests = boolean;

/**
 * The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
 */
export type Parameterexport_id = string;

/**
 * The unique identifier of the gist.
 */
export type Parametergist_id = string;

/**
 * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
 */
export type Parametergit_ref = code_scanning_ref;

/**
 * The unique identifier of the GPG key.
 */
export type Parametergpg_key_id = number;

/**
 * The unique identifier of the hook.
 */
export type Parameterhook_id = number;

/**
 * The unique identifier of the installation.
 */
export type Parameterinstallation_id = number;

/**
 * The unique identifier of the invitation.
 */
export type Parameterinvitation_id = number;

/**
 * The number that identifies the issue.
 */
export type Parameterissue_number = number;

/**
 * The unique identifier of the job.
 */
export type Parameterjob_id = number;

/**
 * The unique identifier of the key.
 */
export type Parameterkey_id = number;

/**
 * A list of comma separated label names. Example: `bug,ui,@high`
 */
export type Parameterlabels = string;

/**
 * The full path, relative to the repository root, of the dependency manifest file.
 */
export type Parametermanifest_path = string;

/**
 * The unique identifier of the migration.
 */
export type Parametermigration_id = number;

/**
 * The number that identifies the milestone.
 */
export type Parametermilestone_number = number;

/**
 * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
 */
export type Parameterorder = 'desc' | 'asc';

/**
 * The organization name. The name is not case sensitive.
 */
export type Parameterorg = string;

/**
 * The action to take.
 *
 * `enable_all` means to enable the specified security feature for all repositories in the organization.
 * `disable_all` means to disable the specified security feature for all repositories in the organization.
 */
export type Parameterorg_security_product_enablement = 'enable_all' | 'disable_all';

/**
 * The account owner of the repository. The name is not case sensitive.
 */
export type Parameterowner = string;

/**
 * The name of the package.
 */
export type Parameterpackage_name = string;

/**
 * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
 */
export type Parameterpackage_type = 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';

/**
 * Unique identifier of the package version.
 */
export type Parameterpackage_version_id = number;

/**
 * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
 *
 * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
 * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 */
export type Parameterpackage_visibility = 'public' | 'private' | 'internal';

/**
 * Page number of the results to fetch.
 */
export type Parameterpage = number;

/**
 * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
 */
export type Parameterpagination_after = string;

/**
 * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
 */
export type Parameterpagination_before = string;

/**
 * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
 * This parameter must not be used in combination with `last`.
 * Instead, use `per_page` in combination with `after` to fetch the first page of results.
 */
export type Parameterpagination_first = number;

/**
 * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
 * This parameter must not be used in combination with `first`.
 * Instead, use `per_page` in combination with `before` to fetch the last page of results.
 */
export type Parameterpagination_last = number;

/**
 * If `true`, only shows notifications in which the user is directly participating or mentioned.
 */
export type Parameterparticipating = boolean;

/**
 * The time frame to display results for.
 */
export type Parameterper = 'day' | 'week';

/**
 * The number of results per page (max 100).
 */
export type Parameterper_page = number;

/**
 * The unique identifier of the plan.
 */
export type Parameterplan_id = number;

/**
 * The unique identifier of the project.
 */
export type Parameterproject_id = number;

/**
 * The number that identifies the pull request.
 */
export type Parameterpull_number = number;

/**
 * The unique identifier of the reaction.
 */
export type Parameterreaction_id = number;

/**
 * The unique identifier of the release.
 */
export type Parameterrelease_id = number;

/**
 * The name of the repository. The name is not case sensitive.
 */
export type Parameterrepo = string;

/**
 * repo_name parameter
 */
export type Parameterrepo_name = string;

/**
 * The ID of the required workflow that has run at least once in a repository.
 */
export type Parameterrepo_required_workflow_id = number;

/**
 * The unique identifier of the repository.
 */
export type Parameterrepository_id = number;

/**
 * ID of the Repository to filter on
 */
export type Parameterrepository_id_in_query = number;

/**
 * The unique identifier of the required workflow.
 */
export type Parameterrequired_workflow_id = number;

/**
 * The unique identifier of the review.
 */
export type Parameterreview_id = number;

/**
 * The unique identifier of the workflow run.
 */
export type Parameterrun_id = number;

/**
 * Unique identifier of the self-hosted runner.
 */
export type Parameterrunner_id = number;

/**
 * The name of a self-hosted runner's custom label.
 */
export type Parameterrunner_label_name = string;

/**
 * The name of the secret.
 */
export type Parametersecret_name = string;

/**
 * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
 */
export type Parametersecret_scanning_alert_resolution = string;

/**
 * A comma-separated list of secret types to return. By default all secret types are returned.
 * See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
 * for a complete list of secret types.
 */
export type Parametersecret_scanning_alert_secret_type = string;

/**
 * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
 */
export type Parametersecret_scanning_alert_sort = 'created' | 'updated';

/**
 * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
 */
export type Parametersecret_scanning_alert_state = 'open' | 'resolved';

/**
 * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
 */
export type Parametersecret_scanning_pagination_after_org_repo = string;

/**
 * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
 */
export type Parametersecret_scanning_pagination_before_org_repo = string;

/**
 * The security feature to enable or disable.
 */
export type Parametersecurity_product =
  | 'dependency_graph'
  | 'dependabot_alerts'
  | 'dependabot_security_updates'
  | 'advanced_security'
  | 'secret_scanning'
  | 'secret_scanning_push_protection';

/**
 * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type Parametersince = string;

/**
 * An organization ID. Only return organizations with an ID greater than this ID.
 */
export type Parametersince_org = number;

/**
 * A repository ID. Only return repositories with an ID greater than this ID.
 */
export type Parametersince_repo = number;

/**
 * A user ID. Only return users with an ID greater than this ID.
 */
export type Parametersince_user = number;

/**
 * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
 */
export type Parametersort = 'created' | 'updated';

/**
 * The unique identifier of the SSH signing key.
 */
export type Parameterssh_signing_key_id = number;

/**
 * Returns check runs with the specified `status`.
 */
export type Parameterstatus = 'queued' | 'in_progress' | 'completed';

/**
 * The unique identifier of the tag protection.
 */
export type Parametertag_protection_id = number;

/**
 * The unique identifier of the team.
 */
export type Parameterteam_id = number;

/**
 * The slug of the team name.
 */
export type Parameterteam_slug = string;

/**
 * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
 */
export type Parameterthread_id = number;

/**
 * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
 */
export type Parametertool_guid = code_scanning_analysis_tool_guid;

/**
 * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
 */
export type Parametertool_name = code_scanning_analysis_tool_name;

/**
 * The handle for the GitHub user account.
 */
export type Parameterusername = string;

/**
 * The name of the variable.
 */
export type Parametervariable_name = string;

/**
 * The number of results per page (max 30).
 */
export type Parametervariables_per_page = number;

/**
 * The ID of the workflow. You can also pass the workflow file name as a string.
 */
export type Parameterworkflow_id = number | string;

/**
 * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
 */
export type Parameterworkflow_run_branch = string;

/**
 * Returns workflow runs with the `check_suite_id` that you specify.
 */
export type Parameterworkflow_run_check_suite_id = number;

/**
 * Only returns workflow runs that are associated with the specified `head_sha`.
 */
export type Parameterworkflow_run_head_sha = string;

/**
 * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
 */
export type Parameterworkflow_run_status =
  | 'completed'
  | 'action_required'
  | 'cancelled'
  | 'failure'
  | 'neutral'
  | 'skipped'
  | 'stale'
  | 'success'
  | 'timed_out'
  | 'in_progress'
  | 'queued'
  | 'requested'
  | 'waiting'
  | 'pending';

export type MetaRootResponse = root;

export type MetaRootError = string;

export type AppsGetAuthenticatedResponse = integration;

export type AppsGetAuthenticatedError = string;

export type AppsCreateFromManifestData = {
  path: {
    code: string;
  };
};

export type AppsCreateFromManifestResponse = integration & {
  client_id: string;
  client_secret: string;
  pem: string;
  webhook_secret: string | null;
};

export type AppsCreateFromManifestError = basic_error | validation_error_simple;

export type AppsGetWebhookConfigForAppResponse = webhook_config;

export type AppsGetWebhookConfigForAppError = string;

export type AppsUpdateWebhookConfigForAppData = {
  body: {
    content_type?: webhook_config_content_type;
    insecure_ssl?: webhook_config_insecure_ssl;
    secret?: webhook_config_secret;
    url?: webhook_config_url;
  };
};

export type AppsUpdateWebhookConfigForAppResponse = webhook_config;

export type AppsUpdateWebhookConfigForAppError = string;

export type AppsListWebhookDeliveriesData = {
  query?: {
    /**
     * Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
     */
    cursor?: string;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    redelivery?: boolean;
  };
};

export type AppsListWebhookDeliveriesResponse = Array<hook_delivery_item>;

export type AppsListWebhookDeliveriesError = basic_error | validation_error;

export type AppsGetWebhookDeliveryData = {
  path: {
    delivery_id: number;
  };
};

export type AppsGetWebhookDeliveryResponse = hook_delivery;

export type AppsGetWebhookDeliveryError = basic_error | validation_error;

export type AppsRedeliverWebhookDeliveryData = {
  path: {
    delivery_id: number;
  };
};

export type AppsRedeliverWebhookDeliveryResponse = {
  [key: string]: string;
};

export type AppsRedeliverWebhookDeliveryError = basic_error | validation_error;

export type AppsListInstallationsData = {
  query?: {
    outdated?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
  };
};

export type AppsListInstallationsResponse = Array<installation>;

export type AppsListInstallationsError = string;

export type AppsDeleteInstallationData = {
  path: {
    /**
     * The unique identifier of the installation.
     */
    installation_id: number;
  };
};

export type AppsDeleteInstallationResponse = {};

export type AppsDeleteInstallationError = basic_error;

export type AppsGetInstallationData = {
  path: {
    /**
     * The unique identifier of the installation.
     */
    installation_id: number;
  };
};

export type AppsGetInstallationResponse = installation;

export type AppsGetInstallationError = basic_error;

export type AppsCreateInstallationAccessTokenData = {
  body?: {
    permissions?: app_permissions;
    /**
     * List of repository names that the token should have access to
     */
    repositories?: Array<string>;
    /**
     * List of repository IDs that the token should have access to
     */
    repository_ids?: Array<number>;
  };
  path: {
    /**
     * The unique identifier of the installation.
     */
    installation_id: number;
  };
};

export type AppsCreateInstallationAccessTokenResponse = installation_token;

export type AppsCreateInstallationAccessTokenError = basic_error | validation_error;

export type AppsUnsuspendInstallationData = {
  path: {
    /**
     * The unique identifier of the installation.
     */
    installation_id: number;
  };
};

export type AppsUnsuspendInstallationResponse = {};

export type AppsUnsuspendInstallationError = basic_error;

export type AppsSuspendInstallationData = {
  path: {
    /**
     * The unique identifier of the installation.
     */
    installation_id: number;
  };
};

export type AppsSuspendInstallationResponse = {};

export type AppsSuspendInstallationError = basic_error;

export type AppsDeleteAuthorizationData = {
  body: {
    /**
     * The OAuth access token used to authenticate to the GitHub API.
     */
    access_token: string;
  };
  path: {
    /**
     * The client ID of the GitHub app.
     */
    client_id: string;
  };
};

export type AppsDeleteAuthorizationResponse = {};

export type AppsDeleteAuthorizationError = validation_error;

export type AppsDeleteTokenData = {
  body: {
    /**
     * The OAuth access token used to authenticate to the GitHub API.
     */
    access_token: string;
  };
  path: {
    /**
     * The client ID of the GitHub app.
     */
    client_id: string;
  };
};

export type AppsDeleteTokenResponse = {};

export type AppsDeleteTokenError = validation_error;

export type AppsResetTokenData = {
  body: {
    /**
     * The access_token of the OAuth application.
     */
    access_token: string;
  };
  path: {
    /**
     * The client ID of the GitHub app.
     */
    client_id: string;
  };
};

export type AppsResetTokenResponse = authorization;

export type AppsResetTokenError = validation_error;

export type AppsCheckTokenData = {
  body: {
    /**
     * The access_token of the OAuth application.
     */
    access_token: string;
  };
  path: {
    /**
     * The client ID of the GitHub app.
     */
    client_id: string;
  };
};

export type AppsCheckTokenResponse = authorization;

export type AppsCheckTokenError = basic_error | validation_error;

export type AppsScopeTokenData = {
  body: {
    /**
     * The access token used to authenticate to the GitHub API.
     */
    access_token: string;
    permissions?: app_permissions;
    /**
     * The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
     */
    repositories?: Array<string>;
    /**
     * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
     */
    repository_ids?: Array<number>;
    /**
     * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
     */
    target?: string;
    /**
     * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
     */
    target_id?: number;
  };
  path: {
    /**
     * The client ID of the GitHub app.
     */
    client_id: string;
  };
};

export type AppsScopeTokenResponse = authorization;

export type AppsScopeTokenError = basic_error | validation_error;

export type AppsGetBySlugData = {
  path: {
    app_slug: string;
  };
};

export type AppsGetBySlugResponse = integration;

export type AppsGetBySlugError = basic_error;

export type CodesOfConductGetAllCodesOfConductResponse = Array<code_of_conduct>;

export type CodesOfConductGetAllCodesOfConductError = string;

export type CodesOfConductGetConductCodeData = {
  path: {
    key: string;
  };
};

export type CodesOfConductGetConductCodeResponse = code_of_conduct;

export type CodesOfConductGetConductCodeError = string | basic_error;

export type EmojisGetResponse = {
  [key: string]: string;
};

export type EmojisGetError = string;

export type DependabotListAlertsForEnterpriseData = {
  path: {
    /**
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
  };
  query?: {
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
     */
    after?: string;
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
     */
    before?: string;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
     *
     * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
     */
    ecosystem?: string;
    /**
     * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
     * This parameter must not be used in combination with `last`.
     * Instead, use `per_page` in combination with `after` to fetch the first page of results.
     */
    first?: number;
    /**
     * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
     * This parameter must not be used in combination with `first`.
     * Instead, use `per_page` in combination with `before` to fetch the last page of results.
     */
    last?: number;
    /**
     * A comma-separated list of package names. If specified, only alerts for these packages will be returned.
     */
    package?: string;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
     */
    scope?: 'development' | 'runtime';
    /**
     * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
     *
     * Can be: `low`, `medium`, `high`, `critical`
     */
    severity?: string;
    /**
     * The property by which to sort the results.
     * `created` means when the alert was created.
     * `updated` means when the alert's state last changed.
     */
    sort?: 'created' | 'updated';
    /**
     * A comma-separated list of states. If specified, only alerts with these states will be returned.
     *
     * Can be: `dismissed`, `fixed`, `open`
     */
    state?: string;
  };
};

export type DependabotListAlertsForEnterpriseResponse = Array<dependabot_alert_with_repository>;

export type DependabotListAlertsForEnterpriseError = string | basic_error | validation_error_simple;

export type SecretScanningListAlertsForEnterpriseData = {
  path: {
    /**
     * The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     */
    enterprise: string;
  };
  query?: {
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
     */
    after?: string;
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
     */
    before?: string;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     */
    resolution?: string;
    /**
     * A comma-separated list of secret types to return. By default all secret types are returned.
     * See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     * for a complete list of secret types.
     */
    secret_type?: string;
    /**
     * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
     */
    sort?: 'created' | 'updated';
    /**
     * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     */
    state?: 'open' | 'resolved';
  };
};

export type SecretScanningListAlertsForEnterpriseResponse = Array<organization_secret_scanning_alert>;

export type SecretScanningListAlertsForEnterpriseError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type ActivityListPublicEventsData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListPublicEventsResponse = Array<event>;

export type ActivityListPublicEventsError =
  | string
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type ActivityGetFeedsResponse = feed;

export type ActivityGetFeedsError = string;

export type GistsListData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
  };
};

export type GistsListResponse = Array<base_gist>;

export type GistsListError = string | basic_error;

export type GistsCreateData = {
  body: {
    /**
     * Description of the gist
     */
    description?: string;
    /**
     * Names and content for the files that make up the gist
     */
    files: {
      [key: string]: {
        /**
         * Content of the file
         */
        content: string;
      };
    };
    public?: boolean | 'true' | 'false';
  };
};

export type GistsCreateResponse = gist_simple;

export type GistsCreateError = string | basic_error | validation_error;

export type GistsListPublicData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
  };
};

export type GistsListPublicResponse = Array<base_gist>;

export type GistsListPublicError = string | basic_error | validation_error;

export type GistsListStarredData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
  };
};

export type GistsListStarredResponse = Array<base_gist>;

export type GistsListStarredError = string | basic_error;

export type GistsDeleteData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsDeleteResponse = {};

export type GistsDeleteError = string | basic_error;

export type GistsGetData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsGetResponse = gist_simple;

export type GistsGetError =
  | string
  | {
      block?: {
        created_at?: string;
        html_url?: string | null;
        reason?: string;
      };
      documentation_url?: string;
      message?: string;
    }
  | basic_error;

export type GistsUpdateData = {
  body:
    | (
        | string
        | {
            /**
             * The description of the gist.
             */
            description?: string;
            /**
             * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
             * (including extension) of the targeted gist file. For example: `hello.py`.
             *
             * To delete a file, set the whole file to null. For example: `hello.py : null`.
             */
            files?: {
              [key: string]:
                | (
                    | string
                    | {
                        [key: string]: string;
                      }
                    | {
                        /**
                         * The new content of the file.
                         */
                        content?: string;
                        /**
                         * The new filename for the file.
                         */
                        filename?: string | null;
                      }
                  )
                | null;
            };
          }
      )
    | null;
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsUpdateResponse = gist_simple;

export type GistsUpdateError = basic_error | validation_error;

export type GistsListCommentsData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type GistsListCommentsResponse = Array<gist_comment>;

export type GistsListCommentsError = string | basic_error;

export type GistsCreateCommentData = {
  body: {
    /**
     * The comment text.
     */
    body: string;
  };
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsCreateCommentResponse = gist_comment;

export type GistsCreateCommentError = string | basic_error;

export type GistsDeleteCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsDeleteCommentResponse = {};

export type GistsDeleteCommentError = string | basic_error;

export type GistsGetCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsGetCommentResponse = gist_comment;

export type GistsGetCommentError =
  | string
  | {
      block?: {
        created_at?: string;
        html_url?: string | null;
        reason?: string;
      };
      documentation_url?: string;
      message?: string;
    }
  | basic_error;

export type GistsUpdateCommentData = {
  body: {
    /**
     * The comment text.
     */
    body: string;
  };
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsUpdateCommentResponse = gist_comment;

export type GistsUpdateCommentError = basic_error;

export type GistsListCommitsData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type GistsListCommitsResponse = Array<gist_commit>;

export type GistsListCommitsError = string | basic_error;

export type GistsListForksData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type GistsListForksResponse = Array<gist_simple>;

export type GistsListForksError = string | basic_error;

export type GistsForkData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsForkResponse = base_gist;

export type GistsForkError = string | basic_error | validation_error;

export type GistsUnstarData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsUnstarResponse = {};

export type GistsUnstarError = string | basic_error;

export type GistsCheckIsStarredData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsCheckIsStarredResponse = {};

export type GistsCheckIsStarredError =
  | string
  | basic_error
  | {
      [key: string]: string;
    };

export type GistsStarData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
  };
};

export type GistsStarResponse = {};

export type GistsStarError = string | basic_error;

export type GistsGetRevisionData = {
  path: {
    /**
     * The unique identifier of the gist.
     */
    gist_id: string;
    sha: string;
  };
};

export type GistsGetRevisionResponse = gist_simple;

export type GistsGetRevisionError = basic_error | validation_error;

export type GitignoreGetAllTemplatesResponse = Array<string>;

export type GitignoreGetAllTemplatesError = string;

export type GitignoreGetTemplateData = {
  path: {
    name: string;
  };
};

export type GitignoreGetTemplateResponse = gitignore_template;

export type GitignoreGetTemplateError = string;

export type AppsListReposAccessibleToInstallationData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type AppsListReposAccessibleToInstallationResponse = {
  repositories: Array<repository>;
  repository_selection?: string;
  total_count: number;
};

export type AppsListReposAccessibleToInstallationError = string | basic_error;

export type AppsRevokeInstallationAccessTokenResponse = {};

export type AppsRevokeInstallationAccessTokenError = string;

export type IssuesListData = {
  query?: {
    collab?: boolean;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
     */
    filter?: 'assigned' | 'created' | 'mentioned' | 'subscribed' | 'repos' | 'all';
    /**
     * A list of comma separated label names. Example: `bug,ui,@high`
     */
    labels?: string;
    orgs?: boolean;
    owned?: boolean;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    pulls?: boolean;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    /**
     * What to sort results by.
     */
    sort?: 'created' | 'updated' | 'comments';
    /**
     * Indicates the state of the issues to return.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type IssuesListResponse = Array<issue>;

export type IssuesListError = string | basic_error | validation_error;

export type LicensesGetAllCommonlyUsedData = {
  query?: {
    featured?: boolean;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type LicensesGetAllCommonlyUsedResponse = Array<license_simple>;

export type LicensesGetAllCommonlyUsedError = string;

export type LicensesGetData = {
  path: {
    license: string;
  };
};

export type LicensesGetResponse = license;

export type LicensesGetError = string | basic_error;

export type MarkdownRenderData = {
  body: {
    /**
     * The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
     */
    context?: string;
    /**
     * The rendering mode.
     */
    mode?: 'markdown' | 'gfm';
    /**
     * The Markdown text to render in HTML.
     */
    text: string;
  };
};

export type MarkdownRenderResponse = string;

export type MarkdownRenderError = string;

export type MarkdownRenderRawData = {
  body?: string;
};

export type MarkdownRenderRawResponse = string;

export type MarkdownRenderRawError = string;

export type AppsGetSubscriptionPlanForAccountData = {
  path: {
    /**
     * account_id parameter
     */
    account_id: number;
  };
};

export type AppsGetSubscriptionPlanForAccountResponse = marketplace_purchase;

export type AppsGetSubscriptionPlanForAccountError = basic_error;

export type AppsListPlansData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type AppsListPlansResponse = Array<marketplace_listing_plan>;

export type AppsListPlansError = basic_error;

export type AppsListAccountsForPlanData = {
  path: {
    /**
     * The unique identifier of the plan.
     */
    plan_id: number;
  };
  query?: {
    /**
     * To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
     */
    sort?: 'created' | 'updated';
  };
};

export type AppsListAccountsForPlanResponse = Array<marketplace_purchase>;

export type AppsListAccountsForPlanError = basic_error | validation_error;

export type AppsGetSubscriptionPlanForAccountStubbedData = {
  path: {
    /**
     * account_id parameter
     */
    account_id: number;
  };
};

export type AppsGetSubscriptionPlanForAccountStubbedResponse = marketplace_purchase;

export type AppsGetSubscriptionPlanForAccountStubbedError = basic_error | string;

export type AppsListPlansStubbedData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type AppsListPlansStubbedResponse = Array<marketplace_listing_plan>;

export type AppsListPlansStubbedError = basic_error;

export type AppsListAccountsForPlanStubbedData = {
  path: {
    /**
     * The unique identifier of the plan.
     */
    plan_id: number;
  };
  query?: {
    /**
     * To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
     */
    sort?: 'created' | 'updated';
  };
};

export type AppsListAccountsForPlanStubbedResponse = Array<marketplace_purchase>;

export type AppsListAccountsForPlanStubbedError = basic_error;

export type MetaGetResponse = api_overview;

export type MetaGetError = string;

export type ActivityListPublicEventsForRepoNetworkData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListPublicEventsForRepoNetworkResponse = Array<event>;

export type ActivityListPublicEventsForRepoNetworkError = basic_error | string;

export type ActivityListNotificationsForAuthenticatedUserData = {
  query?: {
    /**
     * If `true`, show notifications marked as read.
     */
    all?: boolean;
    /**
     * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    before?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * If `true`, only shows notifications in which the user is directly participating or mentioned.
     */
    participating?: boolean;
    /**
     * The number of results per page (max 50).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
  };
};

export type ActivityListNotificationsForAuthenticatedUserResponse = Array<thread>;

export type ActivityListNotificationsForAuthenticatedUserError = string | basic_error | validation_error;

export type ActivityMarkNotificationsAsReadData = {
  body?: {
    /**
     * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
     */
    last_read_at?: string;
    /**
     * Whether the notification has been read.
     */
    read?: boolean;
  };
};

export type ActivityMarkNotificationsAsReadResponse =
  | {
      message?: string;
    }
  | string;

export type ActivityMarkNotificationsAsReadError = string | basic_error;

export type ActivityGetThreadData = {
  path: {
    /**
     * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
     */
    thread_id: number;
  };
};

export type ActivityGetThreadResponse = thread;

export type ActivityGetThreadError = string | basic_error;

export type ActivityMarkThreadAsReadData = {
  path: {
    /**
     * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
     */
    thread_id: number;
  };
};

export type ActivityMarkThreadAsReadResponse = string;

export type ActivityMarkThreadAsReadError = string | basic_error;

export type ActivityDeleteThreadSubscriptionData = {
  path: {
    /**
     * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
     */
    thread_id: number;
  };
};

export type ActivityDeleteThreadSubscriptionResponse = {};

export type ActivityDeleteThreadSubscriptionError = string | basic_error;

export type ActivityGetThreadSubscriptionForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
     */
    thread_id: number;
  };
};

export type ActivityGetThreadSubscriptionForAuthenticatedUserResponse = thread_subscription;

export type ActivityGetThreadSubscriptionForAuthenticatedUserError = string | basic_error;

export type ActivitySetThreadSubscriptionData = {
  body?: {
    /**
     * Whether to block all notifications from a thread.
     */
    ignored?: boolean;
  };
  path: {
    /**
     * The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)).
     */
    thread_id: number;
  };
};

export type ActivitySetThreadSubscriptionResponse = thread_subscription;

export type ActivitySetThreadSubscriptionError = string | basic_error;

export type MetaGetOctocatData = {
  query?: {
    /**
     * The words to show in Octocat's speech bubble
     */
    s?: string;
  };
};

export type MetaGetOctocatResponse = string;

export type MetaGetOctocatError = string;

export type OrgsListData = {
  query?: {
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * An organization ID. Only return organizations with an ID greater than this ID.
     */
    since?: number;
  };
};

export type OrgsListResponse = Array<organization_simple>;

export type OrgsListError = string;

export type OrgsGetData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsGetResponse = organization_full;

export type OrgsGetError = basic_error;

export type OrgsUpdateData = {
  body?: {
    /**
     * Whether GitHub Advanced Security is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    advanced_security_enabled_for_new_repositories?: boolean;
    /**
     * Billing email address. This address is not publicized.
     */
    billing_email?: string;
    blog?: string;
    /**
     * The company name.
     */
    company?: string;
    /**
     * Default permission level members have for organization repositories.
     */
    default_repository_permission?: 'read' | 'write' | 'admin' | 'none';
    /**
     * Whether Dependabot alerts is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependabot_alerts_enabled_for_new_repositories?: boolean;
    /**
     * Whether Dependabot security updates is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependabot_security_updates_enabled_for_new_repositories?: boolean;
    /**
     * Whether dependency graph is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependency_graph_enabled_for_new_repositories?: boolean;
    /**
     * The description of the company.
     */
    description?: string;
    /**
     * The publicly visible email address.
     */
    email?: string;
    /**
     * Whether an organization can use organization projects.
     */
    has_organization_projects?: boolean;
    /**
     * Whether repositories that belong to the organization can use repository projects.
     */
    has_repository_projects?: boolean;
    /**
     * The location.
     */
    location?: string;
    /**
     * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
     * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
     */
    members_allowed_repository_creation_type?: 'all' | 'private' | 'none';
    /**
     * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_internal_repositories?: boolean;
    /**
     * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
     */
    members_can_create_pages?: boolean;
    /**
     * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
     */
    members_can_create_private_pages?: boolean;
    /**
     * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_private_repositories?: boolean;
    /**
     * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
     */
    members_can_create_public_pages?: boolean;
    /**
     * Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_public_repositories?: boolean;
    /**
     * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
     */
    members_can_create_repositories?: boolean;
    /**
     * Whether organization members can fork private organization repositories.
     */
    members_can_fork_private_repositories?: boolean;
    /**
     * The shorthand name of the company.
     */
    name?: string;
    /**
     * Whether secret scanning is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    secret_scanning_enabled_for_new_repositories?: boolean;
    /**
     * If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
     */
    secret_scanning_push_protection_custom_link?: string;
    /**
     * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
     */
    secret_scanning_push_protection_custom_link_enabled?: boolean;
    /**
     * Whether secret scanning push protection is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
    /**
     * The Twitter username of the company.
     */
    twitter_username?: string;
    /**
     * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
     */
    web_commit_signoff_required?: boolean;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsUpdateResponse = organization_full;

export type OrgsUpdateError = basic_error | (validation_error | validation_error_simple);

export type ActionsGetActionsCacheUsageForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsGetActionsCacheUsageForOrgResponse = actions_cache_usage_org_enterprise;

export type ActionsGetActionsCacheUsageForOrgError = string;

export type ActionsGetActionsCacheUsageByRepoForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsGetActionsCacheUsageByRepoForOrgResponse = {
  repository_cache_usages: Array<actions_cache_usage_by_repository>;
  total_count: number;
};

export type ActionsGetActionsCacheUsageByRepoForOrgError = string;

export type OidcGetOidcCustomSubTemplateForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OidcGetOidcCustomSubTemplateForOrgResponse = oidc_custom_sub;

export type OidcGetOidcCustomSubTemplateForOrgError = string;

export type OidcUpdateOidcCustomSubTemplateForOrgData = {
  body: oidc_custom_sub;
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OidcUpdateOidcCustomSubTemplateForOrgResponse = empty_object;

export type OidcUpdateOidcCustomSubTemplateForOrgError = basic_error;

export type ActionsGetGithubActionsPermissionsOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsGetGithubActionsPermissionsOrganizationResponse = actions_organization_permissions;

export type ActionsGetGithubActionsPermissionsOrganizationError = string;

export type ActionsSetGithubActionsPermissionsOrganizationData = {
  body: {
    allowed_actions?: allowed_actions;
    enabled_repositories: enabled_repositories;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsSetGithubActionsPermissionsOrganizationResponse = {};

export type ActionsSetGithubActionsPermissionsOrganizationError = string;

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResponse = {
  repositories: Array<repository>;
  total_count: number;
};

export type ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationError = string;

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationData = {
  body: {
    /**
     * List of repository IDs to enable for GitHub Actions.
     */
    selected_repository_ids: Array<number>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationResponse = {};

export type ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationError = string;

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationResponse = {};

export type ActionsDisableSelectedRepositoryGithubActionsOrganizationError = string;

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationResponse = {};

export type ActionsEnableSelectedRepositoryGithubActionsOrganizationError = string;

export type ActionsGetAllowedActionsOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsGetAllowedActionsOrganizationResponse = selected_actions;

export type ActionsGetAllowedActionsOrganizationError = string;

export type ActionsSetAllowedActionsOrganizationData = {
  body?: selected_actions;
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsSetAllowedActionsOrganizationResponse = {};

export type ActionsSetAllowedActionsOrganizationError = string;

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationResponse =
  actions_get_default_workflow_permissions;

export type ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationError = string;

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationData = {
  body?: actions_set_default_workflow_permissions;
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationResponse = {};

export type ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationError = string;

export type ActionsListRequiredWorkflowsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListRequiredWorkflowsResponse = {
  required_workflows: Array<required_workflow>;
  total_count: number;
};

export type ActionsListRequiredWorkflowsError = string;

export type ActionsCreateRequiredWorkflowData = {
  body: {
    /**
     * The ID of the repository that contains the workflow file.
     */
    repository_id: string;
    /**
     * Enable the required workflow for all repositories or selected repositories in the organization.
     */
    scope?: 'selected' | 'all';
    /**
     * A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.
     */
    selected_repository_ids?: Array<number>;
    /**
     * Path of the workflow file to be configured as a required workflow.
     */
    workflow_file_path: string;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsCreateRequiredWorkflowResponse = required_workflow;

export type ActionsCreateRequiredWorkflowError = validation_error_simple;

export type ActionsDeleteRequiredWorkflowData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the required workflow.
     */
    required_workflow_id: number;
  };
};

export type ActionsDeleteRequiredWorkflowResponse = {};

export type ActionsDeleteRequiredWorkflowError = string;

export type ActionsGetRequiredWorkflowData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the required workflow.
     */
    required_workflow_id: number;
  };
};

export type ActionsGetRequiredWorkflowResponse = required_workflow;

export type ActionsGetRequiredWorkflowError = string;

export type ActionsUpdateRequiredWorkflowData = {
  body: {
    /**
     * The ID of the repository that contains the workflow file.
     */
    repository_id?: string;
    /**
     * Enable the required workflow for all repositories or selected repositories in the organization.
     */
    scope?: 'selected' | 'all';
    /**
     * A list of repository IDs where you want to enable the required workflow. A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.
     */
    selected_repository_ids?: Array<number>;
    /**
     * Path of the workflow file to be configured as a required workflow.
     */
    workflow_file_path?: string;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the required workflow.
     */
    required_workflow_id: number;
  };
};

export type ActionsUpdateRequiredWorkflowResponse = required_workflow;

export type ActionsUpdateRequiredWorkflowError = validation_error_simple;

export type ActionsListSelectedRepositoriesRequiredWorkflowData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the required workflow.
     */
    required_workflow_id: number;
  };
};

export type ActionsListSelectedRepositoriesRequiredWorkflowResponse = {
  repositories: Array<repository>;
  total_count: number;
};

export type ActionsListSelectedRepositoriesRequiredWorkflowError = string;

export type ActionsSetSelectedReposToRequiredWorkflowData = {
  body: {
    /**
     * The IDs of the repositories for which the workflow should be required.
     */
    selected_repository_ids: Array<number>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the required workflow.
     */
    required_workflow_id: number;
  };
};

export type ActionsSetSelectedReposToRequiredWorkflowResponse = {};

export type ActionsSetSelectedReposToRequiredWorkflowError = string;

export type ActionsRemoveSelectedRepoFromRequiredWorkflowData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
    /**
     * The unique identifier of the required workflow.
     */
    required_workflow_id: number;
  };
};

export type ActionsRemoveSelectedRepoFromRequiredWorkflowResponse = {};

export type ActionsRemoveSelectedRepoFromRequiredWorkflowError = string;

export type ActionsAddSelectedRepoToRequiredWorkflowData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
    /**
     * The unique identifier of the required workflow.
     */
    required_workflow_id: number;
  };
};

export type ActionsAddSelectedRepoToRequiredWorkflowResponse = {};

export type ActionsAddSelectedRepoToRequiredWorkflowError = string;

export type ActionsListSelfHostedRunnersForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListSelfHostedRunnersForOrgResponse = {
  runners: Array<runner>;
  total_count: number;
};

export type ActionsListSelfHostedRunnersForOrgError = string;

export type ActionsListRunnerApplicationsForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsListRunnerApplicationsForOrgResponse = Array<runner_application>;

export type ActionsListRunnerApplicationsForOrgError = string;

export type ActionsCreateRegistrationTokenForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsCreateRegistrationTokenForOrgResponse = authentication_token;

export type ActionsCreateRegistrationTokenForOrgError = string;

export type ActionsCreateRemoveTokenForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsCreateRemoveTokenForOrgResponse = authentication_token;

export type ActionsCreateRemoveTokenForOrgError = string;

export type ActionsDeleteSelfHostedRunnerFromOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsDeleteSelfHostedRunnerFromOrgResponse = {};

export type ActionsDeleteSelfHostedRunnerFromOrgError = string;

export type ActionsGetSelfHostedRunnerForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsGetSelfHostedRunnerForOrgResponse = runner;

export type ActionsGetSelfHostedRunnerForOrgError = string;

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgError = basic_error;

export type ActionsListLabelsForSelfHostedRunnerForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsListLabelsForSelfHostedRunnerForOrgResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsListLabelsForSelfHostedRunnerForOrgError = basic_error;

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrgData = {
  body: {
    /**
     * The names of the custom labels to add to the runner.
     */
    labels: Array<string>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrgResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForOrgError = basic_error | validation_error_simple;

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrgData = {
  body: {
    /**
     * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
     */
    labels: Array<string>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrgResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForOrgError = basic_error | validation_error_simple;

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgData = {
  path: {
    /**
     * The name of a self-hosted runner's custom label.
     */
    name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgError = basic_error | validation_error_simple;

export type ActionsListOrgSecretsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListOrgSecretsResponse = {
  secrets: Array<organization_actions_secret>;
  total_count: number;
};

export type ActionsListOrgSecretsError = string;

export type ActionsGetOrgPublicKeyData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsGetOrgPublicKeyResponse = actions_public_key;

export type ActionsGetOrgPublicKeyError = string;

export type ActionsDeleteOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsDeleteOrgSecretResponse = {};

export type ActionsDeleteOrgSecretError = string;

export type ActionsGetOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsGetOrgSecretResponse = organization_actions_secret;

export type ActionsGetOrgSecretError = string;

export type ActionsCreateOrUpdateOrgSecretData = {
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids?: Array<number>;
    /**
     * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
     */
    visibility: 'all' | 'private' | 'selected';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsCreateOrUpdateOrgSecretResponse = empty_object | {};

export type ActionsCreateOrUpdateOrgSecretError = string;

export type ActionsListSelectedReposForOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListSelectedReposForOrgSecretResponse = {
  repositories: Array<minimal_repository>;
  total_count: number;
};

export type ActionsListSelectedReposForOrgSecretError = string;

export type ActionsSetSelectedReposForOrgSecretData = {
  body: {
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids: Array<number>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsSetSelectedReposForOrgSecretResponse = {};

export type ActionsSetSelectedReposForOrgSecretError = string;

export type ActionsRemoveSelectedRepoFromOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsRemoveSelectedRepoFromOrgSecretResponse = {};

export type ActionsRemoveSelectedRepoFromOrgSecretError = string;

export type ActionsAddSelectedRepoToOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsAddSelectedRepoToOrgSecretResponse = {};

export type ActionsAddSelectedRepoToOrgSecretError = string;

export type ActionsListOrgVariablesData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 30).
     */
    per_page?: number;
  };
};

export type ActionsListOrgVariablesResponse = {
  total_count: number;
  variables: Array<organization_actions_variable>;
};

export type ActionsListOrgVariablesError = string;

export type ActionsCreateOrgVariableData = {
  body: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
     */
    selected_repository_ids?: Array<number>;
    /**
     * The value of the variable.
     */
    value: string;
    /**
     * The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
     */
    visibility: 'all' | 'private' | 'selected';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsCreateOrgVariableResponse = empty_object;

export type ActionsCreateOrgVariableError = string;

export type ActionsDeleteOrgVariableData = {
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsDeleteOrgVariableResponse = {};

export type ActionsDeleteOrgVariableError = string;

export type ActionsGetOrgVariableData = {
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsGetOrgVariableResponse = organization_actions_variable;

export type ActionsGetOrgVariableError = string;

export type ActionsUpdateOrgVariableData = {
  body: {
    /**
     * The name of the variable.
     */
    name?: string;
    /**
     * An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
     */
    selected_repository_ids?: Array<number>;
    /**
     * The value of the variable.
     */
    value?: string;
    /**
     * The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
     */
    visibility?: 'all' | 'private' | 'selected';
  };
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsUpdateOrgVariableResponse = {};

export type ActionsUpdateOrgVariableError = string;

export type ActionsListSelectedReposForOrgVariableData = {
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListSelectedReposForOrgVariableResponse = {
  repositories: Array<minimal_repository>;
  total_count: number;
};

export type ActionsListSelectedReposForOrgVariableError = string;

export type ActionsSetSelectedReposForOrgVariableData = {
  body: {
    /**
     * The IDs of the repositories that can access the organization variable.
     */
    selected_repository_ids: Array<number>;
  };
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ActionsSetSelectedReposForOrgVariableResponse = {};

export type ActionsSetSelectedReposForOrgVariableError = string;

export type ActionsRemoveSelectedRepoFromOrgVariableData = {
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    repository_id: number;
  };
};

export type ActionsRemoveSelectedRepoFromOrgVariableResponse = {};

export type ActionsRemoveSelectedRepoFromOrgVariableError = string;

export type ActionsAddSelectedRepoToOrgVariableData = {
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    repository_id: number;
  };
};

export type ActionsAddSelectedRepoToOrgVariableResponse = {};

export type ActionsAddSelectedRepoToOrgVariableError = string;

export type OrgsListBlockedUsersData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListBlockedUsersResponse = Array<simple_user>;

export type OrgsListBlockedUsersError = string;

export type OrgsUnblockUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsUnblockUserResponse = {};

export type OrgsUnblockUserError = string;

export type OrgsCheckBlockedUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsCheckBlockedUserResponse = {};

export type OrgsCheckBlockedUserError = basic_error;

export type OrgsBlockUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsBlockUserResponse = {};

export type OrgsBlockUserError = validation_error;

export type CodeScanningListAlertsForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
     */
    after?: string;
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
     */
    before?: string;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * If specified, only code scanning alerts with this severity will be returned.
     */
    severity?: code_scanning_alert_severity;
    /**
     * The property by which to sort the results.
     */
    sort?: 'created' | 'updated';
    /**
     * If specified, only code scanning alerts with this state will be returned.
     */
    state?: code_scanning_alert_state;
    /**
     * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
     */
    tool_guid?: code_scanning_analysis_tool_guid;
    /**
     * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
     */
    tool_name?: code_scanning_analysis_tool_name;
  };
};

export type CodeScanningListAlertsForOrgResponse = Array<code_scanning_organization_alert_items>;

export type CodeScanningListAlertsForOrgError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodespacesListInOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type CodespacesListInOrganizationResponse = {
  codespaces: Array<codespace>;
  total_count: number;
};

export type CodespacesListInOrganizationError = string | basic_error;

export type CodespacesSetCodespacesBillingData = {
  body: {
    /**
     * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
     */
    selected_usernames?: Array<string>;
    /**
     * Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
     */
    visibility: 'disabled' | 'selected_members' | 'all_members' | 'all_members_and_outside_collaborators';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type CodespacesSetCodespacesBillingResponse = {};

export type CodespacesSetCodespacesBillingError = string | basic_error | validation_error;

export type CodespacesDeleteCodespacesBillingUsersData = {
  body: {
    /**
     * The usernames of the organization members whose codespaces should not be billed to the organization.
     */
    selected_usernames: Array<string>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type CodespacesDeleteCodespacesBillingUsersResponse = {};

export type CodespacesDeleteCodespacesBillingUsersError = string | basic_error | validation_error;

export type CodespacesSetCodespacesBillingUsersData = {
  body: {
    /**
     * The usernames of the organization members whose codespaces be billed to the organization.
     */
    selected_usernames: Array<string>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type CodespacesSetCodespacesBillingUsersResponse = {};

export type CodespacesSetCodespacesBillingUsersError = string | basic_error | validation_error;

export type CodespacesListOrgSecretsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type CodespacesListOrgSecretsResponse = {
  secrets: Array<codespaces_org_secret>;
  total_count: number;
};

export type CodespacesListOrgSecretsError = string;

export type CodespacesGetOrgPublicKeyData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type CodespacesGetOrgPublicKeyResponse = codespaces_public_key;

export type CodespacesGetOrgPublicKeyError = string;

export type CodespacesDeleteOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesDeleteOrgSecretResponse = {};

export type CodespacesDeleteOrgSecretError = basic_error;

export type CodespacesGetOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesGetOrgSecretResponse = codespaces_org_secret;

export type CodespacesGetOrgSecretError = string;

export type CodespacesCreateOrUpdateOrgSecretData = {
  body: {
    /**
     * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * The ID of the key you used to encrypt the secret.
     */
    key_id?: string;
    /**
     * An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids?: Array<number>;
    /**
     * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
     */
    visibility: 'all' | 'private' | 'selected';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesCreateOrUpdateOrgSecretResponse = empty_object | {};

export type CodespacesCreateOrUpdateOrgSecretError = basic_error | validation_error;

export type CodespacesListSelectedReposForOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type CodespacesListSelectedReposForOrgSecretResponse = {
  repositories: Array<minimal_repository>;
  total_count: number;
};

export type CodespacesListSelectedReposForOrgSecretError = basic_error;

export type CodespacesSetSelectedReposForOrgSecretData = {
  body: {
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids: Array<number>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesSetSelectedReposForOrgSecretResponse = {};

export type CodespacesSetSelectedReposForOrgSecretError = basic_error | string;

export type CodespacesRemoveSelectedRepoFromOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesRemoveSelectedRepoFromOrgSecretResponse = {};

export type CodespacesRemoveSelectedRepoFromOrgSecretError = basic_error | string | validation_error;

export type CodespacesAddSelectedRepoToOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesAddSelectedRepoToOrgSecretResponse = {};

export type CodespacesAddSelectedRepoToOrgSecretError = basic_error | string | validation_error;

export type DependabotListAlertsForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
     */
    after?: string;
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
     */
    before?: string;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
     *
     * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
     */
    ecosystem?: string;
    /**
     * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
     * This parameter must not be used in combination with `last`.
     * Instead, use `per_page` in combination with `after` to fetch the first page of results.
     */
    first?: number;
    /**
     * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
     * This parameter must not be used in combination with `first`.
     * Instead, use `per_page` in combination with `before` to fetch the last page of results.
     */
    last?: number;
    /**
     * A comma-separated list of package names. If specified, only alerts for these packages will be returned.
     */
    package?: string;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
     */
    scope?: 'development' | 'runtime';
    /**
     * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
     *
     * Can be: `low`, `medium`, `high`, `critical`
     */
    severity?: string;
    /**
     * The property by which to sort the results.
     * `created` means when the alert was created.
     * `updated` means when the alert's state last changed.
     */
    sort?: 'created' | 'updated';
    /**
     * A comma-separated list of states. If specified, only alerts with these states will be returned.
     *
     * Can be: `dismissed`, `fixed`, `open`
     */
    state?: string;
  };
};

export type DependabotListAlertsForOrgResponse = Array<dependabot_alert_with_repository>;

export type DependabotListAlertsForOrgError = string | basic_error | validation_error_simple;

export type DependabotListOrgSecretsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type DependabotListOrgSecretsResponse = {
  secrets: Array<organization_dependabot_secret>;
  total_count: number;
};

export type DependabotListOrgSecretsError = string;

export type DependabotGetOrgPublicKeyData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type DependabotGetOrgPublicKeyResponse = dependabot_public_key;

export type DependabotGetOrgPublicKeyError = string;

export type DependabotDeleteOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotDeleteOrgSecretResponse = {};

export type DependabotDeleteOrgSecretError = string;

export type DependabotGetOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotGetOrgSecretResponse = organization_dependabot_secret;

export type DependabotGetOrgSecretError = string;

export type DependabotCreateOrUpdateOrgSecretData = {
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids?: Array<string>;
    /**
     * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
     */
    visibility: 'all' | 'private' | 'selected';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotCreateOrUpdateOrgSecretResponse = empty_object | {};

export type DependabotCreateOrUpdateOrgSecretError = string;

export type DependabotListSelectedReposForOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type DependabotListSelectedReposForOrgSecretResponse = {
  repositories: Array<minimal_repository>;
  total_count: number;
};

export type DependabotListSelectedReposForOrgSecretError = string;

export type DependabotSetSelectedReposForOrgSecretData = {
  body: {
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids: Array<number>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotSetSelectedReposForOrgSecretResponse = {};

export type DependabotSetSelectedReposForOrgSecretError = string;

export type DependabotRemoveSelectedRepoFromOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotRemoveSelectedRepoFromOrgSecretResponse = {};

export type DependabotRemoveSelectedRepoFromOrgSecretError = string;

export type DependabotAddSelectedRepoToOrgSecretData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotAddSelectedRepoToOrgSecretResponse = {};

export type DependabotAddSelectedRepoToOrgSecretError = string;

export type ActivityListPublicOrgEventsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListPublicOrgEventsResponse = Array<event>;

export type ActivityListPublicOrgEventsError = string;

export type OrgsListFailedInvitationsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListFailedInvitationsResponse = Array<organization_invitation>;

export type OrgsListFailedInvitationsError = basic_error;

export type OrgsListWebhooksData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListWebhooksResponse = Array<org_hook>;

export type OrgsListWebhooksError = basic_error;

export type OrgsCreateWebhookData = {
  body: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     */
    active?: boolean;
    /**
     * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
     */
    config: {
      content_type?: webhook_config_content_type;
      insecure_ssl?: webhook_config_insecure_ssl;
      password?: string;
      secret?: webhook_config_secret;
      url: webhook_config_url;
      username?: string;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
     */
    events?: Array<string>;
    /**
     * Must be passed as "web".
     */
    name: string;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsCreateWebhookResponse = org_hook;

export type OrgsCreateWebhookError = basic_error | validation_error;

export type OrgsDeleteWebhookData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsDeleteWebhookResponse = {};

export type OrgsDeleteWebhookError = basic_error;

export type OrgsGetWebhookData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsGetWebhookResponse = org_hook;

export type OrgsGetWebhookError = basic_error;

export type OrgsUpdateWebhookData = {
  body?: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     */
    active?: boolean;
    /**
     * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
     */
    config?: {
      content_type?: webhook_config_content_type;
      insecure_ssl?: webhook_config_insecure_ssl;
      secret?: webhook_config_secret;
      url: webhook_config_url;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
     */
    events?: Array<string>;
    name?: string;
  };
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsUpdateWebhookResponse = org_hook;

export type OrgsUpdateWebhookError = basic_error | validation_error;

export type OrgsGetWebhookConfigForOrgData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsGetWebhookConfigForOrgResponse = webhook_config;

export type OrgsGetWebhookConfigForOrgError = string;

export type OrgsUpdateWebhookConfigForOrgData = {
  body?: {
    content_type?: webhook_config_content_type;
    insecure_ssl?: webhook_config_insecure_ssl;
    secret?: webhook_config_secret;
    url?: webhook_config_url;
  };
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsUpdateWebhookConfigForOrgResponse = webhook_config;

export type OrgsUpdateWebhookConfigForOrgError = string;

export type OrgsListWebhookDeliveriesData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
     */
    cursor?: string;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    redelivery?: boolean;
  };
};

export type OrgsListWebhookDeliveriesResponse = Array<hook_delivery_item>;

export type OrgsListWebhookDeliveriesError = basic_error | validation_error;

export type OrgsGetWebhookDeliveryData = {
  path: {
    delivery_id: number;
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsGetWebhookDeliveryResponse = hook_delivery;

export type OrgsGetWebhookDeliveryError = basic_error | validation_error;

export type OrgsRedeliverWebhookDeliveryData = {
  path: {
    delivery_id: number;
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsRedeliverWebhookDeliveryResponse = {
  [key: string]: string;
};

export type OrgsRedeliverWebhookDeliveryError = basic_error | validation_error;

export type OrgsPingWebhookData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsPingWebhookResponse = {};

export type OrgsPingWebhookError = basic_error;

export type AppsGetOrgInstallationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type AppsGetOrgInstallationResponse = installation;

export type AppsGetOrgInstallationError = string;

export type OrgsListAppInstallationsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListAppInstallationsResponse = {
  installations: Array<installation>;
  total_count: number;
};

export type OrgsListAppInstallationsError = string;

export type InteractionsRemoveRestrictionsForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type InteractionsRemoveRestrictionsForOrgResponse = {};

export type InteractionsRemoveRestrictionsForOrgError = string;

export type InteractionsGetRestrictionsForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type InteractionsGetRestrictionsForOrgResponse =
  | interaction_limit_response
  | {
      [key: string]: string;
    };

export type InteractionsGetRestrictionsForOrgError = string;

export type InteractionsSetRestrictionsForOrgData = {
  body: interaction_limit;
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type InteractionsSetRestrictionsForOrgResponse = interaction_limit_response;

export type InteractionsSetRestrictionsForOrgError = validation_error;

export type OrgsListPendingInvitationsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Filter invitations by their invitation source.
     */
    invitation_source?: 'all' | 'member' | 'scim';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Filter invitations by their member role.
     */
    role?: 'all' | 'admin' | 'direct_member' | 'billing_manager' | 'hiring_manager';
  };
};

export type OrgsListPendingInvitationsResponse = Array<organization_invitation>;

export type OrgsListPendingInvitationsError = basic_error;

export type OrgsCreateInvitationData = {
  body?: {
    /**
     * **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
     */
    email?: string;
    /**
     * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
     */
    invitee_id?: number;
    /**
     * The role for the new member.
     * * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
     * * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
     * * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
     */
    role?: 'admin' | 'direct_member' | 'billing_manager';
    /**
     * Specify IDs for the teams you want to invite new members to.
     */
    team_ids?: Array<number>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsCreateInvitationResponse = organization_invitation;

export type OrgsCreateInvitationError = basic_error | validation_error;

export type OrgsCancelInvitationData = {
  path: {
    /**
     * The unique identifier of the invitation.
     */
    invitation_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsCancelInvitationResponse = {};

export type OrgsCancelInvitationError = basic_error | validation_error;

export type OrgsListInvitationTeamsData = {
  path: {
    /**
     * The unique identifier of the invitation.
     */
    invitation_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListInvitationTeamsResponse = Array<team>;

export type OrgsListInvitationTeamsError = basic_error;

export type IssuesListForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
     */
    filter?: 'assigned' | 'created' | 'mentioned' | 'subscribed' | 'repos' | 'all';
    /**
     * A list of comma separated label names. Example: `bug,ui,@high`
     */
    labels?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    /**
     * What to sort results by.
     */
    sort?: 'created' | 'updated' | 'comments';
    /**
     * Indicates the state of the issues to return.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type IssuesListForOrgResponse = Array<issue>;

export type IssuesListForOrgError = basic_error;

export type OrgsListMembersData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
     */
    filter?: '2fa_disabled' | 'all';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Filter members returned by their role.
     */
    role?: 'all' | 'admin' | 'member';
  };
};

export type OrgsListMembersResponse = Array<simple_user>;

export type OrgsListMembersError = validation_error;

export type OrgsRemoveMemberData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsRemoveMemberResponse = {};

export type OrgsRemoveMemberError = basic_error;

export type OrgsCheckMembershipForUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsCheckMembershipForUserResponse = {};

export type OrgsCheckMembershipForUserError = string | string;

export type CodespacesGetCodespacesForUserInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type CodespacesGetCodespacesForUserInOrgResponse = {
  codespaces: Array<codespace>;
  total_count: number;
};

export type CodespacesGetCodespacesForUserInOrgError = string | basic_error;

export type CodespacesDeleteFromOrganizationData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type CodespacesDeleteFromOrganizationResponse = {
  [key: string]: string;
};

export type CodespacesDeleteFromOrganizationError = string | basic_error;

export type CodespacesStopInOrganizationData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type CodespacesStopInOrganizationResponse = codespace;

export type CodespacesStopInOrganizationError = string | basic_error;

export type OrgsRemoveMembershipForUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsRemoveMembershipForUserResponse = {};

export type OrgsRemoveMembershipForUserError = basic_error;

export type OrgsGetMembershipForUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsGetMembershipForUserResponse = org_membership;

export type OrgsGetMembershipForUserError = basic_error;

export type OrgsSetMembershipForUserData = {
  body?: {
    /**
     * The role to give the user in the organization. Can be one of:
     * * `admin` - The user will become an owner of the organization.
     * * `member` - The user will become a non-owner member of the organization.
     */
    role?: 'admin' | 'member';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsSetMembershipForUserResponse = org_membership;

export type OrgsSetMembershipForUserError = basic_error | validation_error;

export type MigrationsListForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Exclude attributes from the API response to improve performance
     */
    exclude?: Array<'repositories'>;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type MigrationsListForOrgResponse = Array<migration>;

export type MigrationsListForOrgError = string;

export type MigrationsStartForOrgData = {
  body: {
    /**
     * Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.
     */
    exclude?: Array<'repositories'>;
    /**
     * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
     */
    exclude_attachments?: boolean;
    /**
     * Indicates whether the repository git data should be excluded from the migration.
     */
    exclude_git_data?: boolean;
    /**
     * Indicates whether metadata should be excluded and only git source should be included for the migration.
     */
    exclude_metadata?: boolean;
    /**
     * Indicates whether projects owned by the organization or users should be excluded. from the migration.
     */
    exclude_owner_projects?: boolean;
    /**
     * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
     */
    exclude_releases?: boolean;
    /**
     * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
     */
    lock_repositories?: boolean;
    /**
     * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
     */
    org_metadata_only?: boolean;
    /**
     * A list of arrays indicating which repositories should be migrated.
     */
    repositories: Array<string>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type MigrationsStartForOrgResponse = migration;

export type MigrationsStartForOrgError = basic_error | validation_error;

export type MigrationsGetStatusForOrgData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Exclude attributes from the API response to improve performance
     */
    exclude?: Array<'repositories'>;
  };
};

export type MigrationsGetStatusForOrgResponse = migration;

export type MigrationsGetStatusForOrgError = basic_error;

export type MigrationsDeleteArchiveForOrgData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type MigrationsDeleteArchiveForOrgResponse = {};

export type MigrationsDeleteArchiveForOrgError = basic_error;

export type MigrationsDownloadArchiveForOrgData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type MigrationsUnlockRepoForOrgData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * repo_name parameter
     */
    repo_name: string;
  };
};

export type MigrationsUnlockRepoForOrgResponse = {};

export type MigrationsUnlockRepoForOrgError = basic_error;

export type MigrationsListReposForOrgData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type MigrationsListReposForOrgResponse = Array<minimal_repository>;

export type MigrationsListReposForOrgError = basic_error;

export type OrgsListOutsideCollaboratorsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
     */
    filter?: '2fa_disabled' | 'all';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListOutsideCollaboratorsResponse = Array<simple_user>;

export type OrgsListOutsideCollaboratorsError = string;

export type OrgsRemoveOutsideCollaboratorData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsRemoveOutsideCollaboratorResponse = {};

export type OrgsRemoveOutsideCollaboratorError = {
  documentation_url?: string;
  message?: string;
};

export type OrgsConvertMemberToOutsideCollaboratorData = {
  body?: {
    /**
     * When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
     */
    async?: boolean;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsConvertMemberToOutsideCollaboratorResponse =
  | {
      [key: string]: string;
    }
  | {};

export type OrgsConvertMemberToOutsideCollaboratorError = string | basic_error;

export type PackagesListPackagesForOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query: {
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
     *
     * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
     * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
     */
    visibility?: 'public' | 'private' | 'internal';
  };
};

export type PackagesListPackagesForOrganizationResponse = Array<string>;

export type PackagesListPackagesForOrganizationError = basic_error;

export type PackagesDeletePackageForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
};

export type PackagesDeletePackageForOrgResponse = {};

export type PackagesDeletePackageForOrgError = basic_error;

export type PackagesGetPackageForOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
};

export type PackagesGetPackageForOrganizationResponse = _package;

export type PackagesGetPackageForOrganizationError = string;

export type PackagesRestorePackageForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
  query?: {
    /**
     * package token
     */
    token?: string;
  };
};

export type PackagesRestorePackageForOrgResponse = {};

export type PackagesRestorePackageForOrgError = basic_error;

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The state of the package, either active or deleted.
     */
    state?: 'active' | 'deleted';
  };
};

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgResponse = Array<package_version>;

export type PackagesGetAllPackageVersionsForPackageOwnedByOrgError = basic_error;

export type PackagesDeletePackageVersionForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
  };
};

export type PackagesDeletePackageVersionForOrgResponse = {};

export type PackagesDeletePackageVersionForOrgError = basic_error;

export type PackagesGetPackageVersionForOrganizationData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
  };
};

export type PackagesGetPackageVersionForOrganizationResponse = package_version;

export type PackagesGetPackageVersionForOrganizationError = string;

export type PackagesRestorePackageVersionForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
  };
};

export type PackagesRestorePackageVersionForOrgResponse = {};

export type PackagesRestorePackageVersionForOrgError = basic_error;

export type ProjectsListForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Indicates the state of the projects to return.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type ProjectsListForOrgResponse = Array<project>;

export type ProjectsListForOrgError = validation_error_simple;

export type ProjectsCreateForOrgData = {
  body: {
    /**
     * The description of the project.
     */
    body?: string;
    /**
     * The name of the project.
     */
    name: string;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ProjectsCreateForOrgResponse = project;

export type ProjectsCreateForOrgError = basic_error | validation_error_simple;

export type OrgsListPublicMembersData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListPublicMembersResponse = Array<simple_user>;

export type OrgsListPublicMembersError = string;

export type OrgsRemovePublicMembershipForAuthenticatedUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsRemovePublicMembershipForAuthenticatedUserResponse = {};

export type OrgsRemovePublicMembershipForAuthenticatedUserError = string;

export type OrgsCheckPublicMembershipForUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsCheckPublicMembershipForUserResponse = {};

export type OrgsCheckPublicMembershipForUserError = string;

export type OrgsSetPublicMembershipForAuthenticatedUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type OrgsSetPublicMembershipForAuthenticatedUserResponse = {};

export type OrgsSetPublicMembershipForAuthenticatedUserError = basic_error;

export type ReposListForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The property to sort the results by.
     */
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    /**
     * Specifies the types of repositories you want returned.
     */
    type?: 'all' | 'public' | 'private' | 'forks' | 'sources' | 'member';
  };
};

export type ReposListForOrgResponse = Array<minimal_repository>;

export type ReposListForOrgError = string;

export type ReposCreateInOrgData = {
  body: {
    /**
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     */
    allow_auto_merge?: boolean;
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     */
    allow_merge_commit?: boolean;
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     */
    allow_rebase_merge?: boolean;
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     */
    allow_squash_merge?: boolean;
    /**
     * Pass `true` to create an initial commit with empty README.
     */
    auto_init?: boolean;
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
     */
    delete_branch_on_merge?: boolean;
    /**
     * A short description of the repository.
     */
    description?: string;
    /**
     * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
     */
    gitignore_template?: string;
    /**
     * Whether downloads are enabled.
     */
    has_downloads?: boolean;
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     */
    has_issues?: boolean;
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     */
    has_projects?: boolean;
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     */
    has_wiki?: boolean;
    /**
     * A URL with more information about the repository.
     */
    homepage?: string;
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     */
    is_template?: boolean;
    /**
     * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
     */
    license_template?: string;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The name of the repository.
     */
    name: string;
    /**
     * Whether the repository is private.
     */
    private?: boolean;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
     */
    team_id?: number;
    /**
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * @deprecated
     */
    use_squash_pr_title_as_default?: boolean;
    /**
     * The visibility of the repository.
     */
    visibility?: 'public' | 'private';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type ReposCreateInOrgResponse = repository;

export type ReposCreateInOrgError = basic_error | validation_error;

export type SecretScanningListAlertsForOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
     */
    after?: string;
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
     */
    before?: string;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     */
    resolution?: string;
    /**
     * A comma-separated list of secret types to return. By default all secret types are returned.
     * See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     * for a complete list of secret types.
     */
    secret_type?: string;
    /**
     * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
     */
    sort?: 'created' | 'updated';
    /**
     * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     */
    state?: 'open' | 'resolved';
  };
};

export type SecretScanningListAlertsForOrgResponse = Array<organization_secret_scanning_alert>;

export type SecretScanningListAlertsForOrgError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type OrgsListSecurityManagerTeamsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsListSecurityManagerTeamsResponse = Array<team_simple>;

export type OrgsListSecurityManagerTeamsError = string;

export type OrgsRemoveSecurityManagerTeamData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type OrgsRemoveSecurityManagerTeamResponse = {};

export type OrgsRemoveSecurityManagerTeamError = string;

export type OrgsAddSecurityManagerTeamData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type OrgsAddSecurityManagerTeamResponse = {};

export type OrgsAddSecurityManagerTeamError = string;

export type BillingGetGithubActionsBillingOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type BillingGetGithubActionsBillingOrgResponse = actions_billing_usage;

export type BillingGetGithubActionsBillingOrgError = string;

export type BillingGetGithubPackagesBillingOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type BillingGetGithubPackagesBillingOrgResponse = packages_billing_usage;

export type BillingGetGithubPackagesBillingOrgError = string;

export type BillingGetSharedStorageBillingOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type BillingGetSharedStorageBillingOrgResponse = combined_billing_usage;

export type BillingGetSharedStorageBillingOrgError = string;

export type TeamsListData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListResponse = Array<team>;

export type TeamsListError = basic_error;

export type TeamsCreateData = {
  body: {
    /**
     * The description of the team.
     */
    description?: string;
    /**
     * List GitHub IDs for organization members who will become team maintainers.
     */
    maintainers?: Array<string>;
    /**
     * The name of the team.
     */
    name: string;
    /**
     * The ID of a team to set as the parent team.
     */
    parent_team_id?: number;
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     */
    permission?: 'pull' | 'push';
    /**
     * The level of privacy this team should have. The options are:
     * **For a non-nested team:**
     * * `secret` - only visible to organization owners and members of this team.
     * * `closed` - visible to all members of this organization.
     * Default: `secret`
     * **For a parent or child team:**
     * * `closed` - visible to all members of this organization.
     * Default for child team: `closed`
     */
    privacy?: 'secret' | 'closed';
    /**
     * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
     */
    repo_names?: Array<string>;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type TeamsCreateResponse = team_full;

export type TeamsCreateError = basic_error | validation_error;

export type TeamsDeleteInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsDeleteInOrgResponse = {};

export type TeamsDeleteInOrgError = string;

export type TeamsGetByNameData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsGetByNameResponse = team_full;

export type TeamsGetByNameError = basic_error;

export type TeamsUpdateInOrgData = {
  body?: {
    /**
     * The description of the team.
     */
    description?: string;
    /**
     * The name of the team.
     */
    name?: string;
    /**
     * The ID of a team to set as the parent team.
     */
    parent_team_id?: number | null;
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     */
    permission?: 'pull' | 'push' | 'admin';
    /**
     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
     * **For a non-nested team:**
     * * `secret` - only visible to organization owners and members of this team.
     * * `closed` - visible to all members of this organization.
     * **For a parent or child team:**
     * * `closed` - visible to all members of this organization.
     */
    privacy?: 'secret' | 'closed';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsUpdateInOrgResponse = team_full;

export type TeamsUpdateInOrgError = basic_error | validation_error;

export type TeamsListDiscussionsInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Pinned discussions only filter
     */
    pinned?: string;
  };
};

export type TeamsListDiscussionsInOrgResponse = Array<team_discussion>;

export type TeamsListDiscussionsInOrgError = string;

export type TeamsCreateDiscussionInOrgData = {
  body: {
    /**
     * The discussion post's body text.
     */
    body: string;
    /**
     * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
     */
    private?: boolean;
    /**
     * The discussion post's title.
     */
    title: string;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsCreateDiscussionInOrgResponse = team_discussion;

export type TeamsCreateDiscussionInOrgError = string;

export type TeamsDeleteDiscussionInOrgData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsDeleteDiscussionInOrgResponse = {};

export type TeamsDeleteDiscussionInOrgError = string;

export type TeamsGetDiscussionInOrgData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsGetDiscussionInOrgResponse = team_discussion;

export type TeamsGetDiscussionInOrgError = string;

export type TeamsUpdateDiscussionInOrgData = {
  body?: {
    /**
     * The discussion post's body text.
     */
    body?: string;
    /**
     * The discussion post's title.
     */
    title?: string;
  };
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsUpdateDiscussionInOrgResponse = team_discussion;

export type TeamsUpdateDiscussionInOrgError = string;

export type TeamsListDiscussionCommentsInOrgData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListDiscussionCommentsInOrgResponse = Array<team_discussion_comment>;

export type TeamsListDiscussionCommentsInOrgError = string;

export type TeamsCreateDiscussionCommentInOrgData = {
  body: {
    /**
     * The discussion comment's body text.
     */
    body: string;
  };
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsCreateDiscussionCommentInOrgResponse = team_discussion_comment;

export type TeamsCreateDiscussionCommentInOrgError = string;

export type TeamsDeleteDiscussionCommentInOrgData = {
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsDeleteDiscussionCommentInOrgResponse = {};

export type TeamsDeleteDiscussionCommentInOrgError = string;

export type TeamsGetDiscussionCommentInOrgData = {
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsGetDiscussionCommentInOrgResponse = team_discussion_comment;

export type TeamsGetDiscussionCommentInOrgError = string;

export type TeamsUpdateDiscussionCommentInOrgData = {
  body: {
    /**
     * The discussion comment's body text.
     */
    body: string;
  };
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsUpdateDiscussionCommentInOrgResponse = team_discussion_comment;

export type TeamsUpdateDiscussionCommentInOrgError = string;

export type ReactionsListForTeamDiscussionCommentInOrgData = {
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
     */
    content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForTeamDiscussionCommentInOrgResponse = Array<reaction>;

export type ReactionsListForTeamDiscussionCommentInOrgError = string;

export type ReactionsCreateForTeamDiscussionCommentInOrgData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
     */
    content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type ReactionsCreateForTeamDiscussionCommentInOrgResponse = reaction;

export type ReactionsCreateForTeamDiscussionCommentInOrgError = string;

export type ReactionsDeleteForTeamDiscussionCommentData = {
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the reaction.
     */
    reaction_id: number;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type ReactionsDeleteForTeamDiscussionCommentResponse = {};

export type ReactionsDeleteForTeamDiscussionCommentError = string;

export type ReactionsListForTeamDiscussionInOrgData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
     */
    content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForTeamDiscussionInOrgResponse = Array<reaction>;

export type ReactionsListForTeamDiscussionInOrgError = string;

export type ReactionsCreateForTeamDiscussionInOrgData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
     */
    content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type ReactionsCreateForTeamDiscussionInOrgResponse = reaction;

export type ReactionsCreateForTeamDiscussionInOrgError = string;

export type ReactionsDeleteForTeamDiscussionData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the reaction.
     */
    reaction_id: number;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type ReactionsDeleteForTeamDiscussionResponse = {};

export type ReactionsDeleteForTeamDiscussionError = string;

export type TeamsListPendingInvitationsInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListPendingInvitationsInOrgResponse = Array<organization_invitation>;

export type TeamsListPendingInvitationsInOrgError = string;

export type TeamsListMembersInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Filters members returned by their role in the team.
     */
    role?: 'member' | 'maintainer' | 'all';
  };
};

export type TeamsListMembersInOrgResponse = Array<simple_user>;

export type TeamsListMembersInOrgError = string;

export type TeamsRemoveMembershipForUserInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsRemoveMembershipForUserInOrgResponse = {};

export type TeamsRemoveMembershipForUserInOrgError = string;

export type TeamsGetMembershipForUserInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsGetMembershipForUserInOrgResponse = team_membership;

export type TeamsGetMembershipForUserInOrgError = string;

export type TeamsAddOrUpdateMembershipForUserInOrgData = {
  body?: {
    /**
     * The role that this user should have in the team.
     */
    role?: 'member' | 'maintainer';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsAddOrUpdateMembershipForUserInOrgResponse = team_membership;

export type TeamsAddOrUpdateMembershipForUserInOrgError = string;

export type TeamsListProjectsInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListProjectsInOrgResponse = Array<team_project>;

export type TeamsListProjectsInOrgError = string;

export type TeamsRemoveProjectInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsRemoveProjectInOrgResponse = {};

export type TeamsRemoveProjectInOrgError = string;

export type TeamsCheckPermissionsForProjectInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsCheckPermissionsForProjectInOrgResponse = team_project;

export type TeamsCheckPermissionsForProjectInOrgError = string;

export type TeamsAddOrUpdateProjectPermissionsInOrgData = {
  body?: {
    /**
     * The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    permission?: 'read' | 'write' | 'admin';
  } | null;
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsAddOrUpdateProjectPermissionsInOrgResponse = {};

export type TeamsAddOrUpdateProjectPermissionsInOrgError = {
  documentation_url?: string;
  message?: string;
};

export type TeamsListReposInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListReposInOrgResponse = Array<minimal_repository>;

export type TeamsListReposInOrgError = string;

export type TeamsRemoveRepoInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsRemoveRepoInOrgResponse = {};

export type TeamsRemoveRepoInOrgError = string;

export type TeamsCheckPermissionsForRepoInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsCheckPermissionsForRepoInOrgResponse = team_repository | {};

export type TeamsCheckPermissionsForRepoInOrgError = string;

export type TeamsAddOrUpdateRepoPermissionsInOrgData = {
  body?: {
    /**
     * The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
     */
    permission?: string;
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
};

export type TeamsAddOrUpdateRepoPermissionsInOrgResponse = {};

export type TeamsAddOrUpdateRepoPermissionsInOrgError = string;

export type TeamsListChildInOrgData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The slug of the team name.
     */
    team_slug: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListChildInOrgResponse = Array<team>;

export type TeamsListChildInOrgError = string;

export type OrgsEnableOrDisableSecurityProductOnAllOrgReposData = {
  path: {
    /**
     * The action to take.
     *
     * `enable_all` means to enable the specified security feature for all repositories in the organization.
     * `disable_all` means to disable the specified security feature for all repositories in the organization.
     */
    enablement: 'enable_all' | 'disable_all';
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The security feature to enable or disable.
     */
    security_product:
      | 'dependency_graph'
      | 'dependabot_alerts'
      | 'dependabot_security_updates'
      | 'advanced_security'
      | 'secret_scanning'
      | 'secret_scanning_push_protection';
  };
};

export type OrgsEnableOrDisableSecurityProductOnAllOrgReposResponse = {};

export type OrgsEnableOrDisableSecurityProductOnAllOrgReposError = string;

export type ProjectsDeleteCardData = {
  path: {
    /**
     * The unique identifier of the card.
     */
    card_id: number;
  };
};

export type ProjectsDeleteCardResponse = {};

export type ProjectsDeleteCardError =
  | string
  | basic_error
  | {
      documentation_url?: string;
      errors?: Array<string>;
      message?: string;
    };

export type ProjectsGetCardData = {
  path: {
    /**
     * The unique identifier of the card.
     */
    card_id: number;
  };
};

export type ProjectsGetCardResponse = project_card;

export type ProjectsGetCardError = string | basic_error;

export type ProjectsUpdateCardData = {
  body?: {
    /**
     * Whether or not the card is archived
     */
    archived?: boolean;
    /**
     * The project card's note
     */
    note?: string | null;
  };
  path: {
    /**
     * The unique identifier of the card.
     */
    card_id: number;
  };
};

export type ProjectsUpdateCardResponse = project_card;

export type ProjectsUpdateCardError = string | basic_error | validation_error_simple;

export type ProjectsMoveCardData = {
  body: {
    /**
     * The unique identifier of the column the card should be moved to
     */
    column_id?: number;
    /**
     * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
     */
    position: string;
  };
  path: {
    /**
     * The unique identifier of the card.
     */
    card_id: number;
  };
};

export type ProjectsMoveCardResponse = {
  [key: string]: string;
};

export type ProjectsMoveCardError =
  | string
  | basic_error
  | {
      documentation_url?: string;
      errors?: Array<{
        code?: string;
        field?: string;
        message?: string;
        resource?: string;
      }>;
      message?: string;
    }
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      errors?: Array<{
        code?: string;
        message?: string;
      }>;
      message?: string;
    };

export type ProjectsDeleteColumnData = {
  path: {
    /**
     * The unique identifier of the column.
     */
    column_id: number;
  };
};

export type ProjectsDeleteColumnResponse = {};

export type ProjectsDeleteColumnError = string | basic_error;

export type ProjectsGetColumnData = {
  path: {
    /**
     * The unique identifier of the column.
     */
    column_id: number;
  };
};

export type ProjectsGetColumnResponse = project_column;

export type ProjectsGetColumnError = string | basic_error;

export type ProjectsUpdateColumnData = {
  body: {
    /**
     * Name of the project column
     */
    name: string;
  };
  path: {
    /**
     * The unique identifier of the column.
     */
    column_id: number;
  };
};

export type ProjectsUpdateColumnResponse = project_column;

export type ProjectsUpdateColumnError = string | basic_error;

export type ProjectsListCardsData = {
  path: {
    /**
     * The unique identifier of the column.
     */
    column_id: number;
  };
  query?: {
    /**
     * Filters the project cards that are returned by the card's state.
     */
    archived_state?: 'all' | 'archived' | 'not_archived';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ProjectsListCardsResponse = Array<project_card>;

export type ProjectsListCardsError = string | basic_error;

export type ProjectsCreateCardData = {
  body:
    | {
        /**
         * The project card's note
         */
        note: string | null;
      }
    | {
        /**
         * The unique identifier of the content associated with the card
         */
        content_id: number;
        /**
         * The piece of content associated with the card
         */
        content_type: string;
      };
  path: {
    /**
     * The unique identifier of the column.
     */
    column_id: number;
  };
};

export type ProjectsCreateCardResponse = project_card;

export type ProjectsCreateCardError =
  | string
  | basic_error
  | (validation_error | validation_error_simple)
  | {
      code?: string;
      documentation_url?: string;
      errors?: Array<{
        code?: string;
        message?: string;
      }>;
      message?: string;
    };

export type ProjectsMoveColumnData = {
  body: {
    /**
     * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
     */
    position: string;
  };
  path: {
    /**
     * The unique identifier of the column.
     */
    column_id: number;
  };
};

export type ProjectsMoveColumnResponse = {
  [key: string]: string;
};

export type ProjectsMoveColumnError = string | basic_error | validation_error_simple;

export type ProjectsDeleteData = {
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
  };
};

export type ProjectsDeleteResponse = {};

export type ProjectsDeleteError =
  | string
  | basic_error
  | {
      documentation_url?: string;
      errors?: Array<string>;
      message?: string;
    };

export type ProjectsGetData = {
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
  };
};

export type ProjectsGetResponse = project;

export type ProjectsGetError = string | basic_error;

export type ProjectsUpdateData = {
  body?: {
    /**
     * Body of the project
     */
    body?: string | null;
    /**
     * Name of the project
     */
    name?: string;
    /**
     * The baseline permission that all organization members have on this project
     */
    organization_permission?: 'read' | 'write' | 'admin' | 'none';
    /**
     * Whether or not this project can be seen by everyone.
     */
    private?: boolean;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state?: string;
  };
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
  };
};

export type ProjectsUpdateResponse = project;

export type ProjectsUpdateError =
  | string
  | basic_error
  | {
      documentation_url?: string;
      errors?: Array<string>;
      message?: string;
    }
  | validation_error_simple;

export type ProjectsListCollaboratorsData = {
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
  };
  query?: {
    /**
     * Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
     */
    affiliation?: 'outside' | 'direct' | 'all';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ProjectsListCollaboratorsResponse = Array<simple_user>;

export type ProjectsListCollaboratorsError = string | basic_error | validation_error;

export type ProjectsRemoveCollaboratorData = {
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type ProjectsRemoveCollaboratorResponse = {};

export type ProjectsRemoveCollaboratorError = string | basic_error | validation_error;

export type ProjectsAddCollaboratorData = {
  body?: {
    /**
     * The permission to grant the collaborator.
     */
    permission?: 'read' | 'write' | 'admin';
  } | null;
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type ProjectsAddCollaboratorResponse = {};

export type ProjectsAddCollaboratorError = string | basic_error | validation_error;

export type ProjectsGetPermissionForUserData = {
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type ProjectsGetPermissionForUserResponse = project_collaborator_permission;

export type ProjectsGetPermissionForUserError = string | basic_error | validation_error;

export type ProjectsListColumnsData = {
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ProjectsListColumnsResponse = Array<project_column>;

export type ProjectsListColumnsError = string | basic_error;

export type ProjectsCreateColumnData = {
  body: {
    /**
     * Name of the project column
     */
    name: string;
  };
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
  };
};

export type ProjectsCreateColumnResponse = project_column;

export type ProjectsCreateColumnError = string | basic_error | validation_error_simple;

export type RateLimitGetResponse = rate_limit_overview;

export type RateLimitGetError = string | basic_error;

export type ActionsListRepoRequiredWorkflowsData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListRepoRequiredWorkflowsResponse = {
  required_workflows: Array<repo_required_workflow>;
  total_count: number;
};

export type ActionsListRepoRequiredWorkflowsError = basic_error;

export type ActionsGetRepoRequiredWorkflowData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the required workflow that has run at least once in a repository.
     */
    required_workflow_id_for_repo: number;
  };
};

export type ActionsGetRepoRequiredWorkflowResponse = repo_required_workflow;

export type ActionsGetRepoRequiredWorkflowError = basic_error;

export type ActionsGetRepoRequiredWorkflowUsageData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the required workflow that has run at least once in a repository.
     */
    required_workflow_id_for_repo: number;
  };
};

export type ActionsGetRepoRequiredWorkflowUsageResponse = workflow_usage;

export type ActionsGetRepoRequiredWorkflowUsageError = basic_error;

export type ReposDeleteData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteResponse = {};

export type ReposDeleteError =
  | basic_error
  | {
      documentation_url?: string;
      message?: string;
    };

export type ReposGetData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetResponse = full_repository;

export type ReposGetError = basic_error;

export type ReposUpdateData = {
  body?: {
    /**
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     */
    allow_auto_merge?: boolean;
    /**
     * Either `true` to allow private forks, or `false` to prevent private forks.
     */
    allow_forking?: boolean;
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     */
    allow_merge_commit?: boolean;
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     */
    allow_rebase_merge?: boolean;
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     */
    allow_squash_merge?: boolean;
    /**
     * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
     */
    allow_update_branch?: boolean;
    /**
     * Whether to archive this repository. `false` will unarchive a previously archived repository.
     */
    archived?: boolean;
    /**
     * Updates the default branch for this repository.
     */
    default_branch?: string;
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
     */
    delete_branch_on_merge?: boolean;
    /**
     * A short description of the repository.
     */
    description?: string;
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     */
    has_issues?: boolean;
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     */
    has_projects?: boolean;
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     */
    has_wiki?: boolean;
    /**
     * A URL with more information about the repository.
     */
    homepage?: string;
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     */
    is_template?: boolean;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The name of the repository.
     */
    name?: string;
    /**
     * Either `true` to make the repository private or `false` to make it public. Default: `false`.
     * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
     */
    private?: boolean;
    /**
     * Specify which security and analysis features to enable or disable for the repository.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
     * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
     *
     * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
     */
    security_and_analysis?: {
      /**
       * Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
       */
      advanced_security?: {
        /**
         * Can be `enabled` or `disabled`.
         */
        status?: string;
      };
      /**
       * Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
       */
      secret_scanning?: {
        /**
         * Can be `enabled` or `disabled`.
         */
        status?: string;
      };
      /**
       * Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
       */
      secret_scanning_push_protection?: {
        /**
         * Can be `enabled` or `disabled`.
         */
        status?: string;
      };
    } | null;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * @deprecated
     */
    use_squash_pr_title_as_default?: boolean;
    /**
     * The visibility of the repository.
     */
    visibility?: 'public' | 'private';
    /**
     * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
     */
    web_commit_signoff_required?: boolean;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateResponse = full_repository;

export type ReposUpdateError = basic_error | validation_error;

export type ActionsListArtifactsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Filters artifacts by exact match on their name field.
     */
    name?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListArtifactsForRepoResponse = {
  artifacts: Array<artifact>;
  total_count: number;
};

export type ActionsListArtifactsForRepoError = string;

export type ActionsDeleteArtifactData = {
  path: {
    /**
     * The unique identifier of the artifact.
     */
    artifact_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsDeleteArtifactResponse = {};

export type ActionsDeleteArtifactError = string;

export type ActionsGetArtifactData = {
  path: {
    /**
     * The unique identifier of the artifact.
     */
    artifact_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetArtifactResponse = artifact;

export type ActionsGetArtifactError = string;

export type ActionsDownloadArtifactData = {
  path: {
    archive_format: string;
    /**
     * The unique identifier of the artifact.
     */
    artifact_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetActionsCacheUsageData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetActionsCacheUsageResponse = actions_cache_usage_by_repository;

export type ActionsGetActionsCacheUsageError = string;

export type ActionsDeleteActionsCacheByKeyData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query: {
    /**
     * A key for identifying the cache.
     */
    key: string;
    /**
     * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     */
    ref?: code_scanning_ref;
  };
};

export type ActionsDeleteActionsCacheByKeyResponse = actions_cache_list;

export type ActionsDeleteActionsCacheByKeyError = string;

export type ActionsGetActionsCacheListData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * An explicit key or prefix for identifying the cache
     */
    key?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     */
    ref?: code_scanning_ref;
    /**
     * The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
     */
    sort?: 'created_at' | 'last_accessed_at' | 'size_in_bytes';
  };
};

export type ActionsGetActionsCacheListResponse = actions_cache_list;

export type ActionsGetActionsCacheListError = string;

export type ActionsDeleteActionsCacheByIdData = {
  path: {
    /**
     * The unique identifier of the GitHub Actions cache.
     */
    cache_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsDeleteActionsCacheByIdResponse = {};

export type ActionsDeleteActionsCacheByIdError = string;

export type ActionsGetJobForWorkflowRunData = {
  path: {
    /**
     * The unique identifier of the job.
     */
    job_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetJobForWorkflowRunResponse = job;

export type ActionsGetJobForWorkflowRunError = string;

export type ActionsDownloadJobLogsForWorkflowRunData = {
  path: {
    /**
     * The unique identifier of the job.
     */
    job_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsReRunJobForWorkflowRunData = {
  body?: {
    /**
     * Whether to enable debug logging for the re-run.
     */
    enable_debug_logging?: boolean;
  } | null;
  path: {
    /**
     * The unique identifier of the job.
     */
    job_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsReRunJobForWorkflowRunResponse = empty_object;

export type ActionsReRunJobForWorkflowRunError = basic_error;

export type ActionsGetCustomOidcSubClaimForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetCustomOidcSubClaimForRepoResponse = oidc_custom_sub_repo;

export type ActionsGetCustomOidcSubClaimForRepoError = basic_error;

export type ActionsSetCustomOidcSubClaimForRepoData = {
  body: {
    /**
     * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
     */
    include_claim_keys?: Array<string>;
    /**
     * Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
     */
    use_default: boolean;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsSetCustomOidcSubClaimForRepoResponse = empty_object;

export type ActionsSetCustomOidcSubClaimForRepoError = basic_error | validation_error_simple;

export type ActionsGetGithubActionsPermissionsRepositoryData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetGithubActionsPermissionsRepositoryResponse = actions_repository_permissions;

export type ActionsGetGithubActionsPermissionsRepositoryError = string;

export type ActionsSetGithubActionsPermissionsRepositoryData = {
  body: {
    allowed_actions?: allowed_actions;
    enabled: actions_enabled;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsSetGithubActionsPermissionsRepositoryResponse = {};

export type ActionsSetGithubActionsPermissionsRepositoryError = string;

export type ActionsGetWorkflowAccessToRepositoryData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetWorkflowAccessToRepositoryResponse = actions_workflow_access_to_repository;

export type ActionsGetWorkflowAccessToRepositoryError = string;

export type ActionsSetWorkflowAccessToRepositoryData = {
  body: actions_workflow_access_to_repository;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsSetWorkflowAccessToRepositoryResponse = {};

export type ActionsSetWorkflowAccessToRepositoryError = string;

export type ActionsGetAllowedActionsRepositoryData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetAllowedActionsRepositoryResponse = selected_actions;

export type ActionsGetAllowedActionsRepositoryError = string;

export type ActionsSetAllowedActionsRepositoryData = {
  body?: selected_actions;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsSetAllowedActionsRepositoryResponse = {};

export type ActionsSetAllowedActionsRepositoryError = string;

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryResponse =
  actions_get_default_workflow_permissions;

export type ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryError = string;

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryData = {
  body: actions_set_default_workflow_permissions;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryResponse = {};

export type ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryError = string;

export type ActionsListRequiredWorkflowRunsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the required workflow that has run at least once in a repository.
     */
    required_workflow_id_for_repo: number;
  };
  query?: {
    /**
     * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     */
    actor?: string;
    /**
     * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     */
    branch?: string;
    /**
     * Returns workflow runs with the `check_suite_id` that you specify.
     */
    check_suite_id?: number;
    /**
     * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
     */
    created?: string;
    /**
     * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
     */
    event?: string;
    /**
     * If `true` pull requests are omitted from the response (empty array).
     */
    exclude_pull_requests?: boolean;
    /**
     * Only returns workflow runs that are associated with the specified `head_sha`.
     */
    head_sha?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
     */
    status?:
      | 'completed'
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'skipped'
      | 'stale'
      | 'success'
      | 'timed_out'
      | 'in_progress'
      | 'queued'
      | 'requested'
      | 'waiting'
      | 'pending';
  };
};

export type ActionsListRequiredWorkflowRunsResponse = {
  total_count: number;
  workflow_runs: Array<workflow_run>;
};

export type ActionsListRequiredWorkflowRunsError = string;

export type ActionsListSelfHostedRunnersForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListSelfHostedRunnersForRepoResponse = {
  runners: Array<runner>;
  total_count: number;
};

export type ActionsListSelfHostedRunnersForRepoError = string;

export type ActionsListRunnerApplicationsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsListRunnerApplicationsForRepoResponse = Array<runner_application>;

export type ActionsListRunnerApplicationsForRepoError = string;

export type ActionsCreateRegistrationTokenForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsCreateRegistrationTokenForRepoResponse = authentication_token;

export type ActionsCreateRegistrationTokenForRepoError = string;

export type ActionsCreateRemoveTokenForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsCreateRemoveTokenForRepoResponse = authentication_token;

export type ActionsCreateRemoveTokenForRepoError = string;

export type ActionsDeleteSelfHostedRunnerFromRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsDeleteSelfHostedRunnerFromRepoResponse = {};

export type ActionsDeleteSelfHostedRunnerFromRepoError = string;

export type ActionsGetSelfHostedRunnerForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsGetSelfHostedRunnerForRepoResponse = runner;

export type ActionsGetSelfHostedRunnerForRepoError = string;

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoError = basic_error;

export type ActionsListLabelsForSelfHostedRunnerForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsListLabelsForSelfHostedRunnerForRepoResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsListLabelsForSelfHostedRunnerForRepoError = basic_error;

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepoData = {
  body: {
    /**
     * The names of the custom labels to add to the runner.
     */
    labels: Array<string>;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepoResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsAddCustomLabelsToSelfHostedRunnerForRepoError = basic_error | validation_error_simple;

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepoData = {
  body: {
    /**
     * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
     */
    labels: Array<string>;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepoResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsSetCustomLabelsForSelfHostedRunnerForRepoError = basic_error | validation_error_simple;

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoData = {
  path: {
    /**
     * The name of a self-hosted runner's custom label.
     */
    name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * Unique identifier of the self-hosted runner.
     */
    runner_id: number;
  };
};

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResponse = {
  labels: Array<runner_label>;
  total_count: number;
};

export type ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoError = basic_error | validation_error_simple;

export type ActionsListWorkflowRunsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     */
    actor?: string;
    /**
     * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     */
    branch?: string;
    /**
     * Returns workflow runs with the `check_suite_id` that you specify.
     */
    check_suite_id?: number;
    /**
     * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
     */
    created?: string;
    /**
     * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
     */
    event?: string;
    /**
     * If `true` pull requests are omitted from the response (empty array).
     */
    exclude_pull_requests?: boolean;
    /**
     * Only returns workflow runs that are associated with the specified `head_sha`.
     */
    head_sha?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
     */
    status?:
      | 'completed'
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'skipped'
      | 'stale'
      | 'success'
      | 'timed_out'
      | 'in_progress'
      | 'queued'
      | 'requested'
      | 'waiting'
      | 'pending';
  };
};

export type ActionsListWorkflowRunsForRepoResponse = {
  total_count: number;
  workflow_runs: Array<workflow_run>;
};

export type ActionsListWorkflowRunsForRepoError = string;

export type ActionsDeleteWorkflowRunData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsDeleteWorkflowRunResponse = {};

export type ActionsDeleteWorkflowRunError = string;

export type ActionsGetWorkflowRunData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
  query?: {
    /**
     * If `true` pull requests are omitted from the response (empty array).
     */
    exclude_pull_requests?: boolean;
  };
};

export type ActionsGetWorkflowRunResponse = workflow_run;

export type ActionsGetWorkflowRunError = string;

export type ActionsGetReviewsForRunData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsGetReviewsForRunResponse = Array<environment_approvals>;

export type ActionsGetReviewsForRunError = string;

export type ActionsApproveWorkflowRunData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsApproveWorkflowRunResponse = empty_object;

export type ActionsApproveWorkflowRunError = basic_error;

export type ActionsListWorkflowRunArtifactsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListWorkflowRunArtifactsResponse = {
  artifacts: Array<artifact>;
  total_count: number;
};

export type ActionsListWorkflowRunArtifactsError = string;

export type ActionsGetWorkflowRunAttemptData = {
  path: {
    /**
     * The attempt number of the workflow run.
     */
    attempt_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
  query?: {
    /**
     * If `true` pull requests are omitted from the response (empty array).
     */
    exclude_pull_requests?: boolean;
  };
};

export type ActionsGetWorkflowRunAttemptResponse = workflow_run;

export type ActionsGetWorkflowRunAttemptError = string;

export type ActionsListJobsForWorkflowRunAttemptData = {
  path: {
    /**
     * The attempt number of the workflow run.
     */
    attempt_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListJobsForWorkflowRunAttemptResponse = {
  jobs: Array<job>;
  total_count: number;
};

export type ActionsListJobsForWorkflowRunAttemptError = basic_error;

export type ActionsDownloadWorkflowRunAttemptLogsData = {
  path: {
    /**
     * The attempt number of the workflow run.
     */
    attempt_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsCancelWorkflowRunData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsCancelWorkflowRunResponse = empty_object;

export type ActionsCancelWorkflowRunError = basic_error;

export type ActionsListJobsForWorkflowRunData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
  query?: {
    /**
     * Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
     */
    filter?: 'latest' | 'all';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListJobsForWorkflowRunResponse = {
  jobs: Array<job>;
  total_count: number;
};

export type ActionsListJobsForWorkflowRunError = string;

export type ActionsDeleteWorkflowRunLogsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsDeleteWorkflowRunLogsResponse = {};

export type ActionsDeleteWorkflowRunLogsError = basic_error;

export type ActionsDownloadWorkflowRunLogsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsGetPendingDeploymentsForRunData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsGetPendingDeploymentsForRunResponse = Array<pending_deployment>;

export type ActionsGetPendingDeploymentsForRunError = string;

export type ActionsReviewPendingDeploymentsForRunData = {
  body: {
    /**
     * A comment to accompany the deployment review
     */
    comment: string;
    /**
     * The list of environment ids to approve or reject
     */
    environment_ids: Array<number>;
    /**
     * Whether to approve or reject deployment to the specified environments.
     */
    state: 'approved' | 'rejected';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsReviewPendingDeploymentsForRunResponse = Array<deployment>;

export type ActionsReviewPendingDeploymentsForRunError = string;

export type ActionsReRunWorkflowData = {
  body?: {
    /**
     * Whether to enable debug logging for the re-run.
     */
    enable_debug_logging?: boolean;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsReRunWorkflowResponse = empty_object;

export type ActionsReRunWorkflowError = string;

export type ActionsReRunWorkflowFailedJobsData = {
  body?: {
    /**
     * Whether to enable debug logging for the re-run.
     */
    enable_debug_logging?: boolean;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsReRunWorkflowFailedJobsResponse = empty_object;

export type ActionsReRunWorkflowFailedJobsError = string;

export type ActionsGetWorkflowRunUsageData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the workflow run.
     */
    run_id: number;
  };
};

export type ActionsGetWorkflowRunUsageResponse = workflow_run_usage;

export type ActionsGetWorkflowRunUsageError = string;

export type ActionsListRepoSecretsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListRepoSecretsResponse = {
  secrets: Array<actions_secret>;
  total_count: number;
};

export type ActionsListRepoSecretsError = string;

export type ActionsGetRepoPublicKeyData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetRepoPublicKeyResponse = actions_public_key;

export type ActionsGetRepoPublicKeyError = string;

export type ActionsDeleteRepoSecretData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsDeleteRepoSecretResponse = {};

export type ActionsDeleteRepoSecretError = string;

export type ActionsGetRepoSecretData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsGetRepoSecretResponse = actions_secret;

export type ActionsGetRepoSecretError = string;

export type ActionsCreateOrUpdateRepoSecretData = {
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsCreateOrUpdateRepoSecretResponse = empty_object | {};

export type ActionsCreateOrUpdateRepoSecretError = string;

export type ActionsListRepoVariablesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 30).
     */
    per_page?: number;
  };
};

export type ActionsListRepoVariablesResponse = {
  total_count: number;
  variables: Array<actions_variable>;
};

export type ActionsListRepoVariablesError = string;

export type ActionsCreateRepoVariableData = {
  body: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The value of the variable.
     */
    value: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsCreateRepoVariableResponse = empty_object;

export type ActionsCreateRepoVariableError = string;

export type ActionsDeleteRepoVariableData = {
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsDeleteRepoVariableResponse = {};

export type ActionsDeleteRepoVariableError = string;

export type ActionsGetRepoVariableData = {
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsGetRepoVariableResponse = actions_variable;

export type ActionsGetRepoVariableError = string;

export type ActionsUpdateRepoVariableData = {
  body: {
    /**
     * The name of the variable.
     */
    name?: string;
    /**
     * The value of the variable.
     */
    value?: string;
  };
  path: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActionsUpdateRepoVariableResponse = {};

export type ActionsUpdateRepoVariableError = string;

export type ActionsListRepoWorkflowsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListRepoWorkflowsResponse = {
  total_count: number;
  workflows: Array<workflow>;
};

export type ActionsListRepoWorkflowsError = string;

export type ActionsGetWorkflowData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the workflow. You can also pass the workflow file name as a string.
     */
    workflow_id: number | string;
  };
};

export type ActionsGetWorkflowResponse = workflow;

export type ActionsGetWorkflowError = string;

export type ActionsDisableWorkflowData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the workflow. You can also pass the workflow file name as a string.
     */
    workflow_id: number | string;
  };
};

export type ActionsDisableWorkflowResponse = {};

export type ActionsDisableWorkflowError = string;

export type ActionsCreateWorkflowDispatchData = {
  body: {
    /**
     * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
     */
    inputs?: {
      [key: string]: string;
    };
    /**
     * The git reference for the workflow. The reference can be a branch or tag name.
     */
    ref: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the workflow. You can also pass the workflow file name as a string.
     */
    workflow_id: number | string;
  };
};

export type ActionsCreateWorkflowDispatchResponse = {};

export type ActionsCreateWorkflowDispatchError = string;

export type ActionsEnableWorkflowData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the workflow. You can also pass the workflow file name as a string.
     */
    workflow_id: number | string;
  };
};

export type ActionsEnableWorkflowResponse = {};

export type ActionsEnableWorkflowError = string;

export type ActionsListWorkflowRunsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the workflow. You can also pass the workflow file name as a string.
     */
    workflow_id: number | string;
  };
  query?: {
    /**
     * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     */
    actor?: string;
    /**
     * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     */
    branch?: string;
    /**
     * Returns workflow runs with the `check_suite_id` that you specify.
     */
    check_suite_id?: number;
    /**
     * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
     */
    created?: string;
    /**
     * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
     */
    event?: string;
    /**
     * If `true` pull requests are omitted from the response (empty array).
     */
    exclude_pull_requests?: boolean;
    /**
     * Only returns workflow runs that are associated with the specified `head_sha`.
     */
    head_sha?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`.
     */
    status?:
      | 'completed'
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'skipped'
      | 'stale'
      | 'success'
      | 'timed_out'
      | 'in_progress'
      | 'queued'
      | 'requested'
      | 'waiting'
      | 'pending';
  };
};

export type ActionsListWorkflowRunsResponse = {
  total_count: number;
  workflow_runs: Array<workflow_run>;
};

export type ActionsListWorkflowRunsError = string;

export type ActionsGetWorkflowUsageData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The ID of the workflow. You can also pass the workflow file name as a string.
     */
    workflow_id: number | string;
  };
};

export type ActionsGetWorkflowUsageResponse = workflow_usage;

export type ActionsGetWorkflowUsageError = string;

export type IssuesListAssigneesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type IssuesListAssigneesResponse = Array<simple_user>;

export type IssuesListAssigneesError = basic_error;

export type IssuesCheckUserCanBeAssignedData = {
  path: {
    assignee: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesCheckUserCanBeAssignedResponse = {};

export type IssuesCheckUserCanBeAssignedError = basic_error;

export type ReposListAutolinksData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
  };
};

export type ReposListAutolinksResponse = Array<autolink>;

export type ReposListAutolinksError = string;

export type ReposCreateAutolinkData = {
  body: {
    /**
     * Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
     */
    is_alphanumeric?: boolean;
    /**
     * This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
     */
    key_prefix: string;
    /**
     * The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
     */
    url_template: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateAutolinkResponse = autolink;

export type ReposCreateAutolinkError = validation_error;

export type ReposDeleteAutolinkData = {
  path: {
    /**
     * The unique identifier of the autolink.
     */
    autolink_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteAutolinkResponse = {};

export type ReposDeleteAutolinkError = basic_error;

export type ReposGetAutolinkData = {
  path: {
    /**
     * The unique identifier of the autolink.
     */
    autolink_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetAutolinkResponse = autolink;

export type ReposGetAutolinkError = basic_error;

export type ReposDisableAutomatedSecurityFixesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDisableAutomatedSecurityFixesResponse = {};

export type ReposDisableAutomatedSecurityFixesError = string;

export type ReposEnableAutomatedSecurityFixesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposEnableAutomatedSecurityFixesResponse = {};

export type ReposEnableAutomatedSecurityFixesError = string;

export type ReposListBranchesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
     */
    protected?: boolean;
  };
};

export type ReposListBranchesResponse = Array<short_branch>;

export type ReposListBranchesError = basic_error;

export type ReposGetBranchData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetBranchResponse = branch_with_protection;

export type ReposGetBranchError = basic_error;

export type ReposDeleteBranchProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteBranchProtectionResponse = {};

export type ReposDeleteBranchProtectionError = basic_error;

export type ReposGetBranchProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetBranchProtectionResponse = branch_protection;

export type ReposGetBranchProtectionError = basic_error;

export type ReposUpdateBranchProtectionData = {
  body: {
    /**
     * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
     */
    allow_deletions?: boolean;
    /**
     * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
     */
    allow_force_pushes?: boolean | null;
    /**
     * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
     */
    allow_fork_syncing?: boolean;
    /**
     * If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
     */
    block_creations?: boolean;
    /**
     * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
     */
    enforce_admins: boolean | null;
    /**
     * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
     */
    lock_branch?: boolean;
    /**
     * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
     */
    required_conversation_resolution?: boolean;
    /**
     * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
     */
    required_linear_history?: boolean;
    /**
     * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
     */
    required_pull_request_reviews: {
      /**
       * Allow specific users, teams, or apps to bypass pull request requirements.
       */
      bypass_pull_request_allowances?: {
        /**
         * The list of app `slug`s allowed to bypass pull request requirements.
         */
        apps?: Array<string>;
        /**
         * The list of team `slug`s allowed to bypass pull request requirements.
         */
        teams?: Array<string>;
        /**
         * The list of user `login`s allowed to bypass pull request requirements.
         */
        users?: Array<string>;
      };
      /**
       * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
       */
      dismiss_stale_reviews?: boolean;
      /**
       * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
       */
      dismissal_restrictions?: {
        /**
         * The list of app `slug`s with dismissal access
         */
        apps?: Array<string>;
        /**
         * The list of team `slug`s with dismissal access
         */
        teams?: Array<string>;
        /**
         * The list of user `login`s with dismissal access
         */
        users?: Array<string>;
      };
      /**
       * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
       */
      require_code_owner_reviews?: boolean;
      /**
       * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
       */
      require_last_push_approval?: boolean;
      /**
       * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
       */
      required_approving_review_count?: number;
    } | null;
    /**
     * Require status checks to pass before merging. Set to `null` to disable.
     */
    required_status_checks: {
      /**
       * The list of status checks to require in order to merge into this branch.
       */
      checks?: Array<{
        /**
         * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
         */
        app_id?: number;
        /**
         * The name of the required check
         */
        context: string;
      }>;
      /**
       * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
       *
       * @deprecated
       */
      contexts: Array<string>;
      /**
       * Require branches to be up to date before merging.
       */
      strict: boolean;
    } | null;
    /**
     * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
     */
    restrictions: {
      /**
       * The list of app `slug`s with push access
       */
      apps?: Array<string>;
      /**
       * The list of team `slug`s with push access
       */
      teams: Array<string>;
      /**
       * The list of user `login`s with push access
       */
      users: Array<string>;
    } | null;
  };
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateBranchProtectionResponse = protected_branch;

export type ReposUpdateBranchProtectionError = basic_error | validation_error_simple;

export type ReposDeleteAdminBranchProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteAdminBranchProtectionResponse = {};

export type ReposDeleteAdminBranchProtectionError = basic_error;

export type ReposGetAdminBranchProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetAdminBranchProtectionResponse = protected_branch_admin_enforced;

export type ReposGetAdminBranchProtectionError = string;

export type ReposSetAdminBranchProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposSetAdminBranchProtectionResponse = protected_branch_admin_enforced;

export type ReposSetAdminBranchProtectionError = string;

export type ReposDeletePullRequestReviewProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeletePullRequestReviewProtectionResponse = {};

export type ReposDeletePullRequestReviewProtectionError = basic_error;

export type ReposGetPullRequestReviewProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetPullRequestReviewProtectionResponse = protected_branch_pull_request_review;

export type ReposGetPullRequestReviewProtectionError = string;

export type ReposUpdatePullRequestReviewProtectionData = {
  body?: {
    /**
     * Allow specific users, teams, or apps to bypass pull request requirements.
     */
    bypass_pull_request_allowances?: {
      /**
       * The list of app `slug`s allowed to bypass pull request requirements.
       */
      apps?: Array<string>;
      /**
       * The list of team `slug`s allowed to bypass pull request requirements.
       */
      teams?: Array<string>;
      /**
       * The list of user `login`s allowed to bypass pull request requirements.
       */
      users?: Array<string>;
    };
    /**
     * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
     */
    dismiss_stale_reviews?: boolean;
    /**
     * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
     */
    dismissal_restrictions?: {
      /**
       * The list of app `slug`s with dismissal access
       */
      apps?: Array<string>;
      /**
       * The list of team `slug`s with dismissal access
       */
      teams?: Array<string>;
      /**
       * The list of user `login`s with dismissal access
       */
      users?: Array<string>;
    };
    /**
     * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
     */
    require_code_owner_reviews?: boolean;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
     */
    require_last_push_approval?: boolean;
    /**
     * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
     */
    required_approving_review_count?: number;
  };
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdatePullRequestReviewProtectionResponse = protected_branch_pull_request_review;

export type ReposUpdatePullRequestReviewProtectionError = validation_error;

export type ReposDeleteCommitSignatureProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteCommitSignatureProtectionResponse = {};

export type ReposDeleteCommitSignatureProtectionError = basic_error;

export type ReposGetCommitSignatureProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetCommitSignatureProtectionResponse = protected_branch_admin_enforced;

export type ReposGetCommitSignatureProtectionError = basic_error;

export type ReposCreateCommitSignatureProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateCommitSignatureProtectionResponse = protected_branch_admin_enforced;

export type ReposCreateCommitSignatureProtectionError = basic_error;

export type ReposRemoveStatusCheckProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposRemoveStatusCheckProtectionResponse = {};

export type ReposRemoveStatusCheckProtectionError = string;

export type ReposGetStatusChecksProtectionData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetStatusChecksProtectionResponse = status_check_policy;

export type ReposGetStatusChecksProtectionError = basic_error;

export type ReposUpdateStatusCheckProtectionData = {
  body?: {
    /**
     * The list of status checks to require in order to merge into this branch.
     */
    checks?: Array<{
      /**
       * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
       */
      app_id?: number;
      /**
       * The name of the required check
       */
      context: string;
    }>;
    /**
     * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
     *
     * @deprecated
     */
    contexts?: Array<string>;
    /**
     * Require branches to be up to date before merging.
     */
    strict?: boolean;
  };
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateStatusCheckProtectionResponse = status_check_policy;

export type ReposUpdateStatusCheckProtectionError = basic_error | validation_error;

export type ReposRemoveStatusCheckContextsData = {
  body?:
    | {
        /**
         * The name of the status checks
         */
        contexts: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposRemoveStatusCheckContextsResponse = Array<string>;

export type ReposRemoveStatusCheckContextsError = basic_error | validation_error;

export type ReposGetAllStatusCheckContextsData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetAllStatusCheckContextsResponse = Array<string>;

export type ReposGetAllStatusCheckContextsError = basic_error;

export type ReposAddStatusCheckContextsData = {
  body?:
    | {
        /**
         * The name of the status checks
         */
        contexts: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposAddStatusCheckContextsResponse = Array<string>;

export type ReposAddStatusCheckContextsError = basic_error | validation_error;

export type ReposSetStatusCheckContextsData = {
  body?:
    | {
        /**
         * The name of the status checks
         */
        contexts: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposSetStatusCheckContextsResponse = Array<string>;

export type ReposSetStatusCheckContextsError = basic_error | validation_error;

export type ReposDeleteAccessRestrictionsData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteAccessRestrictionsResponse = {};

export type ReposDeleteAccessRestrictionsError = string;

export type ReposGetAccessRestrictionsData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetAccessRestrictionsResponse = branch_restriction_policy;

export type ReposGetAccessRestrictionsError = basic_error;

export type ReposRemoveAppAccessRestrictionsData = {
  body?:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposRemoveAppAccessRestrictionsResponse = Array<integration>;

export type ReposRemoveAppAccessRestrictionsError = validation_error;

export type ReposGetAppsWithAccessToProtectedBranchData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetAppsWithAccessToProtectedBranchResponse = Array<integration>;

export type ReposGetAppsWithAccessToProtectedBranchError = basic_error;

export type ReposAddAppAccessRestrictionsData = {
  body?:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposAddAppAccessRestrictionsResponse = Array<integration>;

export type ReposAddAppAccessRestrictionsError = validation_error;

export type ReposSetAppAccessRestrictionsData = {
  body?:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposSetAppAccessRestrictionsResponse = Array<integration>;

export type ReposSetAppAccessRestrictionsError = validation_error;

export type ReposRemoveTeamAccessRestrictionsData = {
  body?:
    | {
        /**
         * The slug values for teams
         */
        teams: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposRemoveTeamAccessRestrictionsResponse = Array<team>;

export type ReposRemoveTeamAccessRestrictionsError = validation_error;

export type ReposGetTeamsWithAccessToProtectedBranchData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetTeamsWithAccessToProtectedBranchResponse = Array<team>;

export type ReposGetTeamsWithAccessToProtectedBranchError = basic_error;

export type ReposAddTeamAccessRestrictionsData = {
  body?:
    | {
        /**
         * The slug values for teams
         */
        teams: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposAddTeamAccessRestrictionsResponse = Array<team>;

export type ReposAddTeamAccessRestrictionsError = validation_error;

export type ReposSetTeamAccessRestrictionsData = {
  body?:
    | {
        /**
         * The slug values for teams
         */
        teams: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposSetTeamAccessRestrictionsResponse = Array<team>;

export type ReposSetTeamAccessRestrictionsError = validation_error;

export type ReposRemoveUserAccessRestrictionsData = {
  body?:
    | {
        /**
         * The username for users
         */
        users: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposRemoveUserAccessRestrictionsResponse = Array<simple_user>;

export type ReposRemoveUserAccessRestrictionsError = validation_error;

export type ReposGetUsersWithAccessToProtectedBranchData = {
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetUsersWithAccessToProtectedBranchResponse = Array<simple_user>;

export type ReposGetUsersWithAccessToProtectedBranchError = basic_error;

export type ReposAddUserAccessRestrictionsData = {
  body?:
    | {
        /**
         * The username for users
         */
        users: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposAddUserAccessRestrictionsResponse = Array<simple_user>;

export type ReposAddUserAccessRestrictionsError = validation_error;

export type ReposSetUserAccessRestrictionsData = {
  body?:
    | {
        /**
         * The username for users
         */
        users: Array<string>;
      }
    | Array<string>;
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposSetUserAccessRestrictionsResponse = Array<simple_user>;

export type ReposSetUserAccessRestrictionsError = validation_error;

export type ReposRenameBranchData = {
  body: {
    /**
     * The new name of the branch.
     */
    new_name: string;
  };
  path: {
    /**
     * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql).
     */
    branch: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposRenameBranchResponse = branch_with_protection;

export type ReposRenameBranchError = basic_error | validation_error;

export type ChecksCreateData = {
  body: (
    | {
        status: 'completed';
      }
    | {
        status?: 'queued' | 'in_progress';
      }
  ) & {
    /**
     * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
     */
    actions?: Array<{
      /**
       * A short explanation of what this action would do. The maximum size is 40 characters.
       */
      description: string;
      /**
       * A reference for the action on the integrator's system. The maximum size is 20 characters.
       */
      identifier: string;
      /**
       * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
       */
      label: string;
    }>;
    /**
     * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    completed_at?: string;
    /**
     * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
     * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
     */
    conclusion?:
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'success'
      | 'skipped'
      | 'stale'
      | 'timed_out';
    /**
     * The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
     */
    details_url?: string;
    /**
     * A reference for the run on the integrator's system.
     */
    external_id?: string;
    /**
     * The SHA of the commit.
     */
    head_sha: string;
    /**
     * The name of the check. For example, "code-coverage".
     */
    name: string;
    /**
     * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.
     */
    output?: {
      /**
       * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
       */
      annotations?: Array<{
        /**
         * The level of the annotation.
         */
        annotation_level: 'notice' | 'warning' | 'failure';
        /**
         * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
         */
        end_column?: number;
        /**
         * The end line of the annotation.
         */
        end_line: number;
        /**
         * A short description of the feedback for these lines of code. The maximum size is 64 KB.
         */
        message: string;
        /**
         * The path of the file to add an annotation to. For example, `assets/css/main.css`.
         */
        path: string;
        /**
         * Details about this annotation. The maximum size is 64 KB.
         */
        raw_details?: string;
        /**
         * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.
         */
        start_column?: number;
        /**
         * The start line of the annotation. Line numbers start at 1.
         */
        start_line: number;
        /**
         * The title that represents the annotation. The maximum size is 255 characters.
         */
        title?: string;
      }>;
      /**
       * Adds images to the output displayed in the GitHub pull request UI.
       */
      images?: Array<{
        /**
         * The alternative text for the image.
         */
        alt: string;
        /**
         * A short image description.
         */
        caption?: string;
        /**
         * The full URL of the image.
         */
        image_url: string;
      }>;
      /**
       * The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
       */
      summary: string;
      /**
       * The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
       */
      text?: string;
      /**
       * The title of the check run.
       */
      title: string;
    };
    /**
     * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    started_at?: string;
    /**
     * The current status.
     */
    status?: 'queued' | 'in_progress' | 'completed';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ChecksCreateResponse = check_run;

export type ChecksCreateError = string;

export type ChecksGetData = {
  path: {
    /**
     * The unique identifier of the check run.
     */
    check_run_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ChecksGetResponse = check_run;

export type ChecksGetError = string;

export type ChecksUpdateData = {
  body:
    | {
        status?: 'completed';
      }
    | {
        status?: 'queued' | 'in_progress';
      }
    | {
        /**
         * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
         */
        actions?: Array<{
          /**
           * A short explanation of what this action would do. The maximum size is 40 characters.
           */
          description: string;
          /**
           * A reference for the action on the integrator's system. The maximum size is 20 characters.
           */
          identifier: string;
          /**
           * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
           */
          label: string;
        }>;
        /**
         * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        completed_at?: string;
        /**
         * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
         * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
         */
        conclusion?:
          | 'action_required'
          | 'cancelled'
          | 'failure'
          | 'neutral'
          | 'success'
          | 'skipped'
          | 'stale'
          | 'timed_out';
        /**
         * The URL of the integrator's site that has the full details of the check.
         */
        details_url?: string;
        /**
         * A reference for the run on the integrator's system.
         */
        external_id?: string;
        /**
         * The name of the check. For example, "code-coverage".
         */
        name?: string;
        /**
         * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.
         */
        output?: {
          /**
           * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
           */
          annotations?: Array<{
            /**
             * The level of the annotation.
             */
            annotation_level: 'notice' | 'warning' | 'failure';
            /**
             * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
             */
            end_column?: number;
            /**
             * The end line of the annotation.
             */
            end_line: number;
            /**
             * A short description of the feedback for these lines of code. The maximum size is 64 KB.
             */
            message: string;
            /**
             * The path of the file to add an annotation to. For example, `assets/css/main.css`.
             */
            path: string;
            /**
             * Details about this annotation. The maximum size is 64 KB.
             */
            raw_details?: string;
            /**
             * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.
             */
            start_column?: number;
            /**
             * The start line of the annotation. Line numbers start at 1.
             */
            start_line: number;
            /**
             * The title that represents the annotation. The maximum size is 255 characters.
             */
            title?: string;
          }>;
          /**
           * Adds images to the output displayed in the GitHub pull request UI.
           */
          images?: Array<{
            /**
             * The alternative text for the image.
             */
            alt: string;
            /**
             * A short image description.
             */
            caption?: string;
            /**
             * The full URL of the image.
             */
            image_url: string;
          }>;
          /**
           * Can contain Markdown.
           */
          summary: string;
          /**
           * Can contain Markdown.
           */
          text?: string;
          /**
           * **Required**.
           */
          title?: string;
        };
        /**
         * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        started_at?: string;
        /**
         * The current status.
         */
        status?: 'queued' | 'in_progress' | 'completed';
      };
  path: {
    /**
     * The unique identifier of the check run.
     */
    check_run_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ChecksUpdateResponse = check_run;

export type ChecksUpdateError = string;

export type ChecksListAnnotationsData = {
  path: {
    /**
     * The unique identifier of the check run.
     */
    check_run_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ChecksListAnnotationsResponse = Array<check_annotation>;

export type ChecksListAnnotationsError = string;

export type ChecksRerequestRunData = {
  path: {
    /**
     * The unique identifier of the check run.
     */
    check_run_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ChecksRerequestRunResponse = empty_object;

export type ChecksRerequestRunError = basic_error;

export type ChecksCreateSuiteData = {
  body: {
    /**
     * The sha of the head commit.
     */
    head_sha: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ChecksCreateSuiteResponse = check_suite;

export type ChecksCreateSuiteError = string;

export type ChecksSetSuitesPreferencesData = {
  body: {
    /**
     * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
     */
    auto_trigger_checks?: Array<{
      /**
       * The `id` of the GitHub App.
       */
      app_id: number;
      /**
       * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
       */
      setting: boolean;
    }>;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ChecksSetSuitesPreferencesResponse = check_suite_preference;

export type ChecksSetSuitesPreferencesError = string;

export type ChecksGetSuiteData = {
  path: {
    /**
     * The unique identifier of the check suite.
     */
    check_suite_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ChecksGetSuiteResponse = check_suite;

export type ChecksGetSuiteError = string;

export type ChecksListForSuiteData = {
  path: {
    /**
     * The unique identifier of the check suite.
     */
    check_suite_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Returns check runs with the specified `name`.
     */
    check_name?: string;
    /**
     * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
     */
    filter?: 'latest' | 'all';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Returns check runs with the specified `status`.
     */
    status?: 'queued' | 'in_progress' | 'completed';
  };
};

export type ChecksListForSuiteResponse = {
  check_runs: Array<check_run>;
  total_count: number;
};

export type ChecksListForSuiteError = string;

export type ChecksRerequestSuiteData = {
  path: {
    /**
     * The unique identifier of the check suite.
     */
    check_suite_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ChecksRerequestSuiteResponse = empty_object;

export type ChecksRerequestSuiteError = string;

export type CodeScanningListAlertsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     */
    ref?: code_scanning_ref;
    /**
     * If specified, only code scanning alerts with this severity will be returned.
     */
    severity?: code_scanning_alert_severity;
    /**
     * The property by which to sort the results.
     */
    sort?: 'created' | 'updated';
    /**
     * If specified, only code scanning alerts with this state will be returned.
     */
    state?: code_scanning_alert_state;
    /**
     * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
     */
    tool_guid?: code_scanning_analysis_tool_guid;
    /**
     * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
     */
    tool_name?: code_scanning_analysis_tool_name;
  };
};

export type CodeScanningListAlertsForRepoResponse = Array<code_scanning_alert_items>;

export type CodeScanningListAlertsForRepoError =
  | string
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningGetAlertData = {
  path: {
    /**
     * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     */
    alert_number: alert_number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodeScanningGetAlertResponse = code_scanning_alert;

export type CodeScanningGetAlertError =
  | string
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningUpdateAlertData = {
  body: {
    dismissed_comment?: code_scanning_alert_dismissed_comment;
    dismissed_reason?: code_scanning_alert_dismissed_reason;
    state: code_scanning_alert_set_state;
  };
  path: {
    /**
     * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     */
    alert_number: alert_number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodeScanningUpdateAlertResponse = code_scanning_alert;

export type CodeScanningUpdateAlertError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningListAlertInstancesData = {
  path: {
    /**
     * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     */
    alert_number: alert_number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     */
    ref?: code_scanning_ref;
  };
};

export type CodeScanningListAlertInstancesResponse = Array<code_scanning_alert_instance>;

export type CodeScanningListAlertInstancesError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningListRecentAnalysesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     */
    ref?: code_scanning_ref;
    /**
     * Filter analyses belonging to the same SARIF upload.
     */
    sarif_id?: code_scanning_analysis_sarif_id;
    /**
     * The property by which to sort the results.
     */
    sort?: 'created';
    /**
     * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
     */
    tool_guid?: code_scanning_analysis_tool_guid;
    /**
     * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
     */
    tool_name?: code_scanning_analysis_tool_name;
  };
};

export type CodeScanningListRecentAnalysesResponse = Array<code_scanning_analysis>;

export type CodeScanningListRecentAnalysesError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningDeleteAnalysisData = {
  path: {
    /**
     * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
     */
    analysis_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`
     */
    confirm_delete?: string | null;
  };
};

export type CodeScanningDeleteAnalysisResponse = code_scanning_analysis_deletion;

export type CodeScanningDeleteAnalysisError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningGetAnalysisData = {
  path: {
    /**
     * The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.
     */
    analysis_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodeScanningGetAnalysisResponse = code_scanning_analysis;

export type CodeScanningGetAnalysisError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningListCodeqlDatabasesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodeScanningListCodeqlDatabasesResponse = Array<code_scanning_codeql_database>;

export type CodeScanningListCodeqlDatabasesError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningGetCodeqlDatabaseData = {
  path: {
    /**
     * The language of the CodeQL database.
     */
    language: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodeScanningGetCodeqlDatabaseResponse = code_scanning_codeql_database;

export type CodeScanningGetCodeqlDatabaseError =
  | string
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningUploadSarifData = {
  body: {
    /**
     * The base directory used in the analysis, as it appears in the SARIF file.
     * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
     */
    checkout_uri?: string;
    commit_sha: code_scanning_analysis_commit_sha;
    ref: code_scanning_ref;
    sarif: code_scanning_analysis_sarif_file;
    /**
     * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    started_at?: string;
    /**
     * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
     */
    tool_name?: string;
    /**
     * Whether the SARIF file will be validated according to the code scanning specifications.
     * This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
     */
    validate?: boolean;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodeScanningUploadSarifResponse = code_scanning_sarifs_receipt;

export type CodeScanningUploadSarifError =
  | string
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodeScanningGetSarifData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The SARIF ID obtained after uploading.
     */
    sarif_id: string;
  };
};

export type CodeScanningGetSarifResponse = code_scanning_sarifs_status;

export type CodeScanningGetSarifError =
  | basic_error
  | string
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type ReposCodeownersErrorsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)
     */
    ref?: string;
  };
};

export type ReposCodeownersErrorsResponse = codeowners_errors;

export type ReposCodeownersErrorsError = string;

export type CodespacesListInRepositoryForAuthenticatedUserData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type CodespacesListInRepositoryForAuthenticatedUserResponse = {
  codespaces: Array<codespace>;
  total_count: number;
};

export type CodespacesListInRepositoryForAuthenticatedUserError = basic_error;

export type CodespacesCreateWithRepoForAuthenticatedUserData = {
  body: {
    /**
     * IP for location auto-detection when proxying a request
     */
    client_ip?: string;
    /**
     * Path to devcontainer.json config to use for this codespace
     */
    devcontainer_path?: string;
    /**
     * Display name for this codespace
     */
    display_name?: string;
    /**
     * Time in minutes before codespace stops from inactivity
     */
    idle_timeout_minutes?: number;
    /**
     * Location for this codespace. Assigned by IP if not provided
     */
    location?: string;
    /**
     * Machine type to use for this codespace
     */
    machine?: string;
    /**
     * Whether to authorize requested permissions from devcontainer.json
     */
    multi_repo_permissions_opt_out?: boolean;
    /**
     * Git ref (typically a branch name) for this codespace
     */
    ref?: string;
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     */
    retention_period_minutes?: number;
    /**
     * Working directory for this codespace
     */
    working_directory?: string;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodespacesCreateWithRepoForAuthenticatedUserResponse = codespace;

export type CodespacesCreateWithRepoForAuthenticatedUserError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserResponse = {
  devcontainers: Array<{
    name?: string;
    path: string;
  }>;
  total_count: number;
};

export type CodespacesListDevcontainersInRepositoryForAuthenticatedUserError = basic_error;

export type CodespacesRepoMachinesForAuthenticatedUserData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * IP for location auto-detection when proxying a request
     */
    client_ip?: string;
    /**
     * The location to check for available machines. Assigned by IP if not provided.
     */
    location?: string;
  };
};

export type CodespacesRepoMachinesForAuthenticatedUserResponse = {
  machines: Array<codespace_machine>;
  total_count: number;
};

export type CodespacesRepoMachinesForAuthenticatedUserError = string | basic_error;

export type CodespacesPreFlightWithRepoForAuthenticatedUserData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * An alternative IP for default location auto-detection, such as when proxying a request.
     */
    client_ip?: string;
    /**
     * The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
     */
    ref?: string;
  };
};

export type CodespacesPreFlightWithRepoForAuthenticatedUserResponse = {
  billable_owner?: simple_user;
  defaults?: {
    devcontainer_path: string | null;
    location: string;
  };
};

export type CodespacesPreFlightWithRepoForAuthenticatedUserError = basic_error;

export type CodespacesListRepoSecretsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type CodespacesListRepoSecretsResponse = {
  secrets: Array<repo_codespaces_secret>;
  total_count: number;
};

export type CodespacesListRepoSecretsError = string;

export type CodespacesGetRepoPublicKeyData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodespacesGetRepoPublicKeyResponse = codespaces_public_key;

export type CodespacesGetRepoPublicKeyError = string;

export type CodespacesDeleteRepoSecretData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesDeleteRepoSecretResponse = {};

export type CodespacesDeleteRepoSecretError = string;

export type CodespacesGetRepoSecretData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesGetRepoSecretResponse = repo_codespaces_secret;

export type CodespacesGetRepoSecretError = string;

export type CodespacesCreateOrUpdateRepoSecretData = {
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesCreateOrUpdateRepoSecretResponse = empty_object | {};

export type CodespacesCreateOrUpdateRepoSecretError = string;

export type ReposListCollaboratorsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
     */
    affiliation?: 'outside' | 'direct' | 'all';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
     */
    permission?: 'pull' | 'triage' | 'push' | 'maintain' | 'admin';
  };
};

export type ReposListCollaboratorsResponse = Array<collaborator>;

export type ReposListCollaboratorsError = basic_error;

export type ReposRemoveCollaboratorData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type ReposRemoveCollaboratorResponse = {};

export type ReposRemoveCollaboratorError = string;

export type ReposCheckCollaboratorData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type ReposCheckCollaboratorResponse = {};

export type ReposCheckCollaboratorError = string;

export type ReposAddCollaboratorData = {
  body?: {
    /**
     * The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
     */
    permission?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type ReposAddCollaboratorResponse = repository_invitation | {};

export type ReposAddCollaboratorError = basic_error | validation_error;

export type ReposGetCollaboratorPermissionLevelData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type ReposGetCollaboratorPermissionLevelResponse = repository_collaborator_permission;

export type ReposGetCollaboratorPermissionLevelError = basic_error;

export type ReposListCommitCommentsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListCommitCommentsForRepoResponse = Array<commit_comment>;

export type ReposListCommitCommentsForRepoError = string;

export type ReposDeleteCommitCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteCommitCommentResponse = {};

export type ReposDeleteCommitCommentError = basic_error;

export type ReposGetCommitCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetCommitCommentResponse = commit_comment;

export type ReposGetCommitCommentError = basic_error;

export type ReposUpdateCommitCommentData = {
  body: {
    /**
     * The contents of the comment
     */
    body: string;
  };
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateCommitCommentResponse = commit_comment;

export type ReposUpdateCommitCommentError = basic_error;

export type ReactionsListForCommitCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
     */
    content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForCommitCommentResponse = Array<reaction>;

export type ReactionsListForCommitCommentError = basic_error;

export type ReactionsCreateForCommitCommentData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
     */
    content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsCreateForCommitCommentResponse = reaction;

export type ReactionsCreateForCommitCommentError = validation_error;

export type ReactionsDeleteForCommitCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the reaction.
     */
    reaction_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsDeleteForCommitCommentResponse = {};

export type ReactionsDeleteForCommitCommentError = string;

export type ReposListCommitsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * GitHub login or email address by which to filter by commit author.
     */
    author?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * Only commits containing this file path will be returned.
     */
    path?: string;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).
     */
    sha?: string;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    /**
     * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    until?: string;
  };
};

export type ReposListCommitsResponse = Array<commit>;

export type ReposListCommitsError = basic_error;

export type ReposListBranchesForHeadCommitData = {
  path: {
    /**
     * The SHA of the commit.
     */
    commit_sha: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposListBranchesForHeadCommitResponse = Array<branch_short>;

export type ReposListBranchesForHeadCommitError = validation_error;

export type ReposListCommentsForCommitData = {
  path: {
    /**
     * The SHA of the commit.
     */
    commit_sha: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListCommentsForCommitResponse = Array<commit_comment>;

export type ReposListCommentsForCommitError = string;

export type ReposCreateCommitCommentData = {
  body: {
    /**
     * The contents of the comment.
     */
    body: string;
    /**
     * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
     */
    line?: number;
    /**
     * Relative path of the file to comment on.
     */
    path?: string;
    /**
     * Line index in the diff to comment on.
     */
    position?: number;
  };
  path: {
    /**
     * The SHA of the commit.
     */
    commit_sha: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateCommitCommentResponse = commit_comment;

export type ReposCreateCommitCommentError = basic_error | validation_error;

export type ReposListPullRequestsAssociatedWithCommitData = {
  path: {
    /**
     * The SHA of the commit.
     */
    commit_sha: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListPullRequestsAssociatedWithCommitResponse = Array<pull_request_simple>;

export type ReposListPullRequestsAssociatedWithCommitError = string;

export type ReposGetCommitData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * ref parameter
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposGetCommitResponse = commit;

export type ReposGetCommitError =
  | basic_error
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type ChecksListForRefData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * ref parameter
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    app_id?: number;
    /**
     * Returns check runs with the specified `name`.
     */
    check_name?: string;
    /**
     * Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
     */
    filter?: 'latest' | 'all';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Returns check runs with the specified `status`.
     */
    status?: 'queued' | 'in_progress' | 'completed';
  };
};

export type ChecksListForRefResponse = {
  check_runs: Array<check_run>;
  total_count: number;
};

export type ChecksListForRefError = string;

export type ChecksListSuitesForRefData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * ref parameter
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Filters check suites by GitHub App `id`.
     */
    app_id?: number;
    /**
     * Returns check runs with the specified `name`.
     */
    check_name?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ChecksListSuitesForRefResponse = {
  check_suites: Array<check_suite>;
  total_count: number;
};

export type ChecksListSuitesForRefError = string;

export type ReposGetCombinedStatusForRefData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * ref parameter
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposGetCombinedStatusForRefResponse = combined_commit_status;

export type ReposGetCombinedStatusForRefError = basic_error;

export type ReposListCommitStatusesForRefData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * ref parameter
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListCommitStatusesForRefResponse = Array<status>;

export type ReposListCommitStatusesForRefError = basic_error;

export type ReposGetCommunityProfileMetricsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetCommunityProfileMetricsResponse = community_profile;

export type ReposGetCommunityProfileMetricsError = string;

export type ReposCompareCommitsData = {
  path: {
    /**
     * The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.
     */
    basehead: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposCompareCommitsResponse = commit_comparison;

export type ReposCompareCommitsError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type ReposDeleteFileData = {
  body: {
    /**
     * object containing information about the author.
     */
    author?: {
      /**
       * The email of the author (or committer) of the commit
       */
      email?: string;
      /**
       * The name of the author (or committer) of the commit
       */
      name?: string;
    };
    /**
     * The branch name. Default: the repository’s default branch (usually `master`)
     */
    branch?: string;
    /**
     * object containing information about the committer.
     */
    committer?: {
      /**
       * The email of the author (or committer) of the commit
       */
      email?: string;
      /**
       * The name of the author (or committer) of the commit
       */
      name?: string;
    };
    /**
     * The commit message.
     */
    message: string;
    /**
     * The blob SHA of the file being deleted.
     */
    sha: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * path parameter
     */
    path: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteFileResponse = file_commit;

export type ReposDeleteFileError =
  | basic_error
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type ReposGetContentData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * path parameter
     */
    path: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
     */
    ref?: string;
  };
};

export type ReposGetContentResponse = content_directory | content_file | content_symlink | content_submodule;

export type ReposGetContentError = string | basic_error;

export type ReposCreateOrUpdateFileContentsData = {
  body: {
    /**
     * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
     */
    author?: {
      date?: string;
      /**
       * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
       */
      email: string;
      /**
       * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
       */
      name: string;
    };
    /**
     * The branch name. Default: the repository’s default branch (usually `master`)
     */
    branch?: string;
    /**
     * The person that committed the file. Default: the authenticated user.
     */
    committer?: {
      date?: string;
      /**
       * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
       */
      email: string;
      /**
       * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
       */
      name: string;
    };
    /**
     * The new file content, using Base64 encoding.
     */
    content: string;
    /**
     * The commit message.
     */
    message: string;
    /**
     * **Required if you are updating a file**. The blob SHA of the file being replaced.
     */
    sha?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * path parameter
     */
    path: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateOrUpdateFileContentsResponse = file_commit;

export type ReposCreateOrUpdateFileContentsError = basic_error | validation_error;

export type ReposListContributorsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Set to `1` or `true` to include anonymous contributors in results.
     */
    anon?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListContributorsResponse = Array<contributor> | {};

export type ReposListContributorsError = basic_error;

export type DependabotListAlertsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
     */
    after?: string;
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
     */
    before?: string;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.
     *
     * Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
     */
    ecosystem?: string;
    /**
     * **Deprecated**. The number of results per page (max 100), starting from the first matching result.
     * This parameter must not be used in combination with `last`.
     * Instead, use `per_page` in combination with `after` to fetch the first page of results.
     */
    first?: number;
    /**
     * **Deprecated**. The number of results per page (max 100), starting from the last matching result.
     * This parameter must not be used in combination with `first`.
     * Instead, use `per_page` in combination with `before` to fetch the last page of results.
     */
    last?: number;
    /**
     * A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
     */
    manifest?: string;
    /**
     * A comma-separated list of package names. If specified, only alerts for these packages will be returned.
     */
    package?: string;
    /**
     * **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
     * @deprecated
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     * @deprecated
     */
    per_page?: number;
    /**
     * The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
     */
    scope?: 'development' | 'runtime';
    /**
     * A comma-separated list of severities. If specified, only alerts with these severities will be returned.
     *
     * Can be: `low`, `medium`, `high`, `critical`
     */
    severity?: string;
    /**
     * The property by which to sort the results.
     * `created` means when the alert was created.
     * `updated` means when the alert's state last changed.
     */
    sort?: 'created' | 'updated';
    /**
     * A comma-separated list of states. If specified, only alerts with these states will be returned.
     *
     * Can be: `dismissed`, `fixed`, `open`
     */
    state?: string;
  };
};

export type DependabotListAlertsForRepoResponse = Array<dependabot_alert>;

export type DependabotListAlertsForRepoError = string | basic_error | validation_error_simple;

export type DependabotGetAlertData = {
  path: {
    /**
     * The number that identifies a Dependabot alert in its repository.
     * You can find this at the end of the URL for a Dependabot alert within GitHub,
     * or in `number` fields in the response from the
     * `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
     */
    alert_number: alert_number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type DependabotGetAlertResponse = dependabot_alert;

export type DependabotGetAlertError = string | basic_error;

export type DependabotUpdateAlertData = {
  body: {
    /**
     * An optional comment associated with dismissing the alert.
     */
    dismissed_comment?: string;
    /**
     * **Required when `state` is `dismissed`.** A reason for dismissing the alert.
     */
    dismissed_reason?: 'fix_started' | 'inaccurate' | 'no_bandwidth' | 'not_used' | 'tolerable_risk';
    /**
     * The state of the Dependabot alert.
     * A `dismissed_reason` must be provided when setting the state to `dismissed`.
     */
    state: 'dismissed' | 'open';
  };
  path: {
    /**
     * The number that identifies a Dependabot alert in its repository.
     * You can find this at the end of the URL for a Dependabot alert within GitHub,
     * or in `number` fields in the response from the
     * `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
     */
    alert_number: alert_number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type DependabotUpdateAlertResponse = dependabot_alert;

export type DependabotUpdateAlertError = basic_error | validation_error_simple;

export type DependabotListRepoSecretsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type DependabotListRepoSecretsResponse = {
  secrets: Array<dependabot_secret>;
  total_count: number;
};

export type DependabotListRepoSecretsError = string;

export type DependabotGetRepoPublicKeyData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type DependabotGetRepoPublicKeyResponse = dependabot_public_key;

export type DependabotGetRepoPublicKeyError = string;

export type DependabotDeleteRepoSecretData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotDeleteRepoSecretResponse = {};

export type DependabotDeleteRepoSecretError = string;

export type DependabotGetRepoSecretData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotGetRepoSecretResponse = dependabot_secret;

export type DependabotGetRepoSecretError = string;

export type DependabotCreateOrUpdateRepoSecretData = {
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type DependabotCreateOrUpdateRepoSecretResponse = empty_object | {};

export type DependabotCreateOrUpdateRepoSecretError = string;

export type DependencyGraphDiffRangeData = {
  path: {
    /**
     * The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.
     */
    basehead: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The full path, relative to the repository root, of the dependency manifest file.
     */
    name?: string;
  };
};

export type DependencyGraphDiffRangeResponse = dependency_graph_diff;

export type DependencyGraphDiffRangeError = basic_error;

export type DependencyGraphCreateRepositorySnapshotData = {
  body: snapshot;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type DependencyGraphCreateRepositorySnapshotResponse = {
  /**
   * The time at which the snapshot was created.
   */
  created_at: string;
  /**
   * ID of the created snapshot.
   */
  id: number;
  /**
   * A message providing further details about the result, such as why the dependencies were not updated.
   */
  message: string;
  /**
   * Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed.
   */
  result: string;
};

export type DependencyGraphCreateRepositorySnapshotError = string;

export type ReposListDeploymentsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The name of the environment that was deployed to (e.g., `staging` or `production`).
     */
    environment?: string | null;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The name of the ref. This can be a branch, tag, or SHA.
     */
    ref?: string;
    /**
     * The SHA recorded at creation time.
     */
    sha?: string;
    /**
     * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
     */
    task?: string;
  };
};

export type ReposListDeploymentsResponse = Array<deployment>;

export type ReposListDeploymentsError = string;

export type ReposCreateDeploymentData = {
  body: {
    /**
     * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
     */
    auto_merge?: boolean;
    /**
     * Short description of the deployment.
     */
    description?: string | null;
    /**
     * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
     */
    environment?: string;
    payload?:
      | {
          [key: string]: string;
        }
      | string;
    /**
     * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
     */
    production_environment?: boolean;
    /**
     * The ref to deploy. This can be a branch, tag, or SHA.
     */
    ref: string;
    /**
     * The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
     */
    required_contexts?: Array<string>;
    /**
     * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
     */
    task?: string;
    /**
     * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
     */
    transient_environment?: boolean;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateDeploymentResponse =
  | deployment
  | {
      message?: string;
    };

export type ReposCreateDeploymentError = string | validation_error;

export type ReposDeleteDeploymentData = {
  path: {
    /**
     * deployment_id parameter
     */
    deployment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteDeploymentResponse = {};

export type ReposDeleteDeploymentError = basic_error | validation_error_simple;

export type ReposGetDeploymentData = {
  path: {
    /**
     * deployment_id parameter
     */
    deployment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetDeploymentResponse = deployment;

export type ReposGetDeploymentError = basic_error;

export type ReposListDeploymentStatusesData = {
  path: {
    /**
     * deployment_id parameter
     */
    deployment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListDeploymentStatusesResponse = Array<deployment_status>;

export type ReposListDeploymentStatusesError = basic_error;

export type ReposCreateDeploymentStatusData = {
  body: {
    /**
     * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
     */
    auto_inactive?: boolean;
    /**
     * A short description of the status. The maximum description length is 140 characters.
     */
    description?: string;
    /**
     * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
     */
    environment?: 'production' | 'staging' | 'qa';
    /**
     * Sets the URL for accessing your environment. Default: `""`
     */
    environment_url?: string;
    /**
     * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
     */
    log_url?: string;
    /**
     * The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
     */
    state: 'error' | 'failure' | 'inactive' | 'in_progress' | 'queued' | 'pending' | 'success';
    /**
     * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
     */
    target_url?: string;
  };
  path: {
    /**
     * deployment_id parameter
     */
    deployment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateDeploymentStatusResponse = deployment_status;

export type ReposCreateDeploymentStatusError = validation_error;

export type ReposGetDeploymentStatusData = {
  path: {
    /**
     * deployment_id parameter
     */
    deployment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    status_id: number;
  };
};

export type ReposGetDeploymentStatusResponse = deployment_status;

export type ReposGetDeploymentStatusError = basic_error;

export type ReposCreateDispatchEventData = {
  body: {
    /**
     * JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.
     */
    client_payload?: {
      [key: string]: string;
    };
    /**
     * A custom webhook event name. Must be 100 characters or fewer.
     */
    event_type: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateDispatchEventResponse = {};

export type ReposCreateDispatchEventError = validation_error;

export type ReposGetAllEnvironmentsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposGetAllEnvironmentsResponse = {
  environments?: Array<environment>;
  /**
   * The number of environments in this repository
   */
  total_count?: number;
};

export type ReposGetAllEnvironmentsError = string;

export type ReposDeleteAnEnvironmentData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteAnEnvironmentResponse = {};

export type ReposDeleteAnEnvironmentError = string;

export type ReposGetEnvironmentData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetEnvironmentResponse = environment;

export type ReposGetEnvironmentError = string;

export type ReposCreateOrUpdateEnvironmentData = {
  body?: {
    deployment_branch_policy?: deployment_branch_policy_settings;
    /**
     * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
     */
    reviewers?: Array<{
      /**
       * The id of the user or team who can review the deployment
       */
      id?: number;
      type?: deployment_reviewer_type;
    }> | null;
    wait_timer?: wait_timer;
  } | null;
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateOrUpdateEnvironmentResponse = environment;

export type ReposCreateOrUpdateEnvironmentError = basic_error;

export type ReposListDeploymentBranchPoliciesData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListDeploymentBranchPoliciesResponse = {
  branch_policies: Array<deployment_branch_policy>;
  /**
   * The number of deployment branch policies for the environment.
   */
  total_count: number;
};

export type ReposListDeploymentBranchPoliciesError = string;

export type ReposCreateDeploymentBranchPolicyData = {
  body: deployment_branch_policy_name_pattern;
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateDeploymentBranchPolicyResponse = deployment_branch_policy;

export type ReposCreateDeploymentBranchPolicyError = string;

export type ReposDeleteDeploymentBranchPolicyData = {
  path: {
    /**
     * The unique identifier of the branch policy.
     */
    branch_policy_id: number;
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteDeploymentBranchPolicyResponse = {};

export type ReposDeleteDeploymentBranchPolicyError = string;

export type ReposGetDeploymentBranchPolicyData = {
  path: {
    /**
     * The unique identifier of the branch policy.
     */
    branch_policy_id: number;
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetDeploymentBranchPolicyResponse = deployment_branch_policy;

export type ReposGetDeploymentBranchPolicyError = string;

export type ReposUpdateDeploymentBranchPolicyData = {
  body: deployment_branch_policy_name_pattern;
  path: {
    /**
     * The unique identifier of the branch policy.
     */
    branch_policy_id: number;
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateDeploymentBranchPolicyResponse = deployment_branch_policy;

export type ReposUpdateDeploymentBranchPolicyError = string;

export type ActivityListRepoEventsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListRepoEventsResponse = Array<event>;

export type ActivityListRepoEventsError = string;

export type ReposListForksData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The sort order. `stargazers` will sort by star count.
     */
    sort?: 'newest' | 'oldest' | 'stargazers' | 'watchers';
  };
};

export type ReposListForksResponse = Array<minimal_repository>;

export type ReposListForksError = basic_error;

export type ReposCreateForkData = {
  body?: {
    /**
     * When forking from an existing repository, fork with only the default branch.
     */
    default_branch_only?: boolean;
    /**
     * When forking from an existing repository, a new name for the fork.
     */
    name?: string;
    /**
     * Optional parameter to specify the organization name if forking into an organization.
     */
    organization?: string;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateForkResponse = full_repository;

export type ReposCreateForkError = basic_error | validation_error;

export type GitCreateBlobData = {
  body: {
    /**
     * The new blob's content.
     */
    content: string;
    /**
     * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
     */
    encoding?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitCreateBlobResponse = short_blob;

export type GitCreateBlobError = basic_error | validation_error;

export type GitGetBlobData = {
  path: {
    file_sha: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitGetBlobResponse = blob;

export type GitGetBlobError = basic_error | validation_error;

export type GitCreateCommitData = {
  body: {
    /**
     * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
     */
    author?: {
      /**
       * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      date?: string;
      /**
       * The email of the author (or committer) of the commit
       */
      email: string;
      /**
       * The name of the author (or committer) of the commit
       */
      name: string;
    };
    /**
     * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
     */
    committer?: {
      /**
       * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      date?: string;
      /**
       * The email of the author (or committer) of the commit
       */
      email?: string;
      /**
       * The name of the author (or committer) of the commit
       */
      name?: string;
    };
    /**
     * The commit message
     */
    message: string;
    /**
     * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
     */
    parents?: Array<string>;
    /**
     * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
     */
    signature?: string;
    /**
     * The SHA of the tree object this commit points to
     */
    tree: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitCreateCommitResponse = git_commit;

export type GitCreateCommitError = basic_error | validation_error;

export type GitGetCommitData = {
  path: {
    /**
     * The SHA of the commit.
     */
    commit_sha: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitGetCommitResponse = git_commit;

export type GitGetCommitError = basic_error;

export type GitListMatchingRefsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * ref parameter
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitListMatchingRefsResponse = Array<git_ref>;

export type GitListMatchingRefsError = string;

export type GitGetRefData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * ref parameter
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitGetRefResponse = git_ref;

export type GitGetRefError = basic_error;

export type GitCreateRefData = {
  body: {
    key?: string;
    /**
     * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
     */
    ref: string;
    /**
     * The SHA1 value for this reference.
     */
    sha: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitCreateRefResponse = git_ref;

export type GitCreateRefError = validation_error;

export type GitDeleteRefData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * ref parameter
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitDeleteRefResponse = {};

export type GitDeleteRefError = validation_error;

export type GitUpdateRefData = {
  body: {
    /**
     * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
     */
    force?: boolean;
    /**
     * The SHA1 value to set this reference to
     */
    sha: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the fully qualified reference to update. For example, `refs/heads/master`. If the value doesn't start with `refs` and have at least two slashes, it will be rejected.
     */
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitUpdateRefResponse = git_ref;

export type GitUpdateRefError = validation_error;

export type GitCreateTagData = {
  body: {
    /**
     * The tag message.
     */
    message: string;
    /**
     * The SHA of the git object this is tagging.
     */
    object: string;
    /**
     * The tag's name. This is typically a version (e.g., "v0.0.1").
     */
    tag: string;
    /**
     * An object with information about the individual creating the tag.
     */
    tagger?: {
      /**
       * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      date?: string;
      /**
       * The email of the author of the tag
       */
      email: string;
      /**
       * The name of the author of the tag
       */
      name: string;
    };
    /**
     * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
     */
    type: 'commit' | 'tree' | 'blob';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitCreateTagResponse = git_tag;

export type GitCreateTagError = validation_error;

export type GitGetTagData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    tag_sha: string;
  };
};

export type GitGetTagResponse = git_tag;

export type GitGetTagError = basic_error;

export type GitCreateTreeData = {
  body: {
    /**
     * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
     * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
     *
     */
    base_tree?: string;
    /**
     * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
     */
    tree: Array<{
      /**
       * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
       *
       * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
       */
      content?: string;
      /**
       * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
       */
      mode?: '100644' | '100755' | '040000' | '160000' | '120000';
      /**
       * The file referenced in the tree.
       */
      path?: string;
      /**
       * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
       *
       * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
       */
      sha?: string | null;
      /**
       * Either `blob`, `tree`, or `commit`.
       */
      type?: 'blob' | 'tree' | 'commit';
    }>;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type GitCreateTreeResponse = git_tree;

export type GitCreateTreeError = basic_error | validation_error;

export type GitGetTreeData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    tree_sha: string;
  };
  query?: {
    /**
     * Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
     */
    recursive?: string;
  };
};

export type GitGetTreeResponse = git_tree;

export type GitGetTreeError = basic_error | validation_error;

export type ReposListWebhooksData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListWebhooksResponse = Array<hook>;

export type ReposListWebhooksError = basic_error;

export type ReposCreateWebhookData = {
  body?: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     */
    active?: boolean;
    /**
     * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
     */
    config?: {
      content_type?: webhook_config_content_type;
      digest?: string;
      insecure_ssl?: webhook_config_insecure_ssl;
      secret?: webhook_config_secret;
      token?: string;
      url?: webhook_config_url;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
     */
    events?: Array<string>;
    /**
     * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
     */
    name?: string;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateWebhookResponse = hook;

export type ReposCreateWebhookError = basic_error | validation_error;

export type ReposDeleteWebhookData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteWebhookResponse = {};

export type ReposDeleteWebhookError = basic_error;

export type ReposGetWebhookData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetWebhookResponse = hook;

export type ReposGetWebhookError = basic_error;

export type ReposUpdateWebhookData = {
  body: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     */
    active?: boolean;
    /**
     * Determines a list of events to be added to the list of events that the Hook triggers for.
     */
    add_events?: Array<string>;
    /**
     * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
     */
    config?: {
      address?: string;
      content_type?: webhook_config_content_type;
      insecure_ssl?: webhook_config_insecure_ssl;
      room?: string;
      secret?: webhook_config_secret;
      url: webhook_config_url;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
     */
    events?: Array<string>;
    /**
     * Determines a list of events to be removed from the list of events that the Hook triggers for.
     */
    remove_events?: Array<string>;
  };
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateWebhookResponse = hook;

export type ReposUpdateWebhookError = basic_error | validation_error;

export type ReposGetWebhookConfigForRepoData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetWebhookConfigForRepoResponse = webhook_config;

export type ReposGetWebhookConfigForRepoError = string;

export type ReposUpdateWebhookConfigForRepoData = {
  body?: {
    content_type?: webhook_config_content_type;
    insecure_ssl?: webhook_config_insecure_ssl;
    secret?: webhook_config_secret;
    url?: webhook_config_url;
  };
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateWebhookConfigForRepoResponse = webhook_config;

export type ReposUpdateWebhookConfigForRepoError = string;

export type ReposListWebhookDeliveriesData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
     */
    cursor?: string;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    redelivery?: boolean;
  };
};

export type ReposListWebhookDeliveriesResponse = Array<hook_delivery_item>;

export type ReposListWebhookDeliveriesError = basic_error | validation_error;

export type ReposGetWebhookDeliveryData = {
  path: {
    delivery_id: number;
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetWebhookDeliveryResponse = hook_delivery;

export type ReposGetWebhookDeliveryError = basic_error | validation_error;

export type ReposRedeliverWebhookDeliveryData = {
  path: {
    delivery_id: number;
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposRedeliverWebhookDeliveryResponse = {
  [key: string]: string;
};

export type ReposRedeliverWebhookDeliveryError = basic_error | validation_error;

export type ReposPingWebhookData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposPingWebhookResponse = {};

export type ReposPingWebhookError = basic_error;

export type ReposTestPushWebhookData = {
  path: {
    /**
     * The unique identifier of the hook.
     */
    hook_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposTestPushWebhookResponse = {};

export type ReposTestPushWebhookError = basic_error;

export type MigrationsCancelImportData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type MigrationsCancelImportResponse = {};

export type MigrationsCancelImportError = basic_error;

export type MigrationsGetImportStatusData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type MigrationsGetImportStatusResponse = _import;

export type MigrationsGetImportStatusError = basic_error;

export type MigrationsUpdateImportData = {
  body?: {
    /**
     * For a tfvc import, the name of the project that is being imported.
     */
    tfvc_project?: string;
    /**
     * The type of version control system you are migrating from.
     */
    vcs?: 'subversion' | 'tfvc' | 'git' | 'mercurial';
    /**
     * The password to provide to the originating repository.
     */
    vcs_password?: string;
    /**
     * The username to provide to the originating repository.
     */
    vcs_username?: string;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type MigrationsUpdateImportResponse = _import;

export type MigrationsUpdateImportError = basic_error;

export type MigrationsStartImportData = {
  body: {
    /**
     * For a tfvc import, the name of the project that is being imported.
     */
    tfvc_project?: string;
    /**
     * The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
     */
    vcs?: 'subversion' | 'git' | 'mercurial' | 'tfvc';
    /**
     * If authentication is required, the password to provide to `vcs_url`.
     */
    vcs_password?: string;
    /**
     * The URL of the originating repository.
     */
    vcs_url: string;
    /**
     * If authentication is required, the username to provide to `vcs_url`.
     */
    vcs_username?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type MigrationsStartImportResponse = _import;

export type MigrationsStartImportError = basic_error | validation_error;

export type MigrationsGetCommitAuthorsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * A user ID. Only return users with an ID greater than this ID.
     */
    since?: number;
  };
};

export type MigrationsGetCommitAuthorsResponse = Array<porter_author>;

export type MigrationsGetCommitAuthorsError = basic_error;

export type MigrationsMapCommitAuthorData = {
  body?: {
    /**
     * The new Git author email.
     */
    email?: string;
    /**
     * The new Git author name.
     */
    name?: string;
  };
  path: {
    author_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type MigrationsMapCommitAuthorResponse = porter_author;

export type MigrationsMapCommitAuthorError = basic_error | validation_error;

export type MigrationsGetLargeFilesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type MigrationsGetLargeFilesResponse = Array<porter_large_file>;

export type MigrationsGetLargeFilesError = basic_error;

export type MigrationsSetLfsPreferenceData = {
  body: {
    /**
     * Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
     */
    use_lfs: 'opt_in' | 'opt_out';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type MigrationsSetLfsPreferenceResponse = _import;

export type MigrationsSetLfsPreferenceError = validation_error | basic_error;

export type AppsGetRepoInstallationData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type AppsGetRepoInstallationResponse = installation;

export type AppsGetRepoInstallationError = basic_error;

export type InteractionsRemoveRestrictionsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type InteractionsRemoveRestrictionsForRepoResponse = {};

export type InteractionsRemoveRestrictionsForRepoError = string;

export type InteractionsGetRestrictionsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type InteractionsGetRestrictionsForRepoResponse =
  | interaction_limit_response
  | {
      [key: string]: string;
    };

export type InteractionsGetRestrictionsForRepoError = string;

export type InteractionsSetRestrictionsForRepoData = {
  body: interaction_limit;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type InteractionsSetRestrictionsForRepoResponse = interaction_limit_response;

export type InteractionsSetRestrictionsForRepoError = string;

export type ReposListInvitationsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListInvitationsResponse = Array<repository_invitation>;

export type ReposListInvitationsError = string;

export type ReposDeleteInvitationData = {
  path: {
    /**
     * The unique identifier of the invitation.
     */
    invitation_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteInvitationResponse = {};

export type ReposDeleteInvitationError = string;

export type ReposUpdateInvitationData = {
  body?: {
    /**
     * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
     */
    permissions?: 'read' | 'write' | 'maintain' | 'triage' | 'admin';
  };
  path: {
    /**
     * The unique identifier of the invitation.
     */
    invitation_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateInvitationResponse = repository_invitation;

export type ReposUpdateInvitationError = string;

export type IssuesListForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
     */
    assignee?: string;
    /**
     * The user that created the issue.
     */
    creator?: string;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * A list of comma separated label names. Example: `bug,ui,@high`
     */
    labels?: string;
    /**
     * A user that's mentioned in the issue.
     */
    mentioned?: string;
    /**
     * If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
     */
    milestone?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    /**
     * What to sort results by.
     */
    sort?: 'created' | 'updated' | 'comments';
    /**
     * Indicates the state of the issues to return.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type IssuesListForRepoResponse = Array<issue>;

export type IssuesListForRepoError = basic_error | validation_error;

export type IssuesCreateData = {
  body: {
    /**
     * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
     */
    assignee?: string | null;
    /**
     * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
     */
    assignees?: Array<string>;
    /**
     * The contents of the issue.
     */
    body?: string;
    /**
     * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
     */
    labels?: Array<
      | string
      | {
          color?: string | null;
          description?: string | null;
          id?: number;
          name?: string;
        }
    >;
    milestone?: (string | number) | null;
    /**
     * The title of the issue.
     */
    title: string | number;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesCreateResponse = issue;

export type IssuesCreateError =
  | basic_error
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type IssuesListCommentsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Either `asc` or `desc`. Ignored without the `sort` parameter.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    /**
     * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
     */
    sort?: 'created' | 'updated';
  };
};

export type IssuesListCommentsForRepoResponse = Array<issue_comment>;

export type IssuesListCommentsForRepoError = basic_error | validation_error;

export type IssuesDeleteCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesDeleteCommentResponse = {};

export type IssuesDeleteCommentError = string;

export type IssuesGetCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesGetCommentResponse = issue_comment;

export type IssuesGetCommentError = basic_error;

export type IssuesUpdateCommentData = {
  body: {
    /**
     * The contents of the comment.
     */
    body: string;
  };
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesUpdateCommentResponse = issue_comment;

export type IssuesUpdateCommentError = validation_error;

export type ReactionsListForIssueCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
     */
    content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForIssueCommentResponse = Array<reaction>;

export type ReactionsListForIssueCommentError = basic_error;

export type ReactionsCreateForIssueCommentData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
     */
    content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsCreateForIssueCommentResponse = reaction;

export type ReactionsCreateForIssueCommentError = validation_error;

export type ReactionsDeleteForIssueCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the reaction.
     */
    reaction_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsDeleteForIssueCommentResponse = {};

export type ReactionsDeleteForIssueCommentError = string;

export type IssuesListEventsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type IssuesListEventsForRepoResponse = Array<issue_event>;

export type IssuesListEventsForRepoError = validation_error;

export type IssuesGetEventData = {
  path: {
    event_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesGetEventResponse = issue_event;

export type IssuesGetEventError = basic_error;

export type IssuesGetData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesGetResponse = issue;

export type IssuesGetError = basic_error | string;

export type IssuesUpdateData = {
  body?: {
    /**
     * Username to assign to this issue. **This field is deprecated.**
     */
    assignee?: string | null;
    /**
     * Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
     */
    assignees?: Array<string>;
    /**
     * The contents of the issue.
     */
    body?: string | null;
    /**
     * Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
     */
    labels?: Array<
      | string
      | {
          color?: string | null;
          description?: string | null;
          id?: number;
          name?: string;
        }
    >;
    milestone?: (string | number) | null;
    /**
     * The open or closed state of the issue.
     */
    state?: 'open' | 'closed';
    /**
     * The reason for the state change. Ignored unless `state` is changed.
     */
    state_reason?: ('completed' | 'not_planned' | 'reopened') | null;
    /**
     * The title of the issue.
     */
    title?: (string | number) | null;
  };
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesUpdateResponse = issue;

export type IssuesUpdateError =
  | basic_error
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type IssuesRemoveAssigneesData = {
  body?: {
    /**
     * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
     */
    assignees?: Array<string>;
  };
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesRemoveAssigneesResponse = issue;

export type IssuesRemoveAssigneesError = string;

export type IssuesAddAssigneesData = {
  body?: {
    /**
     * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
     */
    assignees?: Array<string>;
  };
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesAddAssigneesResponse = issue;

export type IssuesAddAssigneesError = string;

export type IssuesCheckUserCanBeAssignedToIssueData = {
  path: {
    assignee: string;
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesCheckUserCanBeAssignedToIssueResponse = {};

export type IssuesCheckUserCanBeAssignedToIssueError = basic_error;

export type IssuesListCommentsData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
  };
};

export type IssuesListCommentsResponse = Array<issue_comment>;

export type IssuesListCommentsError = basic_error;

export type IssuesCreateCommentData = {
  body: {
    /**
     * The contents of the comment.
     */
    body: string;
  };
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesCreateCommentResponse = issue_comment;

export type IssuesCreateCommentError = basic_error | validation_error;

export type IssuesListEventsData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type IssuesListEventsResponse = Array<issue_event_for_issue>;

export type IssuesListEventsError = basic_error;

export type IssuesRemoveAllLabelsData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesRemoveAllLabelsResponse = {};

export type IssuesRemoveAllLabelsError = basic_error;

export type IssuesListLabelsOnIssueData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type IssuesListLabelsOnIssueResponse = Array<label>;

export type IssuesListLabelsOnIssueError = basic_error;

export type IssuesAddLabelsData = {
  body?:
    | {
        /**
         * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)."
         */
        labels?: Array<string>;
      }
    | Array<string>
    | {
        labels?: Array<{
          name: string;
        }>;
      }
    | Array<{
        name: string;
      }>
    | string;
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesAddLabelsResponse = Array<label>;

export type IssuesAddLabelsError = basic_error | validation_error;

export type IssuesSetLabelsData = {
  body?:
    | {
        /**
         * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)."
         */
        labels?: Array<string>;
      }
    | Array<string>
    | {
        labels?: Array<{
          name: string;
        }>;
      }
    | Array<{
        name: string;
      }>
    | string;
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesSetLabelsResponse = Array<label>;

export type IssuesSetLabelsError = basic_error | validation_error;

export type IssuesRemoveLabelData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesRemoveLabelResponse = Array<label>;

export type IssuesRemoveLabelError = basic_error;

export type IssuesUnlockData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesUnlockResponse = {};

export type IssuesUnlockError = basic_error;

export type IssuesLockData = {
  body?: {
    /**
     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
     * * `off-topic`
     * * `too heated`
     * * `resolved`
     * * `spam`
     */
    lock_reason?: 'off-topic' | 'too heated' | 'resolved' | 'spam';
  } | null;
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesLockResponse = {};

export type IssuesLockError = basic_error | validation_error;

export type ReactionsListForIssueData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
     */
    content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForIssueResponse = Array<reaction>;

export type ReactionsListForIssueError = basic_error;

export type ReactionsCreateForIssueData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
     */
    content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsCreateForIssueResponse = reaction;

export type ReactionsCreateForIssueError = validation_error;

export type ReactionsDeleteForIssueData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the reaction.
     */
    reaction_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsDeleteForIssueResponse = {};

export type ReactionsDeleteForIssueError = string;

export type IssuesListEventsForTimelineData = {
  path: {
    /**
     * The number that identifies the issue.
     */
    issue_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type IssuesListEventsForTimelineResponse = Array<timeline_issue_events>;

export type IssuesListEventsForTimelineError = basic_error;

export type ReposListDeployKeysData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListDeployKeysResponse = Array<deploy_key>;

export type ReposListDeployKeysError = string;

export type ReposCreateDeployKeyData = {
  body: {
    /**
     * The contents of the key.
     */
    key: string;
    /**
     * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
     *
     * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
     */
    read_only?: boolean;
    /**
     * A name for the key.
     */
    title?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateDeployKeyResponse = deploy_key;

export type ReposCreateDeployKeyError = validation_error;

export type ReposDeleteDeployKeyData = {
  path: {
    /**
     * The unique identifier of the key.
     */
    key_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteDeployKeyResponse = {};

export type ReposDeleteDeployKeyError = string;

export type ReposGetDeployKeyData = {
  path: {
    /**
     * The unique identifier of the key.
     */
    key_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetDeployKeyResponse = deploy_key;

export type ReposGetDeployKeyError = basic_error;

export type IssuesListLabelsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type IssuesListLabelsForRepoResponse = Array<label>;

export type IssuesListLabelsForRepoError = basic_error;

export type IssuesCreateLabelData = {
  body: {
    /**
     * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
     */
    color?: string;
    /**
     * A short description of the label. Must be 100 characters or fewer.
     */
    description?: string;
    /**
     * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
     */
    name: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesCreateLabelResponse = label;

export type IssuesCreateLabelError = basic_error | validation_error;

export type IssuesDeleteLabelData = {
  path: {
    name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesDeleteLabelResponse = {};

export type IssuesDeleteLabelError = string;

export type IssuesGetLabelData = {
  path: {
    name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesGetLabelResponse = label;

export type IssuesGetLabelError = basic_error;

export type IssuesUpdateLabelData = {
  body?: {
    /**
     * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
     */
    color?: string;
    /**
     * A short description of the label. Must be 100 characters or fewer.
     */
    description?: string;
    /**
     * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
     */
    new_name?: string;
  };
  path: {
    name: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesUpdateLabelResponse = label;

export type IssuesUpdateLabelError = string;

export type ReposListLanguagesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposListLanguagesResponse = language;

export type ReposListLanguagesError = string;

export type ReposDisableLfsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDisableLfsForRepoResponse = {};

export type ReposDisableLfsForRepoError = string;

export type ReposEnableLfsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposEnableLfsForRepoResponse = {
  [key: string]: string;
};

export type ReposEnableLfsForRepoError = string;

export type LicensesGetForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type LicensesGetForRepoResponse = license_content;

export type LicensesGetForRepoError = string;

export type ReposMergeUpstreamData = {
  body: {
    /**
     * The name of the branch which should be updated to match upstream.
     */
    branch: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposMergeUpstreamResponse = merged_upstream;

export type ReposMergeUpstreamError = string;

export type ReposMergeData = {
  body: {
    /**
     * The name of the base branch that the head will be merged into.
     */
    base: string;
    /**
     * Commit message to use for the merge commit. If omitted, a default message will be used.
     */
    commit_message?: string;
    /**
     * The head to merge. This can be a branch name or a commit SHA1.
     */
    head: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposMergeResponse = commit | {};

export type ReposMergeError = basic_error | string | validation_error;

export type IssuesListMilestonesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The direction of the sort. Either `asc` or `desc`.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * What to sort results by. Either `due_on` or `completeness`.
     */
    sort?: 'due_on' | 'completeness';
    /**
     * The state of the milestone. Either `open`, `closed`, or `all`.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type IssuesListMilestonesResponse = Array<milestone>;

export type IssuesListMilestonesError = basic_error;

export type IssuesCreateMilestoneData = {
  body: {
    /**
     * A description of the milestone.
     */
    description?: string;
    /**
     * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    due_on?: string;
    /**
     * The state of the milestone. Either `open` or `closed`.
     */
    state?: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesCreateMilestoneResponse = milestone;

export type IssuesCreateMilestoneError = basic_error | validation_error;

export type IssuesDeleteMilestoneData = {
  path: {
    /**
     * The number that identifies the milestone.
     */
    milestone_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesDeleteMilestoneResponse = {};

export type IssuesDeleteMilestoneError = basic_error;

export type IssuesGetMilestoneData = {
  path: {
    /**
     * The number that identifies the milestone.
     */
    milestone_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesGetMilestoneResponse = milestone;

export type IssuesGetMilestoneError = basic_error;

export type IssuesUpdateMilestoneData = {
  body?: {
    /**
     * A description of the milestone.
     */
    description?: string;
    /**
     * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    due_on?: string;
    /**
     * The state of the milestone. Either `open` or `closed`.
     */
    state?: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title?: string;
  };
  path: {
    /**
     * The number that identifies the milestone.
     */
    milestone_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type IssuesUpdateMilestoneResponse = milestone;

export type IssuesUpdateMilestoneError = string;

export type IssuesListLabelsForMilestoneData = {
  path: {
    /**
     * The number that identifies the milestone.
     */
    milestone_number: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type IssuesListLabelsForMilestoneResponse = Array<label>;

export type IssuesListLabelsForMilestoneError = string;

export type ActivityListRepoNotificationsForAuthenticatedUserData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * If `true`, show notifications marked as read.
     */
    all?: boolean;
    /**
     * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    before?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * If `true`, only shows notifications in which the user is directly participating or mentioned.
     */
    participating?: boolean;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
  };
};

export type ActivityListRepoNotificationsForAuthenticatedUserResponse = Array<thread>;

export type ActivityListRepoNotificationsForAuthenticatedUserError = string;

export type ActivityMarkRepoNotificationsAsReadData = {
  body?: {
    /**
     * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
     */
    last_read_at?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActivityMarkRepoNotificationsAsReadResponse =
  | {
      message?: string;
      url?: string;
    }
  | string;

export type ActivityMarkRepoNotificationsAsReadError = string;

export type ReposDeletePagesSiteData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeletePagesSiteResponse = {};

export type ReposDeletePagesSiteError = basic_error | validation_error;

export type ReposGetPagesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetPagesResponse = page;

export type ReposGetPagesError = basic_error;

export type ReposCreatePagesSiteData = {
  body:
    | (
        | string
        | {
            /**
             * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
             */
            build_type?: 'legacy' | 'workflow';
            /**
             * The source branch and directory used to publish your Pages site.
             */
            source?: {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
               */
              path?: '/' | '/docs';
            };
          }
      )
    | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreatePagesSiteResponse = page;

export type ReposCreatePagesSiteError = basic_error | validation_error;

export type ReposUpdateInformationAboutPagesSiteData = {
  body:
    | string
    | {
        /**
         * The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.
         */
        build_type?: 'legacy' | 'workflow';
        /**
         * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
         */
        cname?: string | null;
        /**
         * Specify whether HTTPS should be enforced for the repository.
         */
        https_enforced?: boolean;
        source?:
          | 'gh-pages'
          | 'master'
          | 'master /docs'
          | {
              /**
               * The repository branch used to publish your site's source files.
               */
              branch: string;
              /**
               * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
               */
              path: '/' | '/docs';
            };
      };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateInformationAboutPagesSiteResponse = {};

export type ReposUpdateInformationAboutPagesSiteError = basic_error | validation_error;

export type ReposListPagesBuildsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListPagesBuildsResponse = Array<page_build>;

export type ReposListPagesBuildsError = string;

export type ReposRequestPagesBuildData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposRequestPagesBuildResponse = page_build_status;

export type ReposRequestPagesBuildError = string;

export type ReposGetLatestPagesBuildData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetLatestPagesBuildResponse = page_build;

export type ReposGetLatestPagesBuildError = string;

export type ReposGetPagesBuildData = {
  path: {
    build_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetPagesBuildResponse = page_build;

export type ReposGetPagesBuildError = string;

export type ReposCreatePagesDeploymentData = {
  body: {
    /**
     * The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.
     */
    artifact_url: string;
    /**
     * The target environment for this GitHub Pages deployment.
     */
    environment?: string;
    /**
     * The OIDC token issued by GitHub Actions certifying the origin of the deployment.
     */
    oidc_token: string;
    /**
     * A unique string that represents the version of the build for this deployment.
     */
    pages_build_version: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreatePagesDeploymentResponse = page_deployment;

export type ReposCreatePagesDeploymentError = basic_error | validation_error;

export type ReposGetPagesHealthCheckData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetPagesHealthCheckResponse = pages_health_check | empty_object;

export type ReposGetPagesHealthCheckError = string | basic_error;

export type ProjectsListForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Indicates the state of the projects to return.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type ProjectsListForRepoResponse = Array<project>;

export type ProjectsListForRepoError = basic_error | validation_error_simple;

export type ProjectsCreateForRepoData = {
  body: {
    /**
     * The description of the project.
     */
    body?: string;
    /**
     * The name of the project.
     */
    name: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ProjectsCreateForRepoResponse = project;

export type ProjectsCreateForRepoError = basic_error | validation_error_simple;

export type PullsListData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Filter pulls by base branch name. Example: `gh-pages`.
     */
    base?: string;
    /**
     * The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
     */
    direction?: 'asc' | 'desc';
    /**
     * Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
     */
    head?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
     */
    sort?: 'created' | 'updated' | 'popularity' | 'long-running';
    /**
     * Either `open`, `closed`, or `all` to filter by state.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type PullsListResponse = Array<pull_request_simple>;

export type PullsListError = string | validation_error;

export type PullsCreateData = {
  body: {
    /**
     * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
     */
    base: string;
    /**
     * The contents of the pull request.
     */
    body?: string;
    /**
     * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
     */
    draft?: boolean;
    /**
     * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
     */
    head: string;
    /**
     * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
     */
    head_repo?: string;
    /**
     * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
     */
    issue?: number;
    /**
     * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
     */
    maintainer_can_modify?: boolean;
    /**
     * The title of the new pull request. Required unless `issue` is specified.
     */
    title?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsCreateResponse = pull_request;

export type PullsCreateError = basic_error | validation_error;

export type PullsListReviewCommentsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The direction to sort results. Ignored without `sort` parameter.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    sort?: 'created' | 'updated' | 'created_at';
  };
};

export type PullsListReviewCommentsForRepoResponse = Array<pull_request_review_comment>;

export type PullsListReviewCommentsForRepoError = string;

export type PullsDeleteReviewCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsDeleteReviewCommentResponse = {};

export type PullsDeleteReviewCommentError = basic_error;

export type PullsGetReviewCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsGetReviewCommentResponse = pull_request_review_comment;

export type PullsGetReviewCommentError = basic_error;

export type PullsUpdateReviewCommentData = {
  body: {
    /**
     * The text of the reply to the review comment.
     */
    body: string;
  };
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsUpdateReviewCommentResponse = pull_request_review_comment;

export type PullsUpdateReviewCommentError = string;

export type ReactionsListForPullRequestReviewCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
     */
    content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForPullRequestReviewCommentResponse = Array<reaction>;

export type ReactionsListForPullRequestReviewCommentError = basic_error;

export type ReactionsCreateForPullRequestReviewCommentData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
     */
    content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsCreateForPullRequestReviewCommentResponse = reaction;

export type ReactionsCreateForPullRequestReviewCommentError = validation_error;

export type ReactionsDeleteForPullRequestCommentData = {
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the reaction.
     */
    reaction_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsDeleteForPullRequestCommentResponse = {};

export type ReactionsDeleteForPullRequestCommentError = string;

export type PullsGetData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsGetResponse = pull_request;

export type PullsGetError =
  | string
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type PullsUpdateData = {
  body?: {
    /**
     * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
     */
    base?: string;
    /**
     * The contents of the pull request.
     */
    body?: string;
    /**
     * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
     */
    maintainer_can_modify?: boolean;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state?: 'open' | 'closed';
    /**
     * The title of the pull request.
     */
    title?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsUpdateResponse = pull_request;

export type PullsUpdateError = basic_error | validation_error;

export type CodespacesCreateWithPrForAuthenticatedUserData = {
  body: {
    /**
     * IP for location auto-detection when proxying a request
     */
    client_ip?: string;
    /**
     * Path to devcontainer.json config to use for this codespace
     */
    devcontainer_path?: string;
    /**
     * Display name for this codespace
     */
    display_name?: string;
    /**
     * Time in minutes before codespace stops from inactivity
     */
    idle_timeout_minutes?: number;
    /**
     * Location for this codespace. Assigned by IP if not provided
     */
    location?: string;
    /**
     * Machine type to use for this codespace
     */
    machine?: string;
    /**
     * Whether to authorize requested permissions from devcontainer.json
     */
    multi_repo_permissions_opt_out?: boolean;
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     */
    retention_period_minutes?: number;
    /**
     * Working directory for this codespace
     */
    working_directory?: string;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type CodespacesCreateWithPrForAuthenticatedUserResponse = codespace;

export type CodespacesCreateWithPrForAuthenticatedUserError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type PullsListReviewCommentsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The direction to sort results. Ignored without `sort` parameter.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    /**
     * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
     */
    sort?: 'created' | 'updated';
  };
};

export type PullsListReviewCommentsResponse = Array<pull_request_review_comment>;

export type PullsListReviewCommentsError = string;

export type PullsCreateReviewCommentData = {
  body: {
    /**
     * The text of the review comment.
     */
    body: string;
    /**
     * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
     */
    commit_id: string;
    /**
     * The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
     */
    in_reply_to?: number;
    /**
     * The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
     */
    line: number;
    /**
     * The relative path to the file that necessitates a comment.
     */
    path: string;
    /**
     * **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
     * @deprecated
     */
    position?: number;
    /**
     * In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
     */
    side?: 'LEFT' | 'RIGHT';
    /**
     * **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
     */
    start_line?: number;
    /**
     * **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
     */
    start_side?: 'LEFT' | 'RIGHT' | 'side';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsCreateReviewCommentResponse = pull_request_review_comment;

export type PullsCreateReviewCommentError = basic_error | validation_error;

export type PullsCreateReplyForReviewCommentData = {
  body: {
    /**
     * The text of the review comment.
     */
    body: string;
  };
  path: {
    /**
     * The unique identifier of the comment.
     */
    comment_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsCreateReplyForReviewCommentResponse = pull_request_review_comment;

export type PullsCreateReplyForReviewCommentError = basic_error;

export type PullsListCommitsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type PullsListCommitsResponse = Array<commit>;

export type PullsListCommitsError = string;

export type PullsListFilesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type PullsListFilesResponse = Array<diff_entry>;

export type PullsListFilesError =
  | validation_error
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type PullsCheckIfMergedData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsCheckIfMergedResponse = {};

export type PullsCheckIfMergedError = string;

export type PullsMergeData = {
  body?: {
    /**
     * Extra detail to append to automatic commit message.
     */
    commit_message?: string;
    /**
     * Title for the automatic commit message.
     */
    commit_title?: string;
    /**
     * The merge method to use.
     */
    merge_method?: 'merge' | 'squash' | 'rebase';
    /**
     * SHA that pull request head must match to allow merge.
     */
    sha?: string;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsMergeResponse = pull_request_merge_result;

export type PullsMergeError =
  | basic_error
  | {
      documentation_url?: string;
      message?: string;
    }
  | validation_error;

export type PullsRemoveRequestedReviewersData = {
  body: {
    /**
     * An array of user `login`s that will be removed.
     */
    reviewers: Array<string>;
    /**
     * An array of team `slug`s that will be removed.
     */
    team_reviewers?: Array<string>;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsRemoveRequestedReviewersResponse = pull_request_simple;

export type PullsRemoveRequestedReviewersError = validation_error;

export type PullsListRequestedReviewersData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsListRequestedReviewersResponse = pull_request_review_request;

export type PullsListRequestedReviewersError = string;

export type PullsRequestReviewersData = {
  body?:
    | string
    | {
        /**
         * An array of user `login`s that will be requested.
         */
        reviewers?: Array<string>;
        /**
         * An array of team `slug`s that will be requested.
         */
        team_reviewers?: Array<string>;
      };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsRequestReviewersResponse = pull_request_simple;

export type PullsRequestReviewersError = basic_error | string;

export type PullsListReviewsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type PullsListReviewsResponse = Array<pull_request_review>;

export type PullsListReviewsError = string;

export type PullsCreateReviewData = {
  body?: {
    /**
     * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
     */
    body?: string;
    /**
     * Use the following table to specify the location, destination, and contents of the draft review comment.
     */
    comments?: Array<{
      /**
       * Text of the review comment.
       */
      body: string;
      line?: number;
      /**
       * The relative path to the file that necessitates a review comment.
       */
      path: string;
      /**
       * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
       */
      position?: number;
      side?: string;
      start_line?: number;
      start_side?: string;
    }>;
    /**
     * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
     */
    commit_id?: string;
    /**
     * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
     */
    event?: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsCreateReviewResponse = pull_request_review;

export type PullsCreateReviewError = basic_error | validation_error_simple;

export type PullsDeletePendingReviewData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the review.
     */
    review_id: number;
  };
};

export type PullsDeletePendingReviewResponse = pull_request_review;

export type PullsDeletePendingReviewError = basic_error | validation_error_simple;

export type PullsGetReviewData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the review.
     */
    review_id: number;
  };
};

export type PullsGetReviewResponse = pull_request_review;

export type PullsGetReviewError = basic_error;

export type PullsUpdateReviewData = {
  body: {
    /**
     * The body text of the pull request review.
     */
    body: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the review.
     */
    review_id: number;
  };
};

export type PullsUpdateReviewResponse = pull_request_review;

export type PullsUpdateReviewError = validation_error_simple;

export type PullsListCommentsForReviewData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the review.
     */
    review_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type PullsListCommentsForReviewResponse = Array<review_comment>;

export type PullsListCommentsForReviewError = basic_error;

export type PullsDismissReviewData = {
  body: {
    event?: 'DISMISS';
    /**
     * The message for the pull request review dismissal
     */
    message: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the review.
     */
    review_id: number;
  };
};

export type PullsDismissReviewResponse = pull_request_review;

export type PullsDismissReviewError = basic_error | validation_error_simple;

export type PullsSubmitReviewData = {
  body: {
    /**
     * The body text of the pull request review
     */
    body?: string;
    /**
     * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
     */
    event: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the review.
     */
    review_id: number;
  };
};

export type PullsSubmitReviewResponse = pull_request_review;

export type PullsSubmitReviewError = basic_error | validation_error_simple;

export type PullsUpdateBranchData = {
  body?: {
    /**
     * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
     */
    expected_head_sha?: string;
  } | null;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The number that identifies the pull request.
     */
    pull_number: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type PullsUpdateBranchResponse = {
  message?: string;
  url?: string;
};

export type PullsUpdateBranchError = basic_error | validation_error;

export type ReposGetReadmeData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
     */
    ref?: string;
  };
};

export type ReposGetReadmeResponse = content_file;

export type ReposGetReadmeError = basic_error | validation_error;

export type ReposGetReadmeInDirectoryData = {
  path: {
    /**
     * The alternate path to look for a README file
     */
    dir: string;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
     */
    ref?: string;
  };
};

export type ReposGetReadmeInDirectoryResponse = content_file;

export type ReposGetReadmeInDirectoryError = basic_error | validation_error;

export type ReposListReleasesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListReleasesResponse = Array<release>;

export type ReposListReleasesError = basic_error;

export type ReposCreateReleaseData = {
  body: {
    /**
     * Text describing the contents of the tag.
     */
    body?: string;
    /**
     * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
     */
    discussion_category_name?: string;
    /**
     * `true` to create a draft (unpublished) release, `false` to create a published one.
     */
    draft?: boolean;
    /**
     * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
     */
    generate_release_notes?: boolean;
    /**
     * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
     */
    make_latest?: 'true' | 'false' | 'legacy';
    /**
     * The name of the release.
     */
    name?: string;
    /**
     * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
     */
    prerelease?: boolean;
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
     */
    target_commitish?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateReleaseResponse = release;

export type ReposCreateReleaseError = basic_error | validation_error;

export type ReposDeleteReleaseAssetData = {
  path: {
    /**
     * The unique identifier of the asset.
     */
    asset_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteReleaseAssetResponse = {};

export type ReposDeleteReleaseAssetError = string;

export type ReposGetReleaseAssetData = {
  path: {
    /**
     * The unique identifier of the asset.
     */
    asset_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetReleaseAssetResponse = release_asset;

export type ReposGetReleaseAssetError = string | basic_error;

export type ReposUpdateReleaseAssetData = {
  body?: {
    /**
     * An alternate short description of the asset. Used in place of the filename.
     */
    label?: string;
    /**
     * The file name of the asset.
     */
    name?: string;
    state?: string;
  };
  path: {
    /**
     * The unique identifier of the asset.
     */
    asset_id: number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateReleaseAssetResponse = release_asset;

export type ReposUpdateReleaseAssetError = string;

export type ReposGenerateReleaseNotesData = {
  body: {
    /**
     * Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
     */
    configuration_file_path?: string;
    /**
     * The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
     */
    previous_tag_name?: string;
    /**
     * The tag name for the release. This can be an existing tag or a new one.
     */
    tag_name: string;
    /**
     * Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
     */
    target_commitish?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGenerateReleaseNotesResponse = release_notes_content;

export type ReposGenerateReleaseNotesError = basic_error;

export type ReposGetLatestReleaseData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetLatestReleaseResponse = release;

export type ReposGetLatestReleaseError = string;

export type ReposGetReleaseByTagData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * tag parameter
     */
    tag: string;
  };
};

export type ReposGetReleaseByTagResponse = release;

export type ReposGetReleaseByTagError = basic_error;

export type ReposDeleteReleaseData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the release.
     */
    release_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDeleteReleaseResponse = {};

export type ReposDeleteReleaseError = string;

export type ReposGetReleaseData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the release.
     */
    release_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetReleaseResponse = release;

export type ReposGetReleaseError = basic_error;

export type ReposUpdateReleaseData = {
  body?: {
    /**
     * Text describing the contents of the tag.
     */
    body?: string;
    /**
     * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
     */
    discussion_category_name?: string;
    /**
     * `true` makes the release a draft, and `false` publishes the release.
     */
    draft?: boolean;
    /**
     * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
     */
    make_latest?: 'true' | 'false' | 'legacy';
    /**
     * The name of the release.
     */
    name?: string;
    /**
     * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
     */
    prerelease?: boolean;
    /**
     * The name of the tag.
     */
    tag_name?: string;
    /**
     * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
     */
    target_commitish?: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the release.
     */
    release_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposUpdateReleaseResponse = release;

export type ReposUpdateReleaseError = basic_error;

export type ReposListReleaseAssetsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the release.
     */
    release_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListReleaseAssetsResponse = Array<release_asset>;

export type ReposListReleaseAssetsError = string;

export type ReposUploadReleaseAssetData = {
  body?: Blob | File;
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the release.
     */
    release_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query: {
    label?: string;
    name: string;
  };
};

export type ReposUploadReleaseAssetResponse = release_asset;

export type ReposUploadReleaseAssetError = string;

export type ReactionsListForReleaseData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the release.
     */
    release_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.
     */
    content?: '+1' | 'laugh' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForReleaseResponse = Array<reaction>;

export type ReactionsListForReleaseError = basic_error;

export type ReactionsCreateForReleaseData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
     */
    content: '+1' | 'laugh' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the release.
     */
    release_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsCreateForReleaseResponse = reaction;

export type ReactionsCreateForReleaseError = validation_error;

export type ReactionsDeleteForReleaseData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The unique identifier of the reaction.
     */
    reaction_id: number;
    /**
     * The unique identifier of the release.
     */
    release_id: number;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReactionsDeleteForReleaseResponse = {};

export type ReactionsDeleteForReleaseError = string;

export type SecretScanningListAlertsForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
     */
    after?: string;
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
     */
    before?: string;
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     */
    resolution?: string;
    /**
     * A comma-separated list of secret types to return. By default all secret types are returned.
     * See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     * for a complete list of secret types.
     */
    secret_type?: string;
    /**
     * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
     */
    sort?: 'created' | 'updated';
    /**
     * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     */
    state?: 'open' | 'resolved';
  };
};

export type SecretScanningListAlertsForRepoResponse = Array<secret_scanning_alert>;

export type SecretScanningListAlertsForRepoError =
  | string
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type SecretScanningGetAlertData = {
  path: {
    /**
     * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     */
    alert_number: alert_number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type SecretScanningGetAlertResponse = secret_scanning_alert;

export type SecretScanningGetAlertError =
  | string
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type SecretScanningUpdateAlertData = {
  body: {
    resolution?: secret_scanning_alert_resolution;
    resolution_comment?: secret_scanning_alert_resolution_comment;
    state: secret_scanning_alert_state;
  };
  path: {
    /**
     * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     */
    alert_number: alert_number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type SecretScanningUpdateAlertResponse = secret_scanning_alert;

export type SecretScanningUpdateAlertError =
  | string
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type SecretScanningListLocationsForAlertData = {
  path: {
    /**
     * The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     */
    alert_number: alert_number;
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type SecretScanningListLocationsForAlertResponse = Array<secret_scanning_location>;

export type SecretScanningListLocationsForAlertError =
  | string
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type ActivityListStargazersForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListStargazersForRepoResponse = Array<simple_user> | Array<stargazer>;

export type ActivityListStargazersForRepoError = validation_error;

export type ReposGetCodeFrequencyStatsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetCodeFrequencyStatsResponse =
  | Array<code_frequency_stat>
  | {
      [key: string]: string;
    }
  | {};

export type ReposGetCodeFrequencyStatsError = string;

export type ReposGetCommitActivityStatsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetCommitActivityStatsResponse =
  | Array<commit_activity>
  | {
      [key: string]: string;
    }
  | {};

export type ReposGetCommitActivityStatsError = string;

export type ReposGetContributorsStatsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetContributorsStatsResponse =
  | Array<contributor_activity>
  | {
      [key: string]: string;
    }
  | {};

export type ReposGetContributorsStatsError = string;

export type ReposGetParticipationStatsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetParticipationStatsResponse = participation_stats;

export type ReposGetParticipationStatsError = basic_error;

export type ReposGetPunchCardStatsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetPunchCardStatsResponse = Array<code_frequency_stat> | {};

export type ReposGetPunchCardStatsError = string;

export type ReposCreateCommitStatusData = {
  body: {
    /**
     * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
     */
    context?: string;
    /**
     * A short description of the status.
     */
    description?: string | null;
    /**
     * The state of the status.
     */
    state: 'error' | 'failure' | 'pending' | 'success';
    /**
     * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
     * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
     * `http://ci.example.com/user/repo/build/sha`
     */
    target_url?: string | null;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    sha: string;
  };
};

export type ReposCreateCommitStatusResponse = status;

export type ReposCreateCommitStatusError = string;

export type ActivityListWatchersForRepoData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListWatchersForRepoResponse = Array<simple_user>;

export type ActivityListWatchersForRepoError = string;

export type ActivityDeleteRepoSubscriptionData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActivityDeleteRepoSubscriptionResponse = {};

export type ActivityDeleteRepoSubscriptionError = string;

export type ActivityGetRepoSubscriptionData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActivityGetRepoSubscriptionResponse = repository_subscription;

export type ActivityGetRepoSubscriptionError = basic_error | string;

export type ActivitySetRepoSubscriptionData = {
  body?: {
    /**
     * Determines if all notifications should be blocked from this repository.
     */
    ignored?: boolean;
    /**
     * Determines if notifications should be received from this repository.
     */
    subscribed?: boolean;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActivitySetRepoSubscriptionResponse = repository_subscription;

export type ActivitySetRepoSubscriptionError = string;

export type ReposListTagsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListTagsResponse = Array<tag>;

export type ReposListTagsError = string;

export type ReposListTagProtectionData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposListTagProtectionResponse = Array<tag_protection>;

export type ReposListTagProtectionError = basic_error;

export type ReposCreateTagProtectionData = {
  body: {
    /**
     * An optional glob pattern to match against when enforcing tag protection.
     */
    pattern: string;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateTagProtectionResponse = tag_protection;

export type ReposCreateTagProtectionError = basic_error;

export type ReposDeleteTagProtectionData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the tag protection.
     */
    tag_protection_id: number;
  };
};

export type ReposDeleteTagProtectionResponse = {};

export type ReposDeleteTagProtectionError = basic_error;

export type ReposDownloadTarballArchiveData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposListTeamsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListTeamsResponse = Array<team>;

export type ReposListTeamsError = string;

export type ReposGetAllTopicsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposGetAllTopicsResponse = topic;

export type ReposGetAllTopicsError = basic_error;

export type ReposReplaceAllTopicsData = {
  body: {
    /**
     * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
     */
    names: Array<string>;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposReplaceAllTopicsResponse = topic;

export type ReposReplaceAllTopicsError = basic_error | validation_error_simple;

export type ReposGetClonesData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The time frame to display results for.
     */
    per?: 'day' | 'week';
  };
};

export type ReposGetClonesResponse = clone_traffic;

export type ReposGetClonesError = basic_error;

export type ReposGetTopPathsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetTopPathsResponse = Array<content_traffic>;

export type ReposGetTopPathsError = basic_error;

export type ReposGetTopReferrersData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposGetTopReferrersResponse = Array<referrer_traffic>;

export type ReposGetTopReferrersError = basic_error;

export type ReposGetViewsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
  query?: {
    /**
     * The time frame to display results for.
     */
    per?: 'day' | 'week';
  };
};

export type ReposGetViewsResponse = view_traffic;

export type ReposGetViewsError = basic_error;

export type ReposTransferData = {
  body: {
    /**
     * The new name to be given to the repository.
     */
    new_name?: string;
    /**
     * The username or organization name the repository will be transferred to.
     */
    new_owner: string;
    /**
     * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
     */
    team_ids?: Array<number>;
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposTransferResponse = minimal_repository;

export type ReposTransferError = string;

export type ReposDisableVulnerabilityAlertsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposDisableVulnerabilityAlertsResponse = {};

export type ReposDisableVulnerabilityAlertsError = string;

export type ReposCheckVulnerabilityAlertsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCheckVulnerabilityAlertsResponse = {};

export type ReposCheckVulnerabilityAlertsError = string;

export type ReposEnableVulnerabilityAlertsData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposEnableVulnerabilityAlertsResponse = {};

export type ReposEnableVulnerabilityAlertsError = string;

export type ReposDownloadZipballArchiveData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    ref: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ReposCreateUsingTemplateData = {
  body: {
    /**
     * A short description of the new repository.
     */
    description?: string;
    /**
     * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
     */
    include_all_branches?: boolean;
    /**
     * The name of the new repository.
     */
    name: string;
    /**
     * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
     */
    owner?: string;
    /**
     * Either `true` to create a new private repository or `false` to create a new public one.
     */
    private?: boolean;
  };
  path: {
    template_owner: string;
    template_repo: string;
  };
};

export type ReposCreateUsingTemplateResponse = repository;

export type ReposCreateUsingTemplateError = string;

export type ReposListPublicData = {
  query?: {
    /**
     * A repository ID. Only return repositories with an ID greater than this ID.
     */
    since?: number;
  };
};

export type ReposListPublicResponse = Array<minimal_repository>;

export type ReposListPublicError = string | validation_error;

export type ActionsListEnvironmentSecretsData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActionsListEnvironmentSecretsResponse = {
  secrets: Array<actions_secret>;
  total_count: number;
};

export type ActionsListEnvironmentSecretsError = string;

export type ActionsGetEnvironmentPublicKeyData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type ActionsGetEnvironmentPublicKeyResponse = actions_public_key;

export type ActionsGetEnvironmentPublicKeyError = string;

export type ActionsDeleteEnvironmentSecretData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsDeleteEnvironmentSecretResponse = {};

export type ActionsDeleteEnvironmentSecretError = string;

export type ActionsGetEnvironmentSecretData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsGetEnvironmentSecretResponse = actions_secret;

export type ActionsGetEnvironmentSecretError = string;

export type ActionsCreateOrUpdateEnvironmentSecretData = {
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
     */
    encrypted_value: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id: string;
  };
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type ActionsCreateOrUpdateEnvironmentSecretResponse = empty_object | {};

export type ActionsCreateOrUpdateEnvironmentSecretError = string;

export type ActionsListEnvironmentVariablesData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 30).
     */
    per_page?: number;
  };
};

export type ActionsListEnvironmentVariablesResponse = {
  total_count: number;
  variables: Array<actions_variable>;
};

export type ActionsListEnvironmentVariablesError = string;

export type ActionsCreateEnvironmentVariableData = {
  body: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The value of the variable.
     */
    value: string;
  };
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type ActionsCreateEnvironmentVariableResponse = empty_object;

export type ActionsCreateEnvironmentVariableError = string;

export type ActionsDeleteEnvironmentVariableData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type ActionsDeleteEnvironmentVariableResponse = {};

export type ActionsDeleteEnvironmentVariableError = string;

export type ActionsGetEnvironmentVariableData = {
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type ActionsGetEnvironmentVariableResponse = actions_variable;

export type ActionsGetEnvironmentVariableError = string;

export type ActionsUpdateEnvironmentVariableData = {
  body: {
    /**
     * The name of the variable.
     */
    name?: string;
    /**
     * The value of the variable.
     */
    value?: string;
  };
  path: {
    /**
     * The name of the environment.
     */
    environment_name: string;
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type ActionsUpdateEnvironmentVariableResponse = {};

export type ActionsUpdateEnvironmentVariableError = string;

export type SearchCodeData = {
  query: {
    /**
     * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
     */
    order?: 'desc' | 'asc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.
     */
    q: string;
    /**
     * Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
     */
    sort?: 'indexed';
  };
};

export type SearchCodeResponse = {
  incomplete_results: boolean;
  items: Array<code_search_result_item>;
  total_count: number;
};

export type SearchCodeError =
  | string
  | basic_error
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type SearchCommitsData = {
  query: {
    /**
     * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
     */
    order?: 'desc' | 'asc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.
     */
    q: string;
    /**
     * Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
     */
    sort?: 'author-date' | 'committer-date';
  };
};

export type SearchCommitsResponse = {
  incomplete_results: boolean;
  items: Array<commit_search_result_item>;
  total_count: number;
};

export type SearchCommitsError = string;

export type SearchIssuesAndPullRequestsData = {
  query: {
    /**
     * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
     */
    order?: 'desc' | 'asc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.
     */
    q: string;
    /**
     * Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
     */
    sort?:
      | 'comments'
      | 'reactions'
      | 'reactions-+1'
      | 'reactions--1'
      | 'reactions-smile'
      | 'reactions-thinking_face'
      | 'reactions-heart'
      | 'reactions-tada'
      | 'interactions'
      | 'created'
      | 'updated';
  };
};

export type SearchIssuesAndPullRequestsResponse = {
  incomplete_results: boolean;
  items: Array<issue_search_result_item>;
  total_count: number;
};

export type SearchIssuesAndPullRequestsError =
  | string
  | basic_error
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type SearchLabelsData = {
  query: {
    /**
     * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
     */
    order?: 'desc' | 'asc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     */
    q: string;
    /**
     * The id of the repository.
     */
    repository_id: number;
    /**
     * Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
     */
    sort?: 'created' | 'updated';
  };
};

export type SearchLabelsResponse = {
  incomplete_results: boolean;
  items: Array<label_search_result_item>;
  total_count: number;
};

export type SearchLabelsError = string | basic_error | validation_error;

export type SearchReposData = {
  query: {
    /**
     * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
     */
    order?: 'desc' | 'asc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.
     */
    q: string;
    /**
     * Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
     */
    sort?: 'stars' | 'forks' | 'help-wanted-issues' | 'updated';
  };
};

export type SearchReposResponse = {
  incomplete_results: boolean;
  items: Array<repo_search_result_item>;
  total_count: number;
};

export type SearchReposError =
  | string
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type SearchTopicsData = {
  query: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).
     */
    q: string;
  };
};

export type SearchTopicsResponse = {
  incomplete_results: boolean;
  items: Array<topic_search_result_item>;
  total_count: number;
};

export type SearchTopicsError = string;

export type SearchUsersData = {
  query: {
    /**
     * Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.
     */
    order?: 'desc' | 'asc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.
     */
    q: string;
    /**
     * Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)
     */
    sort?: 'followers' | 'repositories' | 'joined';
  };
};

export type SearchUsersResponse = {
  incomplete_results: boolean;
  items: Array<user_search_result_item>;
  total_count: number;
};

export type SearchUsersError =
  | string
  | validation_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type TeamsDeleteLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsDeleteLegacyResponse = {};

export type TeamsDeleteLegacyError = basic_error | validation_error;

export type TeamsGetLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsGetLegacyResponse = team_full;

export type TeamsGetLegacyError = basic_error;

export type TeamsUpdateLegacyData = {
  body: {
    /**
     * The description of the team.
     */
    description?: string;
    /**
     * The name of the team.
     */
    name: string;
    /**
     * The ID of a team to set as the parent team.
     */
    parent_team_id?: number | null;
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     */
    permission?: 'pull' | 'push' | 'admin';
    /**
     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
     * **For a non-nested team:**
     * * `secret` - only visible to organization owners and members of this team.
     * * `closed` - visible to all members of this organization.
     * **For a parent or child team:**
     * * `closed` - visible to all members of this organization.
     */
    privacy?: 'secret' | 'closed';
  };
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsUpdateLegacyResponse = team_full;

export type TeamsUpdateLegacyError = basic_error | validation_error;

export type TeamsListDiscussionsLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListDiscussionsLegacyResponse = Array<team_discussion>;

export type TeamsListDiscussionsLegacyError = string;

export type TeamsCreateDiscussionLegacyData = {
  body: {
    /**
     * The discussion post's body text.
     */
    body: string;
    /**
     * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
     */
    private?: boolean;
    /**
     * The discussion post's title.
     */
    title: string;
  };
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsCreateDiscussionLegacyResponse = team_discussion;

export type TeamsCreateDiscussionLegacyError = string;

export type TeamsDeleteDiscussionLegacyData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsDeleteDiscussionLegacyResponse = {};

export type TeamsDeleteDiscussionLegacyError = string;

export type TeamsGetDiscussionLegacyData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsGetDiscussionLegacyResponse = team_discussion;

export type TeamsGetDiscussionLegacyError = string;

export type TeamsUpdateDiscussionLegacyData = {
  body?: {
    /**
     * The discussion post's body text.
     */
    body?: string;
    /**
     * The discussion post's title.
     */
    title?: string;
  };
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsUpdateDiscussionLegacyResponse = team_discussion;

export type TeamsUpdateDiscussionLegacyError = string;

export type TeamsListDiscussionCommentsLegacyData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListDiscussionCommentsLegacyResponse = Array<team_discussion_comment>;

export type TeamsListDiscussionCommentsLegacyError = string;

export type TeamsCreateDiscussionCommentLegacyData = {
  body: {
    /**
     * The discussion comment's body text.
     */
    body: string;
  };
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsCreateDiscussionCommentLegacyResponse = team_discussion_comment;

export type TeamsCreateDiscussionCommentLegacyError = string;

export type TeamsDeleteDiscussionCommentLegacyData = {
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsDeleteDiscussionCommentLegacyResponse = {};

export type TeamsDeleteDiscussionCommentLegacyError = string;

export type TeamsGetDiscussionCommentLegacyData = {
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsGetDiscussionCommentLegacyResponse = team_discussion_comment;

export type TeamsGetDiscussionCommentLegacyError = string;

export type TeamsUpdateDiscussionCommentLegacyData = {
  body: {
    /**
     * The discussion comment's body text.
     */
    body: string;
  };
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsUpdateDiscussionCommentLegacyResponse = team_discussion_comment;

export type TeamsUpdateDiscussionCommentLegacyError = string;

export type ReactionsListForTeamDiscussionCommentLegacyData = {
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
     */
    content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForTeamDiscussionCommentLegacyResponse = Array<reaction>;

export type ReactionsListForTeamDiscussionCommentLegacyError = string;

export type ReactionsCreateForTeamDiscussionCommentLegacyData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
     */
    content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The number that identifies the comment.
     */
    comment_number: number;
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type ReactionsCreateForTeamDiscussionCommentLegacyResponse = reaction;

export type ReactionsCreateForTeamDiscussionCommentLegacyError = string;

export type ReactionsListForTeamDiscussionLegacyData = {
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
     */
    content?: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReactionsListForTeamDiscussionLegacyResponse = Array<reaction>;

export type ReactionsListForTeamDiscussionLegacyError = string;

export type ReactionsCreateForTeamDiscussionLegacyData = {
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
     */
    content: '+1' | '-1' | 'laugh' | 'confused' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  };
  path: {
    /**
     * The number that identifies the discussion.
     */
    discussion_number: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type ReactionsCreateForTeamDiscussionLegacyResponse = reaction;

export type ReactionsCreateForTeamDiscussionLegacyError = string;

export type TeamsListPendingInvitationsLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListPendingInvitationsLegacyResponse = Array<organization_invitation>;

export type TeamsListPendingInvitationsLegacyError = string;

export type TeamsListMembersLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Filters members returned by their role in the team.
     */
    role?: 'member' | 'maintainer' | 'all';
  };
};

export type TeamsListMembersLegacyResponse = Array<simple_user>;

export type TeamsListMembersLegacyError = basic_error;

export type TeamsRemoveMemberLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsRemoveMemberLegacyResponse = {};

export type TeamsRemoveMemberLegacyError = string;

export type TeamsGetMemberLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsGetMemberLegacyResponse = {};

export type TeamsGetMemberLegacyError = string;

export type TeamsAddMemberLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsAddMemberLegacyResponse = {};

export type TeamsAddMemberLegacyError = basic_error | string;

export type TeamsRemoveMembershipForUserLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsRemoveMembershipForUserLegacyResponse = {};

export type TeamsRemoveMembershipForUserLegacyError = string;

export type TeamsGetMembershipForUserLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsGetMembershipForUserLegacyResponse = team_membership;

export type TeamsGetMembershipForUserLegacyError = basic_error;

export type TeamsAddOrUpdateMembershipForUserLegacyData = {
  body?: {
    /**
     * The role that this user should have in the team.
     */
    role?: 'member' | 'maintainer';
  };
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type TeamsAddOrUpdateMembershipForUserLegacyResponse = team_membership;

export type TeamsAddOrUpdateMembershipForUserLegacyError = string | basic_error;

export type TeamsListProjectsLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListProjectsLegacyResponse = Array<team_project>;

export type TeamsListProjectsLegacyError = basic_error;

export type TeamsRemoveProjectLegacyData = {
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsRemoveProjectLegacyResponse = {};

export type TeamsRemoveProjectLegacyError = basic_error | validation_error;

export type TeamsCheckPermissionsForProjectLegacyData = {
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsCheckPermissionsForProjectLegacyResponse = team_project;

export type TeamsCheckPermissionsForProjectLegacyError = string;

export type TeamsAddOrUpdateProjectPermissionsLegacyData = {
  body?: {
    /**
     * The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    permission?: 'read' | 'write' | 'admin';
  };
  path: {
    /**
     * The unique identifier of the project.
     */
    project_id: number;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsAddOrUpdateProjectPermissionsLegacyResponse = {};

export type TeamsAddOrUpdateProjectPermissionsLegacyError =
  | {
      documentation_url?: string;
      message?: string;
    }
  | basic_error
  | validation_error;

export type TeamsListReposLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListReposLegacyResponse = Array<minimal_repository>;

export type TeamsListReposLegacyError = basic_error;

export type TeamsRemoveRepoLegacyData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsRemoveRepoLegacyResponse = {};

export type TeamsRemoveRepoLegacyError = string;

export type TeamsCheckPermissionsForRepoLegacyData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsCheckPermissionsForRepoLegacyResponse = team_repository | {};

export type TeamsCheckPermissionsForRepoLegacyError = string;

export type TeamsAddOrUpdateRepoPermissionsLegacyData = {
  body?: {
    /**
     * The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
     */
    permission?: 'pull' | 'push' | 'admin';
  };
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
};

export type TeamsAddOrUpdateRepoPermissionsLegacyResponse = {};

export type TeamsAddOrUpdateRepoPermissionsLegacyError = basic_error | validation_error;

export type TeamsListChildLegacyData = {
  path: {
    /**
     * The unique identifier of the team.
     */
    team_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListChildLegacyResponse = Array<team>;

export type TeamsListChildLegacyError = basic_error | validation_error;

export type UsersGetAuthenticatedResponse = private_user | public_user;

export type UsersGetAuthenticatedError = string | basic_error;

export type UsersUpdateAuthenticatedData = {
  body?: {
    /**
     * The new short biography of the user.
     */
    bio?: string;
    /**
     * The new blog URL of the user.
     */
    blog?: string;
    /**
     * The new company of the user.
     */
    company?: string;
    /**
     * The publicly visible email address of the user.
     */
    email?: string;
    /**
     * The new hiring availability of the user.
     */
    hireable?: boolean;
    /**
     * The new location of the user.
     */
    location?: string;
    /**
     * The new name of the user.
     */
    name?: string;
    /**
     * The new Twitter username of the user.
     */
    twitter_username?: string | null;
  };
};

export type UsersUpdateAuthenticatedResponse = private_user;

export type UsersUpdateAuthenticatedError = string | basic_error | validation_error;

export type UsersListBlockedByAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListBlockedByAuthenticatedUserResponse = Array<simple_user>;

export type UsersListBlockedByAuthenticatedUserError = string | basic_error;

export type UsersUnblockData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type UsersUnblockResponse = {};

export type UsersUnblockError = string | basic_error;

export type UsersCheckBlockedData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type UsersCheckBlockedResponse = {};

export type UsersCheckBlockedError = string | basic_error;

export type UsersBlockData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type UsersBlockResponse = {};

export type UsersBlockError = string | basic_error | validation_error;

export type CodespacesListForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * ID of the Repository to filter on
     */
    repository_id?: number;
  };
};

export type CodespacesListForAuthenticatedUserResponse = {
  codespaces: Array<codespace>;
  total_count: number;
};

export type CodespacesListForAuthenticatedUserError = string | basic_error;

export type CodespacesCreateForAuthenticatedUserData = {
  body:
    | {
        /**
         * IP for location auto-detection when proxying a request
         */
        client_ip?: string;
        /**
         * Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;
        /**
         * Display name for this codespace
         */
        display_name?: string;
        /**
         * Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;
        /**
         * Location for this codespace. Assigned by IP if not provided
         */
        location?: string;
        /**
         * Machine type to use for this codespace
         */
        machine?: string;
        /**
         * Whether to authorize requested permissions from devcontainer.json
         */
        multi_repo_permissions_opt_out?: boolean;
        /**
         * Git ref (typically a branch name) for this codespace
         */
        ref?: string;
        /**
         * Repository id for this codespace
         */
        repository_id: number;
        /**
         * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
         */
        retention_period_minutes?: number;
        /**
         * Working directory for this codespace
         */
        working_directory?: string;
      }
    | {
        /**
         * Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;
        /**
         * Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;
        /**
         * Location for this codespace. Assigned by IP if not provided
         */
        location?: string;
        /**
         * Machine type to use for this codespace
         */
        machine?: string;
        /**
         * Pull request number for this codespace
         */
        pull_request: {
          /**
           * Pull request number
           */
          pull_request_number: number;
          /**
           * Repository id for this codespace
           */
          repository_id: number;
        };
        /**
         * Working directory for this codespace
         */
        working_directory?: string;
      };
};

export type CodespacesCreateForAuthenticatedUserResponse = codespace;

export type CodespacesCreateForAuthenticatedUserError =
  | basic_error
  | {
      code?: string;
      documentation_url?: string;
      message?: string;
    };

export type CodespacesListSecretsForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type CodespacesListSecretsForAuthenticatedUserResponse = {
  secrets: Array<codespaces_secret>;
  total_count: number;
};

export type CodespacesListSecretsForAuthenticatedUserError = string;

export type CodespacesGetPublicKeyForAuthenticatedUserResponse = codespaces_user_public_key;

export type CodespacesGetPublicKeyForAuthenticatedUserError = string;

export type CodespacesDeleteSecretForAuthenticatedUserData = {
  path: {
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesDeleteSecretForAuthenticatedUserResponse = {};

export type CodespacesDeleteSecretForAuthenticatedUserError = string;

export type CodespacesGetSecretForAuthenticatedUserData = {
  path: {
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesGetSecretForAuthenticatedUserResponse = codespaces_secret;

export type CodespacesGetSecretForAuthenticatedUserError = string;

export type CodespacesCreateOrUpdateSecretForAuthenticatedUserData = {
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id: string;
    /**
     * An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
     */
    selected_repository_ids?: Array<number | string>;
  };
  path: {
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesCreateOrUpdateSecretForAuthenticatedUserResponse = empty_object | {};

export type CodespacesCreateOrUpdateSecretForAuthenticatedUserError = basic_error | validation_error;

export type CodespacesListRepositoriesForSecretForAuthenticatedUserData = {
  path: {
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesListRepositoriesForSecretForAuthenticatedUserResponse = {
  repositories: Array<minimal_repository>;
  total_count: number;
};

export type CodespacesListRepositoriesForSecretForAuthenticatedUserError = basic_error;

export type CodespacesSetRepositoriesForSecretForAuthenticatedUserData = {
  body: {
    /**
     * An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
     */
    selected_repository_ids: Array<number>;
  };
  path: {
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesSetRepositoriesForSecretForAuthenticatedUserResponse = {};

export type CodespacesSetRepositoriesForSecretForAuthenticatedUserError = basic_error;

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUserData = {
  path: {
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUserResponse = {};

export type CodespacesRemoveRepositoryForSecretForAuthenticatedUserError = basic_error;

export type CodespacesAddRepositoryForSecretForAuthenticatedUserData = {
  path: {
    repository_id: number;
    /**
     * The name of the secret.
     */
    secret_name: string;
  };
};

export type CodespacesAddRepositoryForSecretForAuthenticatedUserResponse = {};

export type CodespacesAddRepositoryForSecretForAuthenticatedUserError = basic_error;

export type CodespacesDeleteForAuthenticatedUserData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
  };
};

export type CodespacesDeleteForAuthenticatedUserResponse = {
  [key: string]: string;
};

export type CodespacesDeleteForAuthenticatedUserError = string | basic_error;

export type CodespacesGetForAuthenticatedUserData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
  };
};

export type CodespacesGetForAuthenticatedUserResponse = codespace;

export type CodespacesGetForAuthenticatedUserError = string | basic_error;

export type CodespacesUpdateForAuthenticatedUserData = {
  body?: {
    /**
     * Display name for this codespace
     */
    display_name?: string;
    /**
     * A valid machine to transition this codespace to.
     */
    machine?: string;
    /**
     * Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
     */
    recent_folders?: Array<string>;
  };
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
  };
};

export type CodespacesUpdateForAuthenticatedUserResponse = codespace;

export type CodespacesUpdateForAuthenticatedUserError = basic_error;

export type CodespacesExportForAuthenticatedUserData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
  };
};

export type CodespacesExportForAuthenticatedUserResponse = codespace_export_details;

export type CodespacesExportForAuthenticatedUserError = basic_error | validation_error;

export type CodespacesGetExportDetailsForAuthenticatedUserData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
    /**
     * The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
     */
    export_id: string;
  };
};

export type CodespacesGetExportDetailsForAuthenticatedUserResponse = codespace_export_details;

export type CodespacesGetExportDetailsForAuthenticatedUserError = basic_error;

export type CodespacesCodespaceMachinesForAuthenticatedUserData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
  };
};

export type CodespacesCodespaceMachinesForAuthenticatedUserResponse = {
  machines: Array<codespace_machine>;
  total_count: number;
};

export type CodespacesCodespaceMachinesForAuthenticatedUserError = string | basic_error;

export type CodespacesPublishForAuthenticatedUserData = {
  body: {
    /**
     * A name for the new repository.
     */
    name?: string;
    /**
     * Whether the new repository should be private.
     */
    private?: boolean;
  };
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
  };
};

export type CodespacesPublishForAuthenticatedUserResponse = codespace_with_full_repository;

export type CodespacesPublishForAuthenticatedUserError = basic_error | validation_error;

export type CodespacesStartForAuthenticatedUserData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
  };
};

export type CodespacesStartForAuthenticatedUserResponse = codespace;

export type CodespacesStartForAuthenticatedUserError = string | basic_error;

export type CodespacesStopForAuthenticatedUserData = {
  path: {
    /**
     * The name of the codespace.
     */
    codespace_name: string;
  };
};

export type CodespacesStopForAuthenticatedUserResponse = codespace;

export type CodespacesStopForAuthenticatedUserError = basic_error;

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserData = {
  body: {
    /**
     * Denotes whether an email is publicly visible.
     */
    visibility: 'public' | 'private';
  };
};

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserResponse = Array<email>;

export type UsersSetPrimaryEmailVisibilityForAuthenticatedUserError = string | basic_error | validation_error;

export type UsersDeleteEmailForAuthenticatedUserData = {
  body?:
    | {
        /**
         * Email addresses associated with the GitHub user account.
         */
        emails: Array<string>;
      }
    | Array<string>
    | string;
};

export type UsersDeleteEmailForAuthenticatedUserResponse = {};

export type UsersDeleteEmailForAuthenticatedUserError = string | basic_error | validation_error;

export type UsersListEmailsForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListEmailsForAuthenticatedUserResponse = Array<email>;

export type UsersListEmailsForAuthenticatedUserError = string | basic_error;

export type UsersAddEmailForAuthenticatedUserData = {
  body?:
    | {
        /**
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         */
        emails: Array<string>;
      }
    | Array<string>
    | string;
};

export type UsersAddEmailForAuthenticatedUserResponse = Array<email>;

export type UsersAddEmailForAuthenticatedUserError = string | basic_error | validation_error;

export type UsersListFollowersForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListFollowersForAuthenticatedUserResponse = Array<simple_user>;

export type UsersListFollowersForAuthenticatedUserError = string | basic_error;

export type UsersListFollowedByAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListFollowedByAuthenticatedUserResponse = Array<simple_user>;

export type UsersListFollowedByAuthenticatedUserError = string | basic_error;

export type UsersUnfollowData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type UsersUnfollowResponse = {};

export type UsersUnfollowError = string | basic_error;

export type UsersCheckPersonIsFollowedByAuthenticatedData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type UsersCheckPersonIsFollowedByAuthenticatedResponse = {};

export type UsersCheckPersonIsFollowedByAuthenticatedError = string | basic_error;

export type UsersFollowData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type UsersFollowResponse = {};

export type UsersFollowError = string | basic_error;

export type UsersListGpgKeysForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListGpgKeysForAuthenticatedUserResponse = Array<gpg_key>;

export type UsersListGpgKeysForAuthenticatedUserError = string | basic_error;

export type UsersCreateGpgKeyForAuthenticatedUserData = {
  body: {
    /**
     * A GPG key in ASCII-armored format.
     */
    armored_public_key: string;
    /**
     * A descriptive name for the new key.
     */
    name?: string;
  };
};

export type UsersCreateGpgKeyForAuthenticatedUserResponse = gpg_key;

export type UsersCreateGpgKeyForAuthenticatedUserError = string | basic_error | validation_error;

export type UsersDeleteGpgKeyForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the GPG key.
     */
    gpg_key_id: number;
  };
};

export type UsersDeleteGpgKeyForAuthenticatedUserResponse = {};

export type UsersDeleteGpgKeyForAuthenticatedUserError = string | basic_error | validation_error;

export type UsersGetGpgKeyForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the GPG key.
     */
    gpg_key_id: number;
  };
};

export type UsersGetGpgKeyForAuthenticatedUserResponse = gpg_key;

export type UsersGetGpgKeyForAuthenticatedUserError = string | basic_error;

export type AppsListInstallationsForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type AppsListInstallationsForAuthenticatedUserResponse = {
  installations: Array<installation>;
  total_count: number;
};

export type AppsListInstallationsForAuthenticatedUserError = string | basic_error;

export type AppsListInstallationReposForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the installation.
     */
    installation_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type AppsListInstallationReposForAuthenticatedUserResponse = {
  repositories: Array<repository>;
  repository_selection?: string;
  total_count: number;
};

export type AppsListInstallationReposForAuthenticatedUserError = string | basic_error;

export type AppsRemoveRepoFromInstallationForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the installation.
     */
    installation_id: number;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type AppsRemoveRepoFromInstallationForAuthenticatedUserResponse = {};

export type AppsRemoveRepoFromInstallationForAuthenticatedUserError = string | basic_error;

export type AppsAddRepoToInstallationForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the installation.
     */
    installation_id: number;
    /**
     * The unique identifier of the repository.
     */
    repository_id: number;
  };
};

export type AppsAddRepoToInstallationForAuthenticatedUserResponse = {};

export type AppsAddRepoToInstallationForAuthenticatedUserError = string | basic_error;

export type InteractionsRemoveRestrictionsForAuthenticatedUserResponse = {};

export type InteractionsRemoveRestrictionsForAuthenticatedUserError = string;

export type InteractionsGetRestrictionsForAuthenticatedUserResponse =
  | (
      | interaction_limit_response
      | {
          [key: string]: string;
        }
    )
  | {};

export type InteractionsGetRestrictionsForAuthenticatedUserError = string;

export type InteractionsSetRestrictionsForAuthenticatedUserData = {
  body: interaction_limit;
};

export type InteractionsSetRestrictionsForAuthenticatedUserResponse = interaction_limit_response;

export type InteractionsSetRestrictionsForAuthenticatedUserError = validation_error;

export type IssuesListForAuthenticatedUserData = {
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.
     */
    filter?: 'assigned' | 'created' | 'mentioned' | 'subscribed' | 'repos' | 'all';
    /**
     * A list of comma separated label names. Example: `bug,ui,@high`
     */
    labels?: string;
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    /**
     * What to sort results by.
     */
    sort?: 'created' | 'updated' | 'comments';
    /**
     * Indicates the state of the issues to return.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type IssuesListForAuthenticatedUserResponse = Array<issue>;

export type IssuesListForAuthenticatedUserError = string | basic_error;

export type UsersListPublicSshKeysForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListPublicSshKeysForAuthenticatedUserResponse = Array<key>;

export type UsersListPublicSshKeysForAuthenticatedUserError = string | basic_error;

export type UsersCreatePublicSshKeyForAuthenticatedUserData = {
  body: {
    /**
     * The public SSH key to add to your GitHub account.
     */
    key: string;
    /**
     * A descriptive name for the new key.
     */
    title?: string;
  };
};

export type UsersCreatePublicSshKeyForAuthenticatedUserResponse = key;

export type UsersCreatePublicSshKeyForAuthenticatedUserError = string | basic_error | validation_error;

export type UsersDeletePublicSshKeyForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the key.
     */
    key_id: number;
  };
};

export type UsersDeletePublicSshKeyForAuthenticatedUserResponse = {};

export type UsersDeletePublicSshKeyForAuthenticatedUserError = string | basic_error;

export type UsersGetPublicSshKeyForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the key.
     */
    key_id: number;
  };
};

export type UsersGetPublicSshKeyForAuthenticatedUserResponse = key;

export type UsersGetPublicSshKeyForAuthenticatedUserError = string | basic_error;

export type AppsListSubscriptionsForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type AppsListSubscriptionsForAuthenticatedUserResponse = Array<user_marketplace_purchase>;

export type AppsListSubscriptionsForAuthenticatedUserError = string | basic_error;

export type AppsListSubscriptionsForAuthenticatedUserStubbedData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type AppsListSubscriptionsForAuthenticatedUserStubbedResponse = Array<user_marketplace_purchase>;

export type AppsListSubscriptionsForAuthenticatedUserStubbedError = string | basic_error;

export type OrgsListMembershipsForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
     */
    state?: 'active' | 'pending';
  };
};

export type OrgsListMembershipsForAuthenticatedUserResponse = Array<org_membership>;

export type OrgsListMembershipsForAuthenticatedUserError = string | basic_error | validation_error;

export type OrgsGetMembershipForAuthenticatedUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsGetMembershipForAuthenticatedUserResponse = org_membership;

export type OrgsGetMembershipForAuthenticatedUserError = basic_error;

export type OrgsUpdateMembershipForAuthenticatedUserData = {
  body: {
    /**
     * The state that the membership should be in. Only `"active"` will be accepted.
     */
    state: 'active';
  };
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
  };
};

export type OrgsUpdateMembershipForAuthenticatedUserResponse = org_membership;

export type OrgsUpdateMembershipForAuthenticatedUserError = basic_error | validation_error;

export type MigrationsListForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type MigrationsListForAuthenticatedUserResponse = Array<migration>;

export type MigrationsListForAuthenticatedUserError = string | basic_error;

export type MigrationsStartForAuthenticatedUserData = {
  body: {
    /**
     * Exclude attributes from the API response to improve performance
     */
    exclude?: Array<'repositories'>;
    /**
     * Do not include attachments in the migration
     */
    exclude_attachments?: boolean;
    /**
     * Indicates whether the repository git data should be excluded from the migration.
     */
    exclude_git_data?: boolean;
    /**
     * Indicates whether metadata should be excluded and only git source should be included for the migration.
     */
    exclude_metadata?: boolean;
    /**
     * Indicates whether projects owned by the organization or users should be excluded.
     */
    exclude_owner_projects?: boolean;
    /**
     * Do not include releases in the migration
     */
    exclude_releases?: boolean;
    /**
     * Lock the repositories being migrated at the start of the migration
     */
    lock_repositories?: boolean;
    /**
     * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
     */
    org_metadata_only?: boolean;
    repositories: Array<string>;
  };
};

export type MigrationsStartForAuthenticatedUserResponse = migration;

export type MigrationsStartForAuthenticatedUserError = string | basic_error | validation_error;

export type MigrationsGetStatusForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
  };
  query?: {
    exclude?: Array<string>;
  };
};

export type MigrationsGetStatusForAuthenticatedUserResponse = migration;

export type MigrationsGetStatusForAuthenticatedUserError = string | basic_error;

export type MigrationsDeleteArchiveForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
  };
};

export type MigrationsDeleteArchiveForAuthenticatedUserResponse = {};

export type MigrationsDeleteArchiveForAuthenticatedUserError = string | basic_error;

export type MigrationsGetArchiveForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
  };
};

export type MigrationsUnlockRepoForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
    /**
     * repo_name parameter
     */
    repo_name: string;
  };
};

export type MigrationsUnlockRepoForAuthenticatedUserResponse = {};

export type MigrationsUnlockRepoForAuthenticatedUserError = string | basic_error;

export type MigrationsListReposForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the migration.
     */
    migration_id: number;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type MigrationsListReposForAuthenticatedUserResponse = Array<minimal_repository>;

export type MigrationsListReposForAuthenticatedUserError = basic_error;

export type OrgsListForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListForAuthenticatedUserResponse = Array<organization_simple>;

export type OrgsListForAuthenticatedUserError = string | basic_error;

export type PackagesListPackagesForAuthenticatedUserData = {
  query: {
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
     *
     * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
     * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
     */
    visibility?: 'public' | 'private' | 'internal';
  };
};

export type PackagesListPackagesForAuthenticatedUserResponse = Array<string>;

export type PackagesListPackagesForAuthenticatedUserError = string;

export type PackagesDeletePackageForAuthenticatedUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
};

export type PackagesDeletePackageForAuthenticatedUserResponse = {};

export type PackagesDeletePackageForAuthenticatedUserError = basic_error;

export type PackagesGetPackageForAuthenticatedUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
};

export type PackagesGetPackageForAuthenticatedUserResponse = _package;

export type PackagesGetPackageForAuthenticatedUserError = string;

export type PackagesRestorePackageForAuthenticatedUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
  query?: {
    /**
     * package token
     */
    token?: string;
  };
};

export type PackagesRestorePackageForAuthenticatedUserResponse = {};

export type PackagesRestorePackageForAuthenticatedUserError = basic_error;

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The state of the package, either active or deleted.
     */
    state?: 'active' | 'deleted';
  };
};

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserResponse = Array<package_version>;

export type PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserError = basic_error;

export type PackagesDeletePackageVersionForAuthenticatedUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
  };
};

export type PackagesDeletePackageVersionForAuthenticatedUserResponse = {};

export type PackagesDeletePackageVersionForAuthenticatedUserError = basic_error;

export type PackagesGetPackageVersionForAuthenticatedUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
  };
};

export type PackagesGetPackageVersionForAuthenticatedUserResponse = package_version;

export type PackagesGetPackageVersionForAuthenticatedUserError = string;

export type PackagesRestorePackageVersionForAuthenticatedUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
  };
};

export type PackagesRestorePackageVersionForAuthenticatedUserResponse = {};

export type PackagesRestorePackageVersionForAuthenticatedUserError = basic_error;

export type ProjectsCreateForAuthenticatedUserData = {
  body: {
    /**
     * Body of the project
     */
    body?: string | null;
    /**
     * Name of the project
     */
    name: string;
  };
};

export type ProjectsCreateForAuthenticatedUserResponse = project;

export type ProjectsCreateForAuthenticatedUserError = string | basic_error | validation_error_simple;

export type UsersListPublicEmailsForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListPublicEmailsForAuthenticatedUserResponse = Array<email>;

export type UsersListPublicEmailsForAuthenticatedUserError = string | basic_error;

export type ReposListForAuthenticatedUserData = {
  query?: {
    /**
     * Comma-separated list of values. Can include:
     * * `owner`: Repositories that are owned by the authenticated user.
     * * `collaborator`: Repositories that the user has been added to as a collaborator.
     * * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
     */
    affiliation?: string;
    /**
     * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    before?: string;
    /**
     * The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
    /**
     * The property to sort the results by.
     */
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    /**
     * Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
     */
    type?: 'all' | 'owner' | 'public' | 'private' | 'member';
    /**
     * Limit results to repositories with the specified visibility.
     */
    visibility?: 'all' | 'public' | 'private';
  };
};

export type ReposListForAuthenticatedUserResponse = Array<repository>;

export type ReposListForAuthenticatedUserError = string | basic_error | validation_error;

export type ReposCreateForAuthenticatedUserData = {
  body: {
    /**
     * Whether to allow Auto-merge to be used on pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allow_squash_merge?: boolean;
    /**
     * Whether the repository is initialized with a minimal README.
     */
    auto_init?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    /**
     * A short description of the repository.
     */
    description?: string;
    /**
     * The desired language or platform to apply to the .gitignore.
     */
    gitignore_template?: string;
    /**
     * Whether discussions are enabled.
     */
    has_discussions?: boolean;
    /**
     * Whether downloads are enabled.
     */
    has_downloads?: boolean;
    /**
     * Whether issues are enabled.
     */
    has_issues?: boolean;
    /**
     * Whether projects are enabled.
     */
    has_projects?: boolean;
    /**
     * Whether the wiki is enabled.
     */
    has_wiki?: boolean;
    /**
     * A URL with more information about the repository.
     */
    homepage?: string;
    /**
     * Whether this repository acts as a template that can be used to generate new repositories.
     */
    is_template?: boolean;
    /**
     * The license keyword of the open source license for this repository.
     */
    license_template?: string;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The name of the repository.
     */
    name: string;
    /**
     * Whether the repository is private.
     */
    private?: boolean;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
     */
    team_id?: number;
  };
};

export type ReposCreateForAuthenticatedUserResponse = repository;

export type ReposCreateForAuthenticatedUserError = string | basic_error | validation_error;

export type ReposListInvitationsForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ReposListInvitationsForAuthenticatedUserResponse = Array<repository_invitation>;

export type ReposListInvitationsForAuthenticatedUserError = string | basic_error;

export type ReposDeclineInvitationForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the invitation.
     */
    invitation_id: number;
  };
};

export type ReposDeclineInvitationForAuthenticatedUserResponse = {};

export type ReposDeclineInvitationForAuthenticatedUserError = string | basic_error;

export type ReposAcceptInvitationForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the invitation.
     */
    invitation_id: number;
  };
};

export type ReposAcceptInvitationForAuthenticatedUserResponse = {};

export type ReposAcceptInvitationForAuthenticatedUserError = string | basic_error;

export type UsersListSshSigningKeysForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListSshSigningKeysForAuthenticatedUserResponse = Array<ssh_signing_key>;

export type UsersListSshSigningKeysForAuthenticatedUserError = string | basic_error;

export type UsersCreateSshSigningKeyForAuthenticatedUserData = {
  body: {
    /**
     * The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
     */
    key: string;
    /**
     * A descriptive name for the new key.
     */
    title?: string;
  };
};

export type UsersCreateSshSigningKeyForAuthenticatedUserResponse = ssh_signing_key;

export type UsersCreateSshSigningKeyForAuthenticatedUserError = string | basic_error | validation_error;

export type UsersDeleteSshSigningKeyForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the SSH signing key.
     */
    ssh_signing_key_id: number;
  };
};

export type UsersDeleteSshSigningKeyForAuthenticatedUserResponse = {};

export type UsersDeleteSshSigningKeyForAuthenticatedUserError = string | basic_error;

export type UsersGetSshSigningKeyForAuthenticatedUserData = {
  path: {
    /**
     * The unique identifier of the SSH signing key.
     */
    ssh_signing_key_id: number;
  };
};

export type UsersGetSshSigningKeyForAuthenticatedUserResponse = ssh_signing_key;

export type UsersGetSshSigningKeyForAuthenticatedUserError = string | basic_error;

export type ActivityListReposStarredByAuthenticatedUserData = {
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
     */
    sort?: 'created' | 'updated';
  };
};

export type ActivityListReposStarredByAuthenticatedUserResponse = Array<repository>;

export type ActivityListReposStarredByAuthenticatedUserError = string | basic_error;

export type ActivityUnstarRepoForAuthenticatedUserData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActivityUnstarRepoForAuthenticatedUserResponse = {};

export type ActivityUnstarRepoForAuthenticatedUserError = string | basic_error;

export type ActivityCheckRepoIsStarredByAuthenticatedUserData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActivityCheckRepoIsStarredByAuthenticatedUserResponse = {};

export type ActivityCheckRepoIsStarredByAuthenticatedUserError = string | basic_error;

export type ActivityStarRepoForAuthenticatedUserData = {
  path: {
    /**
     * The account owner of the repository. The name is not case sensitive.
     */
    owner: string;
    /**
     * The name of the repository. The name is not case sensitive.
     */
    repo: string;
  };
};

export type ActivityStarRepoForAuthenticatedUserResponse = {};

export type ActivityStarRepoForAuthenticatedUserError = string | basic_error;

export type ActivityListWatchedReposForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListWatchedReposForAuthenticatedUserResponse = Array<minimal_repository>;

export type ActivityListWatchedReposForAuthenticatedUserError = string | basic_error;

export type TeamsListForAuthenticatedUserData = {
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type TeamsListForAuthenticatedUserResponse = Array<team_full>;

export type TeamsListForAuthenticatedUserError = string | basic_error;

export type UsersListData = {
  query?: {
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * A user ID. Only return users with an ID greater than this ID.
     */
    since?: number;
  };
};

export type UsersListResponse = Array<simple_user>;

export type UsersListError = string;

export type UsersGetByUsernameData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type UsersGetByUsernameResponse = private_user | public_user;

export type UsersGetByUsernameError = basic_error;

export type ActivityListEventsForAuthenticatedUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListEventsForAuthenticatedUserResponse = Array<event>;

export type ActivityListEventsForAuthenticatedUserError = string;

export type ActivityListOrgEventsForAuthenticatedUserData = {
  path: {
    /**
     * The organization name. The name is not case sensitive.
     */
    org: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListOrgEventsForAuthenticatedUserResponse = Array<event>;

export type ActivityListOrgEventsForAuthenticatedUserError = string;

export type ActivityListPublicEventsForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListPublicEventsForUserResponse = Array<event>;

export type ActivityListPublicEventsForUserError = string;

export type UsersListFollowersForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListFollowersForUserResponse = Array<simple_user>;

export type UsersListFollowersForUserError = string;

export type UsersListFollowingForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListFollowingForUserResponse = Array<simple_user>;

export type UsersListFollowingForUserError = string;

export type UsersCheckFollowingForUserData = {
  path: {
    target_user: string;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type UsersCheckFollowingForUserResponse = {};

export type UsersCheckFollowingForUserError = string;

export type GistsListForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    since?: string;
  };
};

export type GistsListForUserResponse = Array<base_gist>;

export type GistsListForUserError = validation_error;

export type UsersListGpgKeysForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListGpgKeysForUserResponse = Array<gpg_key>;

export type UsersListGpgKeysForUserError = string;

export type UsersGetContextForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.
     */
    subject_id?: string;
    /**
     * Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.
     */
    subject_type?: 'organization' | 'repository' | 'issue' | 'pull_request';
  };
};

export type UsersGetContextForUserResponse = hovercard;

export type UsersGetContextForUserError = basic_error | validation_error;

export type AppsGetUserInstallationData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type AppsGetUserInstallationResponse = installation;

export type AppsGetUserInstallationError = string;

export type UsersListPublicKeysForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListPublicKeysForUserResponse = Array<key_simple>;

export type UsersListPublicKeysForUserError = string;

export type OrgsListForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type OrgsListForUserResponse = Array<organization_simple>;

export type OrgsListForUserError = string;

export type PackagesListPackagesForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query: {
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * The selected visibility of the packages.  This parameter is optional and only filters an existing result set.
     *
     * The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
     * For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
     */
    visibility?: 'public' | 'private' | 'internal';
  };
};

export type PackagesListPackagesForUserResponse = Array<string>;

export type PackagesListPackagesForUserError = basic_error;

export type PackagesDeletePackageForUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type PackagesDeletePackageForUserResponse = {};

export type PackagesDeletePackageForUserError = basic_error;

export type PackagesGetPackageForUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type PackagesGetPackageForUserResponse = _package;

export type PackagesGetPackageForUserError = string;

export type PackagesRestorePackageForUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * package token
     */
    token?: string;
  };
};

export type PackagesRestorePackageForUserResponse = {};

export type PackagesRestorePackageForUserError = basic_error;

export type PackagesGetAllPackageVersionsForPackageOwnedByUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type PackagesGetAllPackageVersionsForPackageOwnedByUserResponse = Array<package_version>;

export type PackagesGetAllPackageVersionsForPackageOwnedByUserError = basic_error;

export type PackagesDeletePackageVersionForUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type PackagesDeletePackageVersionForUserResponse = {};

export type PackagesDeletePackageVersionForUserError = basic_error;

export type PackagesGetPackageVersionForUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type PackagesGetPackageVersionForUserResponse = package_version;

export type PackagesGetPackageVersionForUserError = string;

export type PackagesRestorePackageVersionForUserData = {
  path: {
    /**
     * The name of the package.
     */
    package_name: string;
    /**
     * The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.
     */
    package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
    /**
     * Unique identifier of the package version.
     */
    package_version_id: number;
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type PackagesRestorePackageVersionForUserResponse = {};

export type PackagesRestorePackageVersionForUserError = basic_error;

export type ProjectsListForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * Indicates the state of the projects to return.
     */
    state?: 'open' | 'closed' | 'all';
  };
};

export type ProjectsListForUserResponse = Array<project>;

export type ProjectsListForUserError = validation_error;

export type ActivityListReceivedEventsForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListReceivedEventsForUserResponse = Array<event>;

export type ActivityListReceivedEventsForUserError = string;

export type ActivityListReceivedPublicEventsForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListReceivedPublicEventsForUserResponse = Array<event>;

export type ActivityListReceivedPublicEventsForUserError = string;

export type ReposListForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The property to sort the results by.
     */
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    /**
     * Limit results to repositories of the specified type.
     */
    type?: 'all' | 'owner' | 'member';
  };
};

export type ReposListForUserResponse = Array<minimal_repository>;

export type ReposListForUserError = string;

export type BillingGetGithubActionsBillingUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type BillingGetGithubActionsBillingUserResponse = actions_billing_usage;

export type BillingGetGithubActionsBillingUserError = string;

export type BillingGetGithubPackagesBillingUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type BillingGetGithubPackagesBillingUserResponse = packages_billing_usage;

export type BillingGetGithubPackagesBillingUserError = string;

export type BillingGetSharedStorageBillingUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
};

export type BillingGetSharedStorageBillingUserResponse = combined_billing_usage;

export type BillingGetSharedStorageBillingUserError = string;

export type UsersListSshSigningKeysForUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type UsersListSshSigningKeysForUserResponse = Array<ssh_signing_key>;

export type UsersListSshSigningKeysForUserError = string;

export type ActivityListReposStarredByUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * The direction to sort the results by.
     */
    direction?: 'asc' | 'desc';
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
    /**
     * The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.
     */
    sort?: 'created' | 'updated';
  };
};

export type ActivityListReposStarredByUserResponse = Array<starred_repository> | Array<repository>;

export type ActivityListReposStarredByUserError = string;

export type ActivityListReposWatchedByUserData = {
  path: {
    /**
     * The handle for the GitHub user account.
     */
    username: string;
  };
  query?: {
    /**
     * Page number of the results to fetch.
     */
    page?: number;
    /**
     * The number of results per page (max 100).
     */
    per_page?: number;
  };
};

export type ActivityListReposWatchedByUserResponse = Array<minimal_repository>;

export type ActivityListReposWatchedByUserError = string;

export type MetaGetAllVersionsResponse = Array<string>;

export type MetaGetAllVersionsError = basic_error;

export type MetaGetZenResponse = string;

export type MetaGetZenError = string;
